document.addEventListener('DOMContentLoaded', () => {
    // --- CONFIGURATION ---
    const DEFAULT_LANG = 'en';
    const DEFAULT_UNIT = 'metric'; // DEFAULT GRAMS!

    // --- IMAGE PATHS ---
    const IMAGE_PATHS = { classic: 'classic.webp', thick: 'thick_and_gooey.webp', thin: 'thin-and-crispy.webp', comparison: '3-cookie-types.jpg', stuffed: 'stuffed_cookie.webp' };

    // --- DOM ELEMENTS ---
    const body = document.body;
    // const mainTitleH1 = document.getElementById('main-title-h1'); // Not directly manipulated
    const omarsFavText = document.querySelector('.omars-fav-text');
    const langButtons = document.querySelectorAll('.lang-btn');
    const cookieTypeButtons = document.querySelectorAll('.selector-btn');
    const selectedCookieImage = document.getElementById('selected-cookie-image');
    const keyDifferencesContainer = document.getElementById('key-differences');
    const keyDiffTitleElement = keyDifferencesContainer.querySelector('h3[data-lang-key="keyDifferencesTitleBase"] .dynamic-cookie-name'); // Target span for name
    const keyDifferencesPoints = keyDifferencesContainer.querySelector('.diff-points');
    const recipeDetailsContainer = document.getElementById('recipe-details');
    const unitTogglesTemplate = document.getElementById('unit-toggles-template');
    const easterEggContainer = document.getElementById('easter-egg-container');
    const stuffedCookieImage = document.getElementById('stuffed-cookie-image');
    const tipsList = document.getElementById('tips-list');

    // --- STATE ---
    let currentLang = DEFAULT_LANG;
    let currentUnit = DEFAULT_UNIT;
    let selectedCookieType = null;

    // --- DATA (Brown Butter & Milk Powder Integrated from Draft) ---
    const langData = {
        // --- English ---
        en: {
            // UI Text
            mainTitle: "üç™ Omar's Insanely Good Cookie Guide! üç™", omarsFavText: "Omar's Fave!",
            unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            yieldInfo: "Whips up about 18-24 cookies üç™",
            chooseStyle: "Alright, Cookie Boss! Pick Your Poison (aka Style!):",
            typeClassic: "Classic Balanced", typeThick: "Thick & Gooey", typeThin: "Thin & Crispy",
            keyDifferencesTitleBase: "üîë Key Differences for", // Base title, name added dynamically
            butterTitle: "Brown Butter State & Mixing", // Updated title
            chillingTitle: "Chilling Method", otherNotesTitle: "Other Key Notes",
            placeholderSelect: "üëà Click a cookie style above to witness the magic! ‚ú®",
            ingredientsTitle: "ü•£ Ingredients (The Good Stuff)", stepsTitle: "üìù Steps (Let's Bake!)",
            scienceNoteTitle: "üî¨ The Science Bit! (Nerd Out!)",
            toastNutsTitle: "Optional Power-Up: Toast Nuts?", toastNutsDesc: "Toasting nuts (pecans/walnuts are great!) at 350¬∞F/175¬∞C for 5-8 mins unlocks deeper, nuttier flavor dimensions. Totally worth the tiny extra step!",
            easterEggTitle: "üèÜ You Legend! Picked GOOEY! üèÜ", easterEggIntro: "Okay, you've got taste! Ready for the Level 2 Boss?", easterEggIdea: "üî• STUFFED COOKIES! üî•",
            easterEggDesc: "Dead easy: Make a dent in your THICK cookie dough ball, plop in ~1 tsp Nutella/Lotus/Pistachio cream, seal it up like a secret treasure, then bake as usual!",
            easterEggPistachioTip: "Seriously, TRUST the pistachio! It's a game-changer.", pistachioReco: "Best Spread IMHO:", pistachioLinkSource: "(Amazon EG link)",
            tipsTitle: "üí° Omar's Pro Tips! (Unlock God Tier Cookies)",
            finalTag: "Nailed it? Wanna show off? Tag me! @omarisavibe üòÑ",
            // Key Differences Content - Reflecting Brown Butter for All
            diffs: {
                 classic: {
                    butterMethod: "Use <span class='highlight'>COOLED but LIQUID</span> Brown Butter. Whisk with sugars (no heavy creaming needed).",
                    chillingMethod: "<span class='highlight'>RECOMMENDED Chill:</span> 30 mins - 24 hrs. Improves flavor and texture.",
                    otherNotes: "Standard flour amount (~300g). Includes baking powder for a slight lift."
                },
                thick: {
                    butterMethod: "Use <span class='critical'>CHILLED SOLID</span> Brown Butter. <span class='critical'>Cream</span> this with sugars until very light and fluffy (3-5 mins).",
                    chillingMethod: "<span class='critical'>MANDATORY Long Chill:</span> 24 - 72 hrs. The SECRET to thickness & deep flavor!",
                    otherNotes: "Use <span class='highlight'>MORE flour</span> (~310-330g). Baking powder + optional cornstarch for softness."
                },
                thin: {
                    butterMethod: "Use <span class='critical'>WARM LIQUID</span> Brown Butter. Whisk with sugars.",
                    chillingMethod: "<span class='critical'>SKIP Chilling!</span> Bake immediately for maximum spread.",
                    otherNotes: "Use <span class='highlight'>LESS flour</span> (~280-300g). <span class='critical'>OMIT baking powder.</span> More white sugar aids crispness."
                }
            },
            // Recipes - Using Brown Butter & Milk Powder based on Draft
            recipes: {
                classic: { // Based on Draft 'classic'
                    name: "Classic Balanced", theme: "classic-theme",
                    ingredients: [
                        { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">COOLED but LIQUID</span>' },
                        { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups brown sugar, packed', metric: '250g brown sugar, packed' },
                        { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup granulated sugar', metric: '100g granulated sugar' },
                        { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 cups all-purpose flour', metric: '300g all-purpose flour' },
                        { key: 'milkpowder', emoji: 'ü•õ', imperial: '3-4 Tbsp toasted milk powder', metric: '30-40g toasted milk powder (Optional, adds chew!)' }, // Added
                        { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' },
                        { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, // Added Powder
                        { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt (or 3g table salt)' },
                        { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' },
                        { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' },
                        { key: 'choco', emoji: 'üç´', imperial: '1.5 - 2 cups chocolate chips/chunks', metric: '255-340g chocolate chips/chunks <span class="note">(Good MILK chocolate recommended!)</span>' },
                    ],
                    steps: [ // Based on Draft 'classic' steps
                        'Universal Prep: Brown the butter & let cool until <span class="critical">liquid but not hot</span>. Toast milk powder (if using). Whisk dry ingredients (flour, milk powder, sodas, salt).', // Merged Prep
                        'In a large bowl, whisk <span class="highlight">liquid brown butter</span> with both sugars until combined.',
                        'Beat in eggs one at a time, then vanilla.',
                        'Gradually mix in dry ingredients until JUST combined. <span class="critical">Do NOT overmix!</span>',
                        'Stir in chocolate chips/chunks.',
                        '<span class="highlight">CHILL DOUGH (Recommended):</span> Cover & chill for <span class="highlight">at least 30 mins</span>, up to 24 hours for best results.',
                        'Preheat oven to <span class="highlight">375¬∞F (190¬∞C)</span>. Line baking sheets.',
                        'Scoop <span class="highlight">~2 Tbsp</span> balls. Optional: flaky salt on top.',
                        'Bake <span class="highlight">10-12 minutes</span> until edges are set and golden.',
                        'Cool on pan 5-10 mins, then transfer to wire rack. Enjoy! üéâ'
                    ],
                     scienceNote: "Cooled liquid brown butter adds nutty flavor without the airiness of creaming. Chilling recommended for texture. Baking powder gives a little extra lift."
                },
                thick: { // Based on Draft 'thick'
                    name: "Thick & Gooey", theme: "thick-theme",
                    ingredients: [
                        { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">CHILLED SOLID (scoopable)</span>' },
                        { key: 'sugar', emoji: 'üç¨', imperial: '1 1/2 cups brown sugar, packed', metric: '300g brown sugar, packed (More brown!)' },
                        { key: 'sugar_gran', emoji: 'üçö', imperial: '1/4 cup granulated sugar', metric: '50g granulated sugar (Less white!)' },
                        { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 - 2 3/4 cups all-purpose flour', metric: '310-330g all-purpose flour (More flour!)' },
                        { key: 'milkpowder', emoji: 'ü•õ', imperial: '3-4 Tbsp toasted milk powder', metric: '30-40g toasted milk powder (Optional)' }, // Added
                        { key: 'starch', emoji: '‚≠ê', imperial: '1-2 Tbsp cornstarch', metric: '8-16g cornstarch (Optional, for softness)' }, // Added
                        { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' },
                        { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' },
                        { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' },
                        { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' },
                        { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' },
                        { key: 'choco', emoji: 'üç´', imperial: '2+ cups chocolate chips/chunks', metric: '340g+ chocolate chips/chunks <span class="note">(Go generous! Good MILK chocolate!)</span>' },
                    ],
                     steps: [ // Based on Draft 'thick' steps
                        'Universal Prep: Brown the butter & <span class="critical">chill until SOLID</span> but scoopable. Toast milk powder (if using). Whisk dry ingredients (flour, milk powder, cornstarch, sodas, salt).', // Merged Prep
                        'In a stand mixer (ideal) or with hand mixer, <span class="critical">CREAM</span> the chilled solid brown butter with both sugars until very light & fluffy (3-5 mins). Don\'t skimp!',
                        'Beat in eggs one at a time, then vanilla.',
                        'Gradually mix in the <span class="highlight">higher amount</span> of dry ingredients until JUST combined. <span class="critical">Do NOT overmix!</span>',
                        'Stir in a <span class="highlight">generous</span> amount of chocolate.',
                        '<span class="critical">CHILL DOUGH (MANDATORY):</span> Cover & chill for <span class="critical">24 - 72 hours</span>. This is non-negotiable for thickness and flavor!',
                        'Preheat oven to <span class="highlight">375¬∞F (190¬∞C)</span> (can start higher like 400¬∞F/200¬∞C for first few mins). Line sheets.',
                        'Scoop <span class="critical">LARGE (~3-4 Tbsp)</span> balls. <span class="highlight">Keep them TALL!</span> Don\'t flatten. Optional: flaky salt.',
                        'Bake <span class="highlight">12-15 minutes</span>. Edges must be set, centers look <span class="critical">soft/slightly underdone</span>.',
                        'Cool on pan <span class="critical">10-15 mins minimum</span> to set, then transfer to wire rack. The GOOEY prize awaits! üòç'
                    ],
                     scienceNote: "Creaming SOLID chilled brown butter incorporates lots of air for thickness. The long chill is KEY for hydration and preventing spread. More flour + cornstarch = ultimate chew/softness."
                },
                 thin: { // Based on Draft 'thin'
                     name: "Thin & Crispy", theme: "thin-theme",
                     ingredients: [
                        { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">WARM LIQUID</span>' },
                        { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups granulated sugar', metric: '250g granulated sugar (More white!)' },
                        { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup brown sugar, packed', metric: '100g brown sugar, packed (Less brown!)' }, // Note: Draft had this sugar ratio
                        { key: 'flour', emoji: 'üåæ', imperial: '2 1/4 - 2 1/2 cups all-purpose flour', metric: '280-300g all-purpose flour (Less flour!)' },
                        { key: 'milkpowder', emoji: 'ü•õ', imperial: '3-4 Tbsp toasted milk powder', metric: '30-40g toasted milk powder (Optional)' }, // Added
                        { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda <span class="critical note"> (NO baking powder!)</span>' },
                        // { key: 'leavening_powder'... OMITTED for thin/crispy as per draft logic
                        { key: 'extra_liquid', emoji: 'üíß', imperial: '1-2 Tbsp milk', metric: '15-30ml milk (Optional, for extra spread)' }, // Added
                        { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' },
                        { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp (+ Optional extra Yolk for chew)' }, // Added yolk option note
                        { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' },
                        { key: 'choco', emoji: 'üç´', imperial: '1.5 cups chocolate chips/chunks', metric: '255g chocolate chips/chunks <span class="note">(Minis work well! Good MILK chocolate!)</span>' },
                     ],
                     steps: [ // Based on Draft 'thin' steps
                         'Universal Prep: Brown the butter & keep it <span class="critical">warm liquid</span>. Toast milk powder (if using). Whisk dry ingredients (flour, milk powder, <span class="highlight">soda ONLY</span>, salt).', // Merged Prep
                         'In a large bowl, whisk the <span class="highlight">warm brown butter</span> with both sugars (adjusted ratio) until combined.',
                         'Beat in eggs (and optional yolk/milk), then vanilla.',
                         'Gradually mix in the <span class="highlight">lower amount</span> of dry ingredients until JUST combined. <span class="critical">Do NOT overmix!</span>',
                         'Stir in chocolate chips/chunks.',
                         '<span class="critical">DO NOT CHILL.</span> Bake immediately for maximum spread!',
                         'Preheat oven lower: <span class="highlight">350¬∞F (175¬∞C)</span>. Line baking sheets.',
                         'Scoop <span class="highlight">smaller (~1.5-2 Tbsp)</span> balls. Place <span class="critical">FAR APART!</span> Can flatten slightly if desired.',
                         'Bake <span class="highlight">12-15 minutes</span> until golden brown and fully set for crispness.',
                         'Cool on pan 5 mins, then transfer to wire rack. They will crisp up significantly as they cool completely! ‚ú®'
                     ],
                     scienceNote: "Warm liquid brown butter + more white sugar + less flour + soda only + no chill = SUPER SPREAD! Lower/longer bake time ensures they dry out for that satisfying snap."
                 }
            },
            tips: [ /* ... tips data ... */ { emoji: '‚öñÔ∏è', text: "<span class='highlight'>Measure Flour Like a Pro:</span> Spoon & level, don't scoop! OR just use a scale (grams = KING). Avoids dry cookies." }, { emoji: 'ü•ö', text: "<span class='highlight'>Room Temp Ingredients Rule:</span> Eggs & butter mix way better when not fridge-cold. Quick fix: warm water bath for eggs!" }, { emoji: 'üßà', text: "<span class='highlight'>Brown Butter State is CRITICAL:</span> Cooled Liquid, Chilled Solid, or Warm Liquid - it dictates the texture! Pay attention!" }, { emoji: 'ü•∂', text: "<span class='critical'>Respect the Chill Time!:</span> Seriously, for thick/gooey it's non-negotiable. Builds flavour, prevents cookie puddles. DO IT." }, { emoji: 'üî•', text: "<span class='highlight'>Know Thy Oven:</span> They lie! An oven thermometer is cheap. Rotate pans if needed for even baking glory." }, { emoji: 'üç™', text: "<span class='highlight'>Don't Cremate Your Cookies:</span> Pull 'em out when edges are set/golden & centers look *slightly* underdone. Carryover cooking is real!" }, { emoji: 'üìÑ', text: "<span class='highlight'>Use Parchment Paper:</span> Prevents sticking, easy cleanup, promotes even browning. Your baking BFF." }, { emoji: 'ü•Ñ', text: "<span class='critical'>The Enemy: Overmixing Flour:</span> Mix JUST until flour disappears. More mixing = tough, sad cookies. Be gentle!" }, { emoji: '‚ú®', text: "<span class='highlight'>Fancy Finish: Flaky Sea Salt:</span> A tiny sprinkle *before* baking adds magic sparkle & flavor pop. Highly recommend!" }, { emoji: 'üç´', text: "<span class='highlight'>Chocolate Matters:</span> Use good stuff! Mix types (chips & chopped bars) for texture variation. It's the star!" }, { emoji: 'üí•', text: "<span class='highlight'>Optional: Pan-Banging:</span> For rippled edges (like fancy bakeries), lift & drop the pan mid-bake. Google it!" }, { key: 'sci1', emoji: 'üî•', text: 'Brown Butter Science: Maillard reaction = nutty flavor! Universal upgrade.' }, { key: 'sci2', emoji: 'ü•õ', text: 'Toasted Milk Powder: More Maillard! Extra chew/depth. Optional but awesome.' } ]
        },
        // --- Arabic ---
        ar: { /* ... All Arabic translations mirroring the English structure with Brown Butter & Milk Powder ... */
            mainTitle: "üç™ ÿØŸÑŸäŸÑ ÿπŸÖÿ± ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿÆÿ±ÿßŸÅŸäÿ©! üç™", omarsFavText: "ŸÖŸÅÿ∂ŸÑÿßÿ™ ÿπŸÖÿ±!", unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            yieldInfo: "ÿ®ÿ™ÿπŸÖŸÑ ÿ≠ŸàÿßŸÑŸä 18-24 ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤ üç™", chooseStyle: "ÿ™ŸÖÿßŸÖ Ÿäÿß ŸÖÿπŸÑŸÖ ÿßŸÑŸÉŸàŸÉŸäÿ≤! ÿßÿÆÿ™ÿßÿ± ŸÖÿ≤ÿßÿ¨ŸÉ (ŸäÿπŸÜŸä ÿßŸÑÿ≥ÿ™ÿßŸäŸÑ!):", typeClassic: "ŸÉŸÑÿßÿ≥ŸäŸÉ ŸÖÿ™Ÿàÿßÿ≤ŸÜ", typeThick: "ÿ≥ŸÖŸäŸÉÿ© Ÿà ÿ∫ÿ±ŸÇÿßŸÜÿ©: ÿßŸÑÿ®Ÿäÿ¨ ÿ≥ŸàŸÅÿ™Ÿä!", typeThin: "ÿ±ŸÅŸäÿπÿ© ŸàŸÖŸÇÿ±ŸÖÿ¥ÿ©: ÿßŸÑŸÑŸä ÿ®ÿ™ÿ∑ŸÇ",
            keyDifferencesTitleBase: "üîë ÿßŸÑŸÅÿ±ŸàŸÇÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑŸÉŸàŸÉŸäÿ≤", butterTitle: "ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸàÿßŸÑÿÆŸÑÿ∑", chillingTitle: "ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ", otherNotesTitle: "ÿßŸÑÿÆŸÑÿßÿµÿ© (ÿßŸÑÿ∫ÿ¥ ŸäÿπŸÜŸä)",
            placeholderSelect: "üëà ÿØŸàÿ≥ ÿπŸÑŸâ ÿ≥ÿ™ÿßŸäŸÑ ŸÅŸàŸÇ ÿπÿ¥ÿßŸÜ ÿ™ÿ¥ŸàŸÅ ÿßŸÑÿ≠ÿ±ŸÉÿßÿ™! ‚ú®", ingredientsTitle: "ü•£ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ (Ÿäÿß ÿ™ŸÉÿßÿ™Ÿá Ÿäÿß ÿ≠ÿ±ŸÉÿßÿ™Ÿá!)", stepsTitle: "üìù ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ (ÿ®ÿßŸÑÿ™ŸÅÿµŸäŸÑ ÿßŸÑŸÖŸÖŸÑ)", scienceNoteTitle: "üî¨ ÿßŸÑÿ≠ÿ™ÿ© ÿßŸÑÿπŸÑŸÖŸäÿ© (ŸÑŸÑŸÅŸáŸÖÿßŸÜŸäŸÜ!)",
            toastNutsTitle: "ÿ™ÿ≤ŸàŸäÿØÿ© ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ©: ÿ™ÿ≠ŸÖŸäÿµ ŸÖŸÉÿ≥ÿ±ÿßÿ™ÿü", toastNutsDesc: "ÿ™ÿ≠ŸÖŸäÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤ ÿ™ÿ≠ŸÅÿ©!) ŸÅŸä 175¬∞ŸÖ ŸÑŸÄ 5-8 ÿØŸÇÿßŸäŸÇ ÿ®ŸäŸÅÿ™ÿ≠ ŸÜŸÉŸáÿßÿ™ ÿ£ÿπŸÖŸÇ. ÿ™ÿ≥ÿ™ÿßŸáŸÑ!",
            easterEggTitle: "üèÜ Ÿäÿß ÿ£ÿ≥ÿ∑Ÿàÿ±ÿ©! ÿßÿÆÿ™ÿ±ÿ™ ÿßŸÑÿ∫ÿ±ŸÇÿßŸÜÿ©! üèÜ", easterEggIntro: "ÿ∞ŸàŸÇŸÉ ÿπÿßŸÑŸä ÿßŸÑÿµÿ±ÿßÿ≠ÿ©! ÿ¨ÿßŸáÿ≤ ŸÑŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸàÿ≠ÿ¥ÿü", easterEggIdea: "üî• ŸÉŸàŸÉŸäÿ≤ ŸÖÿ≠ÿ¥Ÿäÿ© Ÿäÿß Ÿàÿ≠ÿ¥! üî•", easterEggDesc: "ÿ≥ŸáŸÑÿ© ŸÖŸàÿ™: ÿßÿπŸÖŸÑ ÿ≠ŸÅÿ±ÿ© ŸÅŸä ŸÉŸàÿ±ÿ© ÿπÿ¨ŸäŸÜÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ©ÿå ÿßÿ≠ÿ¥ÿ± ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ© ŸÜŸàÿ™ŸäŸÑÿß/ŸÑŸàÿ™ÿ≥/ÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸàÿå ÿßŸÇŸÅŸÑŸáÿß ŸÉŸàŸäÿ≥ ŸÉÿ£ŸÜŸáÿß ÿ≥ÿ± ÿ≠ÿ±ÿ®Ÿäÿå ŸàÿßÿÆÿ®ÿ≤Ÿáÿß ÿπÿßÿØŸä!",
            easterEggPistachioTip: "ÿ®ÿ¨ÿØÿå ÿ¨ÿ±ÿ® ÿßŸÑÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸà ŸàŸÖÿ™ÿÆÿßŸÅÿ¥! ÿπÿßŸÑŸÖ ÿ™ÿßŸÜŸä ŸàÿßŸÑŸÑŸá.", pistachioReco: "ÿ£ÿ≠ÿ≥ŸÜ ŸÉÿ±ŸäŸÖÿ© ÿ®ÿµÿ±ÿßÿ≠ÿ©:", pistachioLinkSource: "(ŸÑŸäŸÜŸÉ ÿ£ŸÖÿßÿ≤ŸàŸÜ ŸÖÿµÿ±)",
            tipsTitle: "üí° ŸÜÿµÿßÿ¶ÿ≠ ÿπŸÖÿ± ŸÑŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ! (ÿßŸÅÿ™ÿ≠ ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸàÿ≠ÿ¥)", finalTag: "ÿ∏ÿ®ÿ∑ÿ™Ÿáÿßÿü ÿπÿßŸäÿ≤ ÿ™ÿ™ŸÖŸÜÿ∏ÿ±ÿü ÿßÿπŸÖŸÑŸä ÿ™ÿßÿ¨! @omarisavibe üòÑ",
            diffs: { classic: { butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='highlight'>ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± (ÿ®ÿØŸàŸÜ ÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä).", chillingMethod: "<span class='highlight'>ÿ™ÿ®ÿ±ŸäÿØ ŸÖŸèŸàÿµŸâ ÿ®Ÿá:</span> 30 ÿØŸÇŸäŸÇÿ© - 24 ÿ≥ÿßÿπÿ©. Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÜŸÉŸáÿ© ŸàÿßŸÑŸÇŸàÿßŸÖ.", otherNotes: "ŸÉŸÖŸäÿ© ÿØŸÇŸäŸÇ ÿπÿßÿØŸäÿ© (~300 ÿ¨ŸÖ). ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± ŸÑÿ±ŸÅÿπ ÿ®ÿ≥Ÿäÿ∑." }, thick: { butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>. <span class='critical'>ÿßÿÆŸÅŸÇŸáÿß ŸÉÿ±ŸäŸÖŸä</span> ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± ÿ≠ÿ™Ÿâ ÿ™ÿµÿ®ÿ≠ Ÿáÿ¥ÿ© ÿ¨ÿØŸãÿß (3-5 ÿØŸÇÿßÿ¶ŸÇ).", chillingMethod: "<span class='critical'>ÿ™ÿ®ÿ±ŸäÿØ ÿ•ŸÑÿ≤ÿßŸÖŸä ÿ∑ŸàŸäŸÑ:</span> 24 - 72 ÿ≥ÿßÿπÿ©. ŸáŸà <span class='critical'>ÿßŸÑÿ≥ÿ±</span> ŸÑŸÑÿ≥ŸÖŸÉ ŸàÿßŸÑŸÜŸÉŸáÿ© ÿßŸÑÿπŸÖŸäŸÇÿ©!", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÉÿ´ÿ±</span> (~310-330 ÿ¨ŸÖ). ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± + ŸÜÿ¥ÿß ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÑÿ∑ÿ±ÿßŸàÿ©." }, thin: { butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ÿØÿßŸÅÿ¶ÿ© Ÿàÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ±.", chillingMethod: "<span class='critical'>ÿ™ÿÆÿ∑Ÿé ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±Ÿãÿß ŸÑÿ£ŸÇÿµŸâ ÿ™ŸÖÿØÿØ.", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ</span> (~280-300 ÿ¨ŸÖ). <span class='critical'>ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±.</span> ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ´ÿ± Ÿäÿ≥ÿßÿπÿØ ÿπŸÑŸâ ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ©." } },
            recipes: {
                 classic: { name: "ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂' }, { key: 'flour', emoji: 'üåæ', cups: '2 1/2 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ∫ÿ±ÿßÿ∂' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '3-4 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '30-40 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ (ÿ£Ÿà 3ÿ¨ ŸÜÿßÿπŸÖ)' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 - 2 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255-340 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ≠ŸÑŸäÿ® ŸÉŸàŸäÿ≥ÿ©!)</span>' }, ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤ ÿ£ÿ≥ÿßÿ≥Ÿä: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿàÿ®ÿ±ŸëÿØŸáÿß ŸÑ<span class="critical">ÿ≥ÿßÿ¶ŸÑÿ© ÿ∫Ÿäÿ± ÿ≥ÿßÿÆŸÜÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ© (ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ). ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ®ÿå ÿµŸàÿØÿßÿå ŸÖŸÑÿ≠).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿ≥ÿßÿ¶ŸÑÿ©</span> ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ¨ÿßŸÅ ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©.', '<span class="highlight">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ŸÖŸÅÿ∂ŸÑ):</span> ÿ∫ÿ∑ŸäŸáÿß Ÿàÿ®ÿ±ŸëÿØŸáÿß <span class="highlight">30 ÿØŸÇŸäŸÇÿ©</span> ŸÑŸÄ 24 ÿ≥ÿßÿπÿ©.', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span>.', 'ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ <span class="highlight">~2 ŸÖ.ŸÉ</span>. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">10-12 ÿØŸÇŸäŸÇÿ©</span>.', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5-10 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß. ÿ®ÿßŸÑŸáŸÜÿß! üéâ' ], scienceNote: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿ≥ÿßÿ¶ŸÑÿ© ÿßŸÑŸÖÿ®ÿ±ÿØÿ© ÿ™ÿ∂ŸäŸÅ ŸÜŸÉŸáÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ®ÿØŸàŸÜ Ÿáÿ¥ÿßÿ¥ÿ© ÿßŸÑÿÆŸÅŸÇ. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÇŸàÿßŸÖ. ÿßŸÑÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± Ÿäÿ±ŸÅÿπ ŸÇŸÑŸäŸÑÿßŸã." },
                 thick: { name: "ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '50 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.5-2.75 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '310-330 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '3-4 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '30-40 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'starch', emoji: '‚≠ê', cups: '1-2 ŸÖ.ŸÉ ŸÜÿ¥ÿß', grams: '8-16 ÿ¨ÿ±ÿßŸÖ ŸÜÿ¥ÿß (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÑÿ∑ÿ±ÿßŸàÿ©)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '2+ ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '340+ ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÉÿ™ÿ±! ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ≠ŸÑŸäÿ® ŸÉŸàŸäÿ≥ÿ©!)</span>' }, ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤ ÿ£ÿ≥ÿßÿ≥Ÿä: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿàÿ®ÿ±ŸëÿØŸáÿß ŸÑŸÄ<span class="critical">ÿµŸÑÿ®ÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ©. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ®ÿå ŸÜÿ¥ÿßÿå ÿµŸàÿØÿßÿå ŸÖŸÑÿ≠).', '<span class="critical">ÿßÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä</span> ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿµŸÑÿ®ÿ© ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ ŸÉŸàŸäÿ≥ (3-5 ÿØŸÇÿßŸäŸÇ).', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÉÿ®ÿ±</span> ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑŸÉÿ®Ÿäÿ±ÿ©</span>.', '<span class="critical">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ÿ•ŸÑÿ≤ÿßŸÖŸä):</span> ÿ∫ÿ∑ŸäŸáÿß Ÿàÿ®ÿ±ŸëÿØŸáÿß <span class="critical">24 - 72 ÿ≥ÿßÿπÿ©</span>.', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span> (ŸÖŸÖŸÉŸÜ ÿ£ÿπŸÑŸâ ŸÅŸä ÿßŸÑÿ£ŸàŸÑ).', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="critical">ŸÉÿ®Ÿäÿ±ÿ© (3-4 ŸÖ.ŸÉ)</span> <span class="highlight">ŸàÿÆŸÑŸäŸáÿß ÿπÿßŸÑŸäÿ©</span>. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> (ÿßŸÑŸÇŸÑÿ® <span class="critical">ÿ∑ÿ±Ÿä</span>).', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© <span class="critical">10-15 ÿØŸÇŸäŸÇÿ©</span>ÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß. ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑÿ∑ÿ±ÿßŸàÿ©! üòç' ], scienceNote: "ÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿµŸÑÿ®ÿ© ŸäÿØÿÆŸÑ ŸáŸàÿßÿ° ŸÑŸÑÿ≥ŸÖŸÉ. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿßŸÑÿ∑ŸàŸäŸÑ ÿ∂ÿ±Ÿàÿ±Ÿä ŸÑŸÑÿ™ÿ±ÿ∑Ÿäÿ® ŸàŸÖŸÜÿπ ÿßŸÑŸÅÿ±ÿ¥. ÿØŸÇŸäŸÇ ÿ£ŸÉÿ´ÿ± + ŸÜÿ¥ÿß = ŸÖÿ∂ÿ∫ÿ© ŸàŸÜÿπŸàŸÖÿ©." },
                 thin: { name: "ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.25-2.5 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '280-300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '3-4 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '30-40 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß<span class="critical note">(ŸÑÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', cups: '1-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ®', grams: '15-30 ŸÖŸÑ ÿ≠ŸÑŸäÿ® (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÅÿ±ÿ¥ ÿ≤ŸäÿßÿØÿ©)' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ) (+ ÿµŸÅÿßÿ± ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÖŸäŸÜŸä ÿ£ÿ≠ÿ≥ŸÜ! ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ≠ŸÑŸäÿ®!)</span>' }, ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤ ÿ£ÿ≥ÿßÿ≥Ÿä: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿÆŸÑŸäŸáÿß <span class="critical">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ©. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ®ÿå <span class="highlight">ÿµŸàÿØÿß ŸÅŸÇÿ∑</span>ÿå ŸÖŸÑÿ≠).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿØÿßŸÅÿ¶ÿ©</span> ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ (ŸàÿµŸÅÿßÿ±/ÿ≠ŸÑŸäÿ® ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÇŸÑ</span> ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©.', '<span class="critical">ŸÑÿß ÿ™ÿ®ÿ±ŸëÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±ÿßŸã.', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">175¬∞ŸÖ</span>.', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="highlight">ÿµÿ∫Ÿäÿ±ÿ© (1.5-2 ŸÖ.ŸÉ)</span> <span class="critical">ÿ®ÿπŸäÿØ ÿπŸÜ ÿ®ÿπÿ∂!</span> ŸÖŸÖŸÉŸÜ ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß.', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> ÿ≠ÿ™Ÿâ ÿ™ÿ≠ŸÖÿ± Ÿàÿ™ÿ¨ŸÅ.', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß. Ÿáÿ™ŸÇÿ±ŸÖÿ¥ ŸàŸáŸä ÿ®ÿ™ÿ®ÿ±ÿØ! ‚ú®' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿØÿßŸÅÿ¶ÿ© + ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ± + ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ + ÿµŸàÿØÿß ŸÅŸÇÿ∑ + ŸÑÿß ÿ™ÿ®ÿ±ŸäÿØ = ŸÅÿ±ÿ¥ ÿ£ŸÇÿµŸâ! ÿ≠ÿ±ÿßÿ±ÿ© ÿ£ŸÇŸÑ ŸàŸàŸÇÿ™ ÿ£ÿ∑ŸàŸÑ = ŸÇÿ±ŸÖÿ¥ÿ©." }
            },
            tips: [ /* ... Arabic tips data ... */ { emoji: '‚öñÔ∏è', text: "<span class='highlight'>ŸÇŸäÿ≥ ÿßŸÑÿØŸÇŸäŸÇ ÿµÿ≠:</span> ÿ®ÿßŸÑŸÖÿπŸÑŸÇÿ© Ÿàÿ≥ŸàŸëŸäÿå ÿ£Ÿà ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸäÿ≤ÿßŸÜ (ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÖŸÑŸÉ!). ÿπÿ¥ÿßŸÜ ŸÖÿ™ÿ∑ŸÑÿπÿ¥ ŸÜÿßÿ¥ŸÅÿ©." }, { emoji: 'ü•ö', text: "<span class='highlight'>ŸÖŸÉŸàŸÜÿßÿ™ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©:</span> ÿßŸÑÿ®Ÿäÿ∂ ŸàÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®Ÿäÿ™ÿÆŸÑÿ∑Ÿàÿß ÿ£ÿ≠ÿ≥ŸÜ ŸÉÿ™Ÿäÿ±. ÿ≠ŸÑ ÿ≥ÿ±Ÿäÿπ: ÿ≠ŸÖÿßŸÖ ŸÖŸäÿ© ÿØÿßŸÅŸäÿ© ŸÑŸÑÿ®Ÿäÿ∂." }, { emoji: 'üßà', text: "<span class='highlight'>ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸÖŸáŸÖÿ© ŸÖŸàÿ™:</span> ÿ≥ÿßÿ¶ŸÑÿ© ŸÖÿ®ÿ±ÿØÿ©ÿå ÿµŸÑÿ®ÿ©ÿå ÿ£Ÿà ÿØÿßŸÅÿ¶ÿ© - ÿ®ÿ™ÿ≠ÿØÿØ ÿßŸÑŸÇŸàÿßŸÖ!" }, { emoji: 'ü•∂', text: "<span class='critical'>ÿßÿ≠ÿ™ÿ±ŸÖ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!:</span> ŸÑŸÑÿ≥ŸÖŸäŸÉÿ© ÿ®ÿßŸÑÿ∞ÿßÿ™ÿå ÿ•ÿ¨ÿ®ÿßÿ±Ÿä ŸàŸÖŸÅŸäÿ¥ ŸÜŸÇÿßÿ¥. ÿ®Ÿäÿ®ŸÜŸä ÿ∑ÿπŸÖ Ÿàÿ®ŸäŸÖŸÜÿπ ÿßŸÑÿ≥Ÿäÿ≠ÿßŸÜ. ÿßÿπŸÖŸÑŸá!" }, { emoji: 'üî•', text: "<span class='highlight'>ÿßÿπÿ±ŸÅ ŸÅÿ±ŸÜŸÉ ŸÉŸàŸäÿ≥:</span> ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿ®ÿ™ŸÉÿØÿ®! ÿ™ÿ±ŸÖŸàŸÖÿ™ÿ± ŸÅÿ±ŸÜ ÿ±ÿÆŸäÿµ. ŸÑŸÅ ÿßŸÑÿµŸàÿßŸÜŸä ŸÑŸà ŸÖÿ≠ÿ™ÿßÿ¨." }, { emoji: 'üç™', text: "<span class='highlight'>ŸÖÿ™ŸàŸÑÿπÿ¥ ŸÅŸä ÿßŸÑŸÉŸàŸÉŸäÿ≤!:</span> ÿ∑ŸÑÿπŸáÿß ŸàÿßŸÑÿ≠ÿ±ŸàŸÅ ŸÖÿ≥ÿ™ŸàŸäÿ© ŸàÿßŸÑŸÇŸÑÿ® ŸÑÿ≥ÿ© ÿ∑ÿ±Ÿä *ÿ¥ŸàŸäÿ©*. ÿ®ÿ™ŸÉŸÖŸÑ ÿ≥Ÿàÿß ÿ®ÿ±ÿ©." }, { emoji: 'üìÑ', text: "<span class='highlight'>Ÿàÿ±ŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿµÿØŸäŸÇŸÉ ÿßŸÑÿµÿØŸàŸÇ:</span> ŸÖŸÅŸäÿ¥ ŸÑÿ≤ŸÇÿå ÿ™ŸÜÿ∂ŸäŸÅ ÿ≥ŸáŸÑÿå ŸÑŸàŸÜ ŸÖŸàÿ≠ÿØ." }, { emoji: 'ü•Ñ', text: "<span class='critical'>ÿπÿØŸàŸÉ: ÿßŸÑÿÆŸÑÿ∑ ÿßŸÑÿ≤ŸäÿßÿØÿ© ŸÑŸÑÿØŸÇŸäŸÇ:</span> ÿ£ŸàŸÑ ŸÖÿß ÿßŸÑÿØŸÇŸäŸÇ ŸäÿÆÿ™ŸÅŸä ŸàŸÇŸëŸÅ. ÿÆŸÑÿ∑ ÿ≤ŸäÿßÿØÿ© = ŸÉŸàŸÉŸäÿ≤ ŸÜÿßÿ¥ŸÅÿ© Ÿàÿ≠ÿ≤ŸäŸÜÿ©." }, { emoji: '‚ú®', text: "<span class='highlight'>ÿßŸÑŸÅŸäŸÜÿ¥ ÿßŸÑÿ¥ŸäŸÉ: ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ:</span> ÿ±ÿ¥ÿ© ÿÆŸÅŸäŸÅÿ© *ŸÇÿ®ŸÑ* ÿßŸÑÿÆÿ®ÿ≤ ÿ®ÿ™ÿØŸä ÿ¥ŸÉŸÑ Ÿàÿ∑ÿπŸÖ ÿÆÿ∑Ÿäÿ±. ÿ¨ÿ±ÿ®!" }, { emoji: 'üç´', text: "<span class='highlight'>ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸáŸÖÿ©:</span> Ÿáÿßÿ™ ŸÜŸàÿπ ŸÜÿ∂ŸäŸÅ! ÿßÿÆŸÑÿ∑ ÿ£ŸÜŸàÿßÿπ (ÿ¥Ÿäÿ®ÿ≥ ŸàŸÖŸÇÿ∑ÿπÿ©) ÿπÿ¥ÿßŸÜ ÿßŸÑŸÇŸàÿßŸÖ. ŸáŸä ÿßŸÑÿ®ÿ∑ŸÑ!" }, { emoji: 'üí•', text: "<span class='highlight'>ÿßÿÆÿ™Ÿäÿßÿ±Ÿä: ÿÆÿ®ÿ∑ ÿßŸÑÿµŸäŸÜŸäÿ©:</span> ŸÑŸÑÿ≠ÿ±ŸàŸÅ ÿßŸÑŸÖŸÖŸàÿ¨ÿ© (ÿ≤Ÿä ÿßŸÑŸÖÿ≠ŸÑÿßÿ™)ÿå ÿßÿ±ŸÅÿπ ŸàÿßÿÆÿ®ÿ∑ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÅŸä ŸÜÿµ ÿßŸÑÿÆÿ®ÿ≤. ÿßÿ≥ÿ£ŸÑ ÿ¨Ÿàÿ¨ŸÑ!" }, { key: 'sci1', emoji: 'üî•', text: 'ÿπŸÑŸÖ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ©: ÿ™ŸÅÿßÿπŸÑ ŸÖŸäŸÑÿßÿ±ÿØ = ŸÜŸÉŸáÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™! ÿ™ÿ±ŸÇŸäÿ© ÿ¥ÿßŸÖŸÑÿ©.' }, { key: 'sci2', emoji: 'ü•õ', text: 'ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ: ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ŸÖŸäŸÑÿßÿ±ÿØ! ÿ∑ÿ±ÿßŸàÿ© ŸàÿπŸÖŸÇ ÿ≤ŸäÿßÿØÿ©. ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ÿ®ÿ≥ ÿ¨ÿßŸÖÿØ.' } ]
        }
    };

    // --- FUNCTIONS ---

    // Function to update all text elements based on language
    function updateLanguage(lang) {
        currentLang = lang;
        const texts = langData[lang];
        document.documentElement.lang = lang;
        body.dir = (lang === 'ar') ? 'rtl' : 'ltr';

        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.dataset.langKey;
            // Handle base key for dynamic titles
             if (key === 'keyDifferencesTitleBase' && texts[key]) {
                 // Set base text, name added separately in displayKeyDifferences
                 el.firstChild.nodeValue = texts[key] + " "; // Update text node before span
             } else if (texts[key]) {
                el.innerHTML = texts[key];
            }
        });

        document.title = texts.mainTitle || "Omar's Cookie Guide";
        langButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.lang === lang));

        if (selectedCookieType) {
            displayRecipe(selectedCookieType);
            displayKeyDifferences(selectedCookieType);
        } else {
            showPlaceholder();
        }
        displayTips();
    }

     // Function to create and return unit toggles element
     function createUnitTogglesElement() {
        if (!unitTogglesTemplate) return null;
        const toggleWrapper = document.createElement('div');
        toggleWrapper.className = 'unit-toggle-wrapper hidden'; // Start hidden
        const enToggleClone = unitTogglesTemplate.querySelector('.unit-selector[data-lang="en"]');
        const arToggleClone = unitTogglesTemplate.querySelector('.unit-selector[data-lang="ar"]');
        if (!enToggleClone || !arToggleClone) return null;

        toggleWrapper.appendChild(enToggleClone.cloneNode(true));
        toggleWrapper.appendChild(arToggleClone.cloneNode(true));
        toggleWrapper.querySelectorAll('.unit-btn').forEach(btn => btn.addEventListener('click', handleUnitChange));

        // Set initial display/active state
        updateUnitToggleVisibility(toggleWrapper); // Show correct language selector
        updateUnitButtonActiveStates(toggleWrapper); // Set correct active button

        requestAnimationFrame(() => { toggleWrapper.classList.remove('hidden'); }); // Fade in
        return toggleWrapper;
    }

    // Update visibility of language-specific toggles inside a wrapper
    function updateUnitToggleVisibility(wrapper = recipeDetailsContainer) {
        const enSelector = wrapper.querySelector('.unit-selector[data-lang="en"]');
        const arSelector = wrapper.querySelector('.unit-selector[data-lang="ar"]');
        if (enSelector) enSelector.style.display = (currentLang === 'en') ? 'inline-block' : 'none';
        if (arSelector) arSelector.style.display = (currentLang === 'ar') ? 'inline-block' : 'none';
    }

    // Update active state of unit buttons inside a wrapper
    function updateUnitButtonActiveStates(wrapper = recipeDetailsContainer) {
        const unitButtons = wrapper.querySelectorAll('.unit-toggle-wrapper .unit-btn');
        if (!unitButtons.length) return;
        unitButtons.forEach(btn => {
             const btnUnit = btn.dataset.unitType;
             const btnLang = btn.closest('.unit-selector').dataset.lang;
             let isActive = false;
             if (currentUnit === 'imperial') isActive = (btnLang === 'en' && btnUnit === 'imperial') || (btnLang === 'ar' && btnUnit === 'cups');
             else isActive = (btnLang === 'en' && btnUnit === 'metric') || (btnLang === 'ar' && btnUnit === 'grams');
             btn.classList.toggle('active', isActive);
        });
    }

    // Handle unit button clicks
    function handleUnitChange(event) {
        const button = event.target;
        const newUnitType = button.dataset.unitType;
        const buttonLang = button.closest('.unit-selector').dataset.lang;
        currentUnit = ((buttonLang === 'en' && newUnitType === 'imperial') || (buttonLang === 'ar' && newUnitType === 'cups')) ? 'imperial' : 'metric';
        const wrapper = button.closest('.unit-toggle-wrapper');
        if (wrapper) updateUnitButtonActiveStates(wrapper);
        if (selectedCookieType) { // Re-render only content
            const contentArea = recipeDetailsContainer.querySelector('.recipe-content-area');
            const newContentHtml = displayRecipeContent(selectedCookieType);
            if(contentArea) contentArea.innerHTML = newContentHtml;
        }
    }

    // Generate HTML for recipe content (ingredients, steps, notes)
    function displayRecipeContent(type) {
        const texts = langData[currentLang];
        const recipe = texts.recipes[type];
        const unitKey = (currentLang === 'ar') ? (currentUnit === 'imperial' ? 'cups' : 'grams') : currentUnit;
        if (!recipe) return '';

        let contentHtml = `<div class="recipe-content-area">`;
        contentHtml += `<h3 data-lang-key="recipeTitle${type}">${recipe.title}</h3>`;
        contentHtml += `<h4 class="list-header" data-lang-key="ingredientsTitle">${texts.ingredientsTitle}</h4><ul class="ingredient-list">`;
        recipe.ingredients.forEach(ing => {
            const measurement = ing[unitKey] || ing.metric || ing.imperial || ing.grams || ing.cups; // Prioritize selected, then fallback
            contentHtml += `<li data-emoji="${ing.emoji || 'üç™'}">${measurement || 'N/A'}</li>`;
        });
        contentHtml += '</ul>';

        if (texts.toastNutsTitle) { // Show for all types now as per draft logic
            contentHtml += `<div class="how-to-toast"><h4 data-lang-key="toastNutsTitle">${texts.toastNutsTitle}</h4><p data-lang-key="toastNutsDesc">${texts.toastNutsDesc}</p></div>`;
        }

        contentHtml += `<h4 class="list-header" data-lang-key="stepsTitle">${texts.stepsTitle}</h4><ol class="steps-list">`;
        recipe.steps.forEach(step => { contentHtml += `<li>${step}</li>`; });
        contentHtml += '</ol>';

        if (recipe.scienceNote) {
            contentHtml += `<div class="science-note"><h4><span class="emoji">üî¨</span> ${texts.scienceNoteTitle}</h4><p>${recipe.scienceNote}</p></div>`;
        }
        contentHtml += `</div>`;
        return contentHtml;
    }

    // Display the entire recipe section (toggles + content)
    function displayRecipe(type) {
        selectedCookieType = type;
        recipeDetailsContainer.innerHTML = ''; // Clear previous

        const toggleElement = createUnitTogglesElement(); // Create toggles
        if (toggleElement) recipeDetailsContainer.appendChild(toggleElement); // Add toggles first

        const recipeContentHtml = displayRecipeContent(type); // Create content
        recipeDetailsContainer.insertAdjacentHTML('beforeend', recipeContentHtml); // Add content after toggles

        recipeDetailsContainer.className = 'recipe-container'; // Reset theme
        recipeDetailsContainer.classList.add(langData[currentLang].recipes[type].theme); // Apply theme

        // Easter Egg & Fav Tag
        const showSpecialItems = (type === 'thick');
        easterEggContainer.classList.toggle('visible', showSpecialItems);
        easterEggContainer.classList.toggle('visually-hidden', !showSpecialItems);
        if(showSpecialItems) stuffedCookieImage.src = IMAGE_PATHS.stuffed;
        omarsFavText.classList.toggle('visible', showSpecialItems);
        omarsFavText.classList.toggle('visually-hidden', !showSpecialItems);
    }

    // Show placeholder and reset view
    function showPlaceholder() {
         selectedCookieType = null;
         recipeDetailsContainer.innerHTML = `<div class="placeholder" data-lang-key="placeholderSelect">${langData[currentLang].placeholderSelect}</div>`;
         recipeDetailsContainer.className = 'recipe-container'; // Reset theme
         keyDifferencesContainer.classList.remove('visible');
         keyDifferencesContainer.classList.add('visually-hidden');
         easterEggContainer.classList.add('visually-hidden');
         easterEggContainer.classList.remove('visible');
         omarsFavText.classList.add('visually-hidden');
         omarsFavText.classList.remove('visible');
         selectedCookieImage.src = IMAGE_PATHS.comparison;
         selectedCookieImage.alt = "Comparison of classic, thick, and thin cookies";
         cookieTypeButtons.forEach(btn => btn.classList.remove('active'));
    }

    // Display key differences
    function displayKeyDifferences(type) {
        const texts = langData[currentLang];
        const diffs = texts.diffs[type];
        const recipeName = texts.recipes[type].name;
        if (!diffs || !recipeName) {
            keyDifferencesContainer.classList.add('visually-hidden'); return;
        }

        // Update dynamic name in title
        if (keyDiffTitleElement) keyDiffTitleElement.textContent = recipeName;

         // Populate difference points
         const butterP = keyDifferencesContainer.querySelector('.diff-point.butter-diff p');
         const chillingP = keyDifferencesContainer.querySelector('.diff-point.chilling-diff p');
         const otherP = keyDifferencesContainer.querySelector('.diff-point.other-diff p');

         if(butterP) butterP.innerHTML = diffs.butterMethod || '';
         if(chillingP) chillingP.innerHTML = diffs.chillingMethod || '';
         if(otherP) otherP.innerHTML = diffs.otherNotes || '';


        keyDifferencesContainer.classList.add('visible');
        keyDifferencesContainer.classList.remove('visually-hidden');
    }

    // Populate tips
    function displayTips() {
        const texts = langData[currentLang];
        tipsList.innerHTML = '';
        texts.tips.forEach(tip => {
            const li = document.createElement('li');
            li.dataset.emoji = tip.emoji; li.innerHTML = tip.text;
            tipsList.appendChild(li);
        });
        const tipBoxTitle = document.querySelector('.tip-box h3[data-lang-key="tipsTitle"]');
        if (tipBoxTitle) tipBoxTitle.innerHTML = `<span class="emoji">üí°</span> ${texts.tipsTitle} <span class="emoji">üî¨</span>`;
    }

    // Handle cookie type button clicks
    function handleCookieTypeSelect(event) {
        const button = event.currentTarget;
        const type = button.dataset.type;
        cookieTypeButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        selectedCookieImage.src = IMAGE_PATHS[type];
        selectedCookieImage.alt = langData[currentLang].recipes[type].title || `${type} cookie`;
        displayKeyDifferences(type);
        displayRecipe(type);
    }

    // --- INITIALIZATION ---
    updateLanguage(DEFAULT_LANG); // Sets text, direction, calls showPlaceholder
    displayTips(); // Load tips
    langButtons.forEach(button => button.addEventListener('click', () => updateLanguage(button.dataset.lang)));
    cookieTypeButtons.forEach(button => button.addEventListener('click', handleCookieTypeSelect));
    body.classList.add('loaded'); // Fade in

}); // End DOMContentLoaded
