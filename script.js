document.addEventListener('DOMContentLoaded', () => {
    // --- CONFIGURATION ---
    const DEFAULT_LANG = 'en';
    const DEFAULT_UNIT = 'metric'; // Start with metric as default
    const STANDARD_BUTTER_GRAMS = 226; // Base butter amount for scaling calculations
    const BASE_YIELD_MIN = 18; // Base minimum yield for STANDARD_BUTTER_GRAMS
    const BASE_YIELD_MAX = 24; // Base maximum yield for STANDARD_BUTTER_GRAMS
    const IMAGE_CLASS_SELECTED = 'selected-type-image'; // CSS class for styled image

    // --- IMAGE PATHS (Relative to index.html) ---
    const IMAGE_PATHS = {
        classic: 'classic.webp',
        thick: 'thick_and_gooey.webp',
        thin: 'thin-and-crispy.webp',
        comparison: '3-cookie-types.jpg', // Initial/Placeholder image
        stuffed: 'stuffed_cookie.webp'
    };

    // --- DOM ELEMENTS ---
    const body = document.body;
    const langButtons = document.querySelectorAll('.lang-btn');
    const cookieTypeButtons = document.querySelectorAll('.selector-btn');
    const selectedCookieImage = document.getElementById('selected-cookie-image');
    const keyDifferencesContainer = document.getElementById('key-differences');
    const keyDifferencesPoints = keyDifferencesContainer.querySelector('.diff-points');
    const keyDiffTitleH3 = keyDifferencesContainer.querySelector('h3');
    const recipeDetailsContainer = document.getElementById('recipe-details');
    const unitTogglesTemplate = document.getElementById('unit-toggles-template'); // Only for cloning
    const easterEggContainer = document.getElementById('easter-egg-container');
    const stuffedCookieImage = document.getElementById('stuffed-cookie-image');
    const tipsList = document.getElementById('tips-list');
    const yieldInfoDisplay = document.getElementById('yield-info-display'); // Target for dynamic yield
    const recipeScalerSection = document.querySelector('.recipe-scaler'); // For flashing effect
    const contentPlaceholder = document.querySelector('.content-placeholder'); // Get placeholder
    const dynamicContentWrapper = document.querySelector('.dynamic-content-wrapper'); // Parent of dynamic sections

    // Scaler Elements
    const butterAmountInput = document.getElementById('butter-amount-input');
    const updateScaleBtn = document.getElementById('update-scale-btn');

    // Elements for scroll animation
    const scrollFadeElements = document.querySelectorAll('.fade-in-on-scroll');

    // --- STATE ---
    let currentLang = DEFAULT_LANG;
    let currentUnit = DEFAULT_UNIT;
    let selectedCookieType = null;
    let currentScaleFactor = 1; // Initialize scale factor to 1 (100%)

    // --- DATA STORE (LANGDATA) ---
    // Assuming the comprehensive langData object (from previous steps, including yieldInfoTemplate)
    // is defined here. It should contain all text, recipe details (metric/imperial), diffs, tips etc. for EN and AR.
    const langData = {
        en: {
            mainTitle: "üç™ Omar's Insanely Good Cookie Guide! üç™",
            unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            yieldInfoTemplate: "Whips up about {min}-{max} cookies üç™",
            chooseStyle: "Alright, Cookie Boss! Pick Your Poison (aka Style!):",
            typeClassic: "Classic Balanced", typeThick: "Thick & Gooey", typeThin: "Thin & Crispy",
            keyDifferencesTitleBase: "üîë Key Differences for", butterTitle: "Brown Butter State & Mixing", chillingTitle: "Chilling Method", otherNotesTitle: "Other Key Notes",
            placeholderSelect: "üëà Click a cookie style above to witness the magic! ‚ú®", ingredientsTitle: "ü•£ Ingredients (The Good Stuff)", stepsTitle: "üìù Steps (Let's Bake!)", scienceNoteTitle: "üî¨ The Science Bit! (Nerd Out!)",
            easterEggTitle: "üèÜ You Legend! Picked GOOEY! üèÜ", easterEggIntro: "Okay, you've got taste! Ready for the Level 2 Boss?", easterEggIdea: "üî• STUFFED COOKIES! üî•",
            easterEggDesc: "Dead easy: Make a dent in your THICK cookie dough ball, plop in ~1 tsp Nutella/Lotus/Pistachio cream, seal it up like a secret treasure, then bake as usual!",
            easterEggPistachioTip: "Seriously, TRUST the pistachio! It's a game-changer.", pistachioReco: "Best Spread IMHO:", pistachioLinkSource: "(Amazon EG link)",
            tipsTitle: "üí° Omar's Pro Tips! (Level Up Your Cookie Game)", finalTag: "Nailed it? Wanna show off? Tag me! @omarisavibe üòÑ",
            scalerTitle: "üßà Customize Your Batch Size!",
            scalerDesc: "Enter your starting butter amount (grams) to scale the metric recipe.",
            scalerLabel: "Starting Butter (g):",
            scalerButton: "Update Scale",
            scalerNote: "Note: Only metric (gram) values are scaled. Imperial (cup) units are approximate.",
             diffs: {
                 classic: { name: "Classic Balanced", butterMethod: "Use <span class='highlight'>COOLED but LIQUID</span> Brown Butter. Whisk with sugars (no heavy creaming needed).", chillingMethod: "<span class='highlight'>RECOMMENDED Chill:</span> 30 mins - 24 hrs. Improves flavor and texture.", otherNotes: "Standard flour amount (~300g). Includes baking powder for lift. Optional toasted nuts add amazing texture!" },
                 thick: { name: "Thick & Gooey", butterMethod: "Use <span class='critical'>CHILLED SOLID</span> Brown Butter. <span class='critical'>Cream</span> this with sugars until very light and fluffy (3-5 mins).", chillingMethod: "<span class='critical'>MANDATORY Long Chill:</span> 24 - 72 hrs. The SECRET to thickness & deep flavor!", otherNotes: "Use <span class='highlight'>MORE flour</span> (~310-330g). Baking powder + optional cornstarch for softness. Toasted nuts highly recommended!" },
                 thin: { name: "Thin & Crispy", butterMethod: "Use <span class='critical'>WARM LIQUID</span> Brown Butter. Whisk with sugars.", chillingMethod: "<span class='critical'>SKIP Chilling!</span> Bake immediately for maximum spread.", otherNotes: "Use <span class='highlight'>LESS flour</span> (~280-300g). <span class='critical'>OMIT baking powder.</span> More white sugar aids crispness." }
            },
            recipes: { /* RECIPES UNCHANGED */
                 classic: { title: "Classic Balanced Cookies", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">COOLED but LIQUID</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups brown sugar, packed', metric: '250g brown sugar, packed' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup granulated sugar', metric: '100g granulated sugar' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 cups all-purpose flour', metric: '300g all-purpose flour' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '~1.5-2 Tbsp toasted milk powder', metric: '15-20g toasted milk powder (Optional)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' }, { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt (or 3g table salt)' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '1.5 - 2 cups chocolate', metric: '255-340g chocolate <span class="note">(Omar recommends Dropsy MILK chocolate!)</span>' }, { key: 'nuts', emoji: 'ü•ú', imperial: '1/2 - 1 cup toasted nuts', metric: '50-100g toasted nuts (Optional - Pecans/Walnuts recommended!)' } ], steps: [ 'Prep: Brown the butter & let cool (liquid). Toast milk powder (if using). Whisk dry (flour, milk powder, leavening, salt). If using nuts, toast them (350¬∞F/175¬∞C, 5-8 min).', 'Whisk <span class="highlight">liquid brown butter</span> & sugars.', 'Beat in eggs (one by one), then vanilla.', 'Gradually mix dry ingredients until JUST combined. <span class="critical">No overmixing!</span>', 'Stir in chocolate chips/chunks <span class="highlight">and toasted nuts (if using).</span>', '<span class="highlight">Chill Dough (Recommended):</span> Cover & chill <span class="highlight">30 mins+</span> (up to 24 hrs).', 'Preheat oven <span class="highlight">375¬∞F (190¬∞C)</span>. Line sheets.', 'Scoop <span class="highlight">~2 Tbsp</span> balls. Add flaky salt (optional).', 'Bake <span class="highlight">10-12 min</span> (golden edges).', 'Cool on pan 5-10 min, then rack. Enjoy! üéâ' ], scienceNote: "Cooled liquid brown butter = flavor without creaming air. Chill helps texture. Baking powder lifts slightly. Milk powder & nuts add depth/chew." },
                 thick: { title: "Thick & Gooey Cookies", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">CHILLED SOLID (scoopable)</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/2 cups brown sugar, packed', metric: '300g brown sugar, packed (More brown!)' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/4 cup granulated sugar', metric: '50g granulated sugar (Less white!)' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 - 2 3/4 cups all-purpose flour', metric: '310-330g all-purpose flour (More flour!)' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '~1.5-2 Tbsp toasted milk powder', metric: '15-20g toasted milk powder (Optional)' }, { key: 'starch', emoji: '‚≠ê', imperial: '1-2 Tbsp cornstarch', metric: '8-16g cornstarch (Optional, for softness)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' }, { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '2+ cups chocolate', metric: '340g+ chocolate <span class="note">(Go generous! Omar recommends Dropsy MILK chocolate!)</span>' }, { key: 'nuts', emoji: 'ü•ú', imperial: '1/2 - 1 cup toasted nuts', metric: '50-100g toasted nuts (Highly Recommended - Pecans/Walnuts!)' } ], steps: [ 'Prep: Brown butter & <span class="critical">chill solid</span>. Toast milk powder (if using). Whisk dry (flour, milk powder, cornstarch, leavening, salt). If using nuts, toast them.', '<span class="critical">CREAM</span> chilled brown butter & sugars until very light/fluffy (3-5 min). Essential!', 'Beat in eggs (one by one), then vanilla.', 'Gradually mix in <span class="highlight">higher amount</span> of dry ingredients until JUST combined. <span class="critical">NO OVERMIXING!</span>', 'Stir in <span class="highlight">generous</span> chocolate <span class="highlight">and toasted nuts (if using).</span>', '<span class="critical">CHILL DOUGH (MANDATORY):</span> Cover & chill <span class="critical">24 - 72 hours</span>. The secret!', 'Preheat oven <span class="highlight">375¬∞F (190¬∞C)</span> (maybe start higher 400¬∞F/200¬∞C). Line sheets.', 'Scoop <span class="critical">LARGE (~3-4 Tbsp)</span> balls. Keep <span class="highlight">TALL!</span> Don\'t flatten. Add salt (optional).', 'Bake <span class="highlight">12-15 min</span>. Centers look <span class="critical">soft/slightly underdone</span>.', 'Cool on pan <span class="critical">10-15 min MINIMUM</span>, then rack. GOOEY prize! üòç' ], scienceNote: "Creaming SOLID chilled brown butter = air for thickness. LONG chill = hydration & flavor. More flour/cornstarch = soft chew. Nuts add contrast." },
                 thin: { title: "Thin & Crispy Cookies", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">WARM LIQUID</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups granulated sugar', metric: '250g granulated sugar (More white!)' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup brown sugar, packed', metric: '100g brown sugar, packed (Less brown!)' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/4 - 2 1/2 cups all-purpose flour', metric: '280-300g all-purpose flour (Less flour!)' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '~1.5-2 Tbsp toasted milk powder', metric: '15-20g toasted milk powder (Optional)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda <span class="critical note"> (NO baking powder!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', imperial: '1-2 Tbsp milk', metric: '15-30ml milk (Optional, for extra spread)' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp (+ Optional extra Yolk for chew)' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '1.5 cups chocolate', metric: '255g chocolate <span class="note">(Minis ok! Omar recommends Dropsy MILK chocolate!)</span>' }, ], steps: [ 'Prep: Brown butter & keep <span class="critical">warm liquid</span>. Toast milk powder (if using). Whisk dry (flour, milk powder, <span class="highlight">soda ONLY</span>, salt).', 'Whisk <span class="highlight">warm brown butter</span> & sugars (adjusted ratio).', 'Beat in eggs (and optional yolk/milk), then vanilla.', 'Gradually mix in <span class="highlight">lower amount</span> of dry ingredients until JUST combined. <span class="critical">NO OVERMIXING!</span>', 'Stir in chocolate chips/chunks.', '<span class="critical">DO NOT CHILL.</span> Bake immediately!', 'Preheat oven lower: <span class="highlight">350¬∞F (175¬∞C)</span>. Line sheets.', 'Scoop <span class="highlight">smaller (~1.5-2 Tbsp)</span> balls. Place <span class="critical">FAR APART!</span> Can flatten slightly.', 'Bake <span class="highlight">12-15 minutes</span> until golden brown & fully set.', 'Cool on pan 5 min, then rack. Crisps up fully when cool! ‚ú®' ], scienceNote: "Warm liquid butter + more white sugar + less flour + soda only + no chill = SUPER SPREAD! Lower/longer bake dries them out for SNAP." }
            },
            tips: [ /* TIPS UNCHANGED */ { emoji: '‚öñÔ∏è', text: "<span class='highlight'>Measure Flour Like a Pro:</span> Spoon & level, don't scoop! OR just use a scale (grams = KING). Avoids dry cookies." }, { emoji: 'ü•ö', text: "<span class='highlight'>Room Temp Ingredients Rule:</span> Eggs & butter mix way better when not fridge-cold. Quick fix: warm water bath for eggs!" }, { emoji: 'üßà', text: "<span class='highlight'>Brown Butter State is CRITICAL:</span> Cooled Liquid, Chilled Solid, or Warm Liquid - it dictates the texture! Pay attention!" }, { emoji: 'ü•∂', text: "<span class='critical'>Respect the Chill Time!:</span> Seriously, for thick/gooey it's non-negotiable. Builds flavour, prevents cookie puddles. DO IT." }, { emoji: 'üî•', text: "<span class='highlight'>Know Thy Oven:</span> They lie! An oven thermometer is cheap. Rotate pans if needed for even baking glory." }, { emoji: 'üç™', text: "<span class='highlight'>Don't Cremate Your Cookies:</span> Pull 'em out when edges are set/golden & centers look *slightly* underdone. Carryover cooking is real!" }, { emoji: 'üìÑ', text: "<span class='highlight'>Use Parchment Paper:</span> Prevents sticking, easy cleanup, promotes even browning. Your baking BFF." }, { emoji: 'ü•Ñ', text: "<span class='critical'>The Enemy: Overmixing Flour:</span> Mix JUST until flour disappears. More mixing = tough, sad cookies. Be gentle!" }, { emoji: '‚ú®', text: "<span class='highlight'>Fancy Finish: Flaky Sea Salt:</span> A tiny sprinkle *before* baking adds magic sparkle & flavor pop. Highly recommend!" }, { emoji: 'üç´', text: "<span class='highlight'>Chocolate Matters:</span> Use good stuff! Dropsy Milk is great! Mix types (chips & chopped bars) for texture variation." }, { emoji: 'ü•ú', text: "<span class='highlight'>Toasting Nuts = Flavor Boost:</span> Don't skip toasting nuts (if using Classic/Thick) - 350¬∞F/175¬∞C for 5-8 mins until fragrant. HUGE difference!" }, { key: 'sci1', emoji: 'üî•', text: 'Brown Butter Science: Maillard reaction = nutty flavor! Universal upgrade.' }, { key: 'sci2', emoji: 'ü•õ', text: 'Toasted Milk Powder: More Maillard! Extra chew/depth. Small amount makes a diff.' } ]
        },
        ar: {
            mainTitle: "üç™ ÿØŸÑŸäŸÑ ÿπŸÖÿ± ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿÆÿ±ÿßŸÅŸäÿ©! üç™", omarsFavText: "ŸÖŸÅÿ∂ŸÑÿßÿ™ ÿπŸÖÿ±!", unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            yieldInfoTemplate: "ÿ®ÿ™ÿπŸÖŸÑ ÿ≠ŸàÿßŸÑŸä {min}-{max} ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤ üç™", // Arabic yield template
            chooseStyle: "ÿ™ŸÖÿßŸÖ Ÿäÿß ŸÖÿπŸÑŸÖ ÿßŸÑŸÉŸàŸÉŸäÿ≤! ÿßÿÆÿ™ÿßÿ± ŸÖÿ≤ÿßÿ¨ŸÉ (ŸäÿπŸÜŸä ÿßŸÑÿ≥ÿ™ÿßŸäŸÑ!):", typeClassic: "ŸÉŸÑÿßÿ≥ŸäŸÉ ŸÖÿ™Ÿàÿßÿ≤ŸÜ", typeThick: "ÿ≥ŸÖŸäŸÉÿ© Ÿà ÿ∫ÿ±ŸÇÿßŸÜÿ©: ÿßŸÑÿ®Ÿäÿ¨ ÿ≥ŸàŸÅÿ™Ÿä!", typeThin: "ÿ±ŸÅŸäÿπÿ© ŸàŸÖŸÇÿ±ŸÖÿ¥ÿ©: ÿßŸÑŸÑŸä ÿ®ÿ™ÿ∑ŸÇ",
            keyDifferencesTitleBase: "üîë ÿßŸÑŸÅÿ±ŸàŸÇÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑŸÉŸàŸÉŸäÿ≤", butterTitle: "ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸàÿßŸÑÿÆŸÑÿ∑", chillingTitle: "ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ", otherNotesTitle: "ÿßŸÑÿÆŸÑÿßÿµÿ© (ÿßŸÑÿ∫ÿ¥ ŸäÿπŸÜŸä)",
            placeholderSelect: "üëà ÿØŸàÿ≥ ÿπŸÑŸâ ÿ≥ÿ™ÿßŸäŸÑ ŸÅŸàŸÇ ÿπÿ¥ÿßŸÜ ÿ™ÿ¥ŸàŸÅ ÿßŸÑÿ≠ÿ±ŸÉÿßÿ™! ‚ú®", ingredientsTitle: "ü•£ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ (Ÿäÿß ÿ™ŸÉÿßÿ™Ÿá Ÿäÿß ÿ≠ÿ±ŸÉÿßÿ™Ÿá!)", stepsTitle: "üìù ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ (ÿ®ÿßŸÑÿ™ŸÅÿµŸäŸÑ ÿßŸÑŸÖŸÖŸÑ)", scienceNoteTitle: "üî¨ ÿßŸÑÿ≠ÿ™ÿ© ÿßŸÑÿπŸÑŸÖŸäÿ© (ŸÑŸÑŸÅŸáŸÖÿßŸÜŸäŸÜ!)",
            easterEggTitle: "üèÜ Ÿäÿß ÿ£ÿ≥ÿ∑Ÿàÿ±ÿ©! ÿßÿÆÿ™ÿ±ÿ™ ÿßŸÑÿ∫ÿ±ŸÇÿßŸÜÿ©! üèÜ", easterEggIntro: "ÿ∞ŸàŸÇŸÉ ÿπÿßŸÑŸä ÿßŸÑÿµÿ±ÿßÿ≠ÿ©! ÿ¨ÿßŸáÿ≤ ŸÑŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸàÿ≠ÿ¥ÿü", easterEggIdea: "üî• ŸÉŸàŸÉŸäÿ≤ ŸÖÿ≠ÿ¥Ÿäÿ© Ÿäÿß Ÿàÿ≠ÿ¥! üî•", easterEggDesc: "ÿ≥ŸáŸÑÿ© ŸÖŸàÿ™: ÿßÿπŸÖŸÑ ÿ≠ŸÅÿ±ÿ© ŸÅŸä ŸÉŸàÿ±ÿ© ÿπÿ¨ŸäŸÜÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ©ÿå ÿßÿ≠ÿ¥ÿ± ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ© ŸÜŸàÿ™ŸäŸÑÿß/ŸÑŸàÿ™ÿ≥/ÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸàÿå ÿßŸÇŸÅŸÑŸáÿß ŸÉŸàŸäÿ≥ ŸÉÿ£ŸÜŸáÿß ÿ≥ÿ± ÿ≠ÿ±ÿ®Ÿäÿå ŸàÿßÿÆÿ®ÿ≤Ÿáÿß ÿπÿßÿØŸä!",
            easterEggPistachioTip: "ÿ®ÿ¨ÿØÿå ÿ¨ÿ±ÿ® ÿßŸÑÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸà ŸàŸÖÿ™ÿÆÿßŸÅÿ¥! ÿπÿßŸÑŸÖ ÿ™ÿßŸÜŸä ŸàÿßŸÑŸÑŸá.", pistachioReco: "ÿ£ÿ≠ÿ≥ŸÜ ŸÉÿ±ŸäŸÖÿ© ÿ®ÿµÿ±ÿßÿ≠ÿ©:", pistachioLinkSource: "(ŸÑŸäŸÜŸÉ ÿ£ŸÖÿßÿ≤ŸàŸÜ ŸÖÿµÿ±)",
            tipsTitle: "üí° ŸÜÿµÿßÿ¶ÿ≠ ÿπŸÖÿ± ŸÑŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ! (ÿßÿ±ÿ™ŸÇŸê ÿ®ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÉŸàŸÉŸäÿ≤)", finalTag: "ÿ∏ÿ®ÿ∑ÿ™Ÿáÿßÿü ÿπÿßŸäÿ≤ ÿ™ÿ™ŸÖŸÜÿ∏ÿ±ÿü ÿßÿπŸÖŸÑŸä ÿ™ÿßÿ¨! @omarisavibe üòÑ",
            scalerTitle: "üßà ÿπÿØŸëŸÑ ÿ≠ÿ¨ŸÖ ÿØŸÅÿπÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤!",
            scalerDesc: "ÿ£ÿØÿÆŸÑ ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ£ŸàŸÑŸäÿ© (ÿ®ÿßŸÑÿ¨ÿ±ÿßŸÖ) ŸÑÿ∂ÿ®ÿ∑ ŸÖŸÇÿßÿØŸäÿ± ÿßŸÑŸàÿµŸÅÿ© (ÿßŸÑŸÖÿ™ÿ±Ÿäÿ©).",
            scalerLabel: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ®ÿØÿ¶Ÿäÿ© (ÿ¨ŸÖ):",
            scalerButton: "ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÇÿßÿØŸäÿ±",
            scalerNote: "ŸÖŸÑÿ≠Ÿàÿ∏ÿ©: Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ŸÇŸäŸÖ ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÅŸÇÿ∑. Ÿàÿ≠ÿØÿßÿ™ ÿßŸÑŸÉŸàÿ® ÿ™ŸÇÿ±Ÿäÿ®Ÿäÿ©.",
             diffs: { /* Arabic Diffs (unchanged) */ classic: { name: "ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='highlight'>ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± (ÿ®ÿØŸàŸÜ ÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä).", chillingMethod: "<span class='highlight'>ÿ™ÿ®ÿ±ŸäÿØ ŸäŸèŸàÿµŸâ ÿ®Ÿá:</span> 30 ÿØŸÇŸäŸÇÿ© - 24 ÿ≥ÿßÿπÿ©. Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÜŸÉŸáÿ© ŸàÿßŸÑŸÇŸàÿßŸÖ.", otherNotes: "ŸÉŸÖŸäÿ© ÿØŸÇŸäŸÇ ÿπÿßÿØŸäÿ© (~300 ÿ¨ŸÖ). ŸÅŸäŸáÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±. ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ© ÿ®ÿ™ÿ∂ŸäŸÅ ŸÇŸàÿßŸÖ ÿ™ÿ≠ŸÅÿ©!" }, thick: { name: "ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>. <span class='critical'>ÿßÿÆŸÅŸÇŸáÿß ŸÉÿ±ŸäŸÖŸä</span> ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± ÿ≠ÿ™Ÿâ Ÿáÿ¥ÿ© ÿ¨ÿØŸãÿß (3-5 ÿØŸÇÿßÿ¶ŸÇ).", chillingMethod: "<span class='critical'>ÿ™ÿ®ÿ±ŸäÿØ ÿ•ŸÑÿ≤ÿßŸÖŸä ÿ∑ŸàŸäŸÑ:</span> 24 - 72 ÿ≥ÿßÿπÿ©. <span class='critical'>ÿßŸÑÿ≥ÿ±</span> ŸÑŸÑÿ≥ŸÖŸÉ ŸàÿßŸÑŸÜŸÉŸáÿ©!", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÉÿ´ÿ±</span> (~310-330 ÿ¨ŸÖ). ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± + ŸÜÿ¥ÿß ÿßÿÆÿ™Ÿäÿßÿ±Ÿä. ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ŸÖŸáŸÖÿ© ŸáŸÜÿß!" }, thin: { name: "ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ÿØÿßŸÅÿ¶ÿ© Ÿàÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ±.", chillingMethod: "<span class='critical'>ÿ™ÿÆÿ∑Ÿé ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±Ÿãÿß.", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ</span> (~280-300 ÿ¨ŸÖ). <span class='critical'>ÿ®ÿØŸàŸÜ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±.</span> ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ´ÿ± ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©." } },
             recipes: { /* Arabic Recipes (unchanged) */
                 classic: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂' }, { key: 'flour', emoji: 'üåæ', cups: '2 1/2 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ∫ÿ±ÿßÿ∂' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '~1.5-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '15-20 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ (ÿ£Ÿà 3ÿ¨ ŸÜÿßÿπŸÖ)' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 - 2 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255-340 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ÿπŸÖÿ± ÿ®ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ®!)</span>' }, { key: 'nuts', emoji: 'ü•ú', cups: '1/2 - 1 ŸÉŸàÿ® ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ©', grams: '50-100 ÿ¨ÿ±ÿßŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä - ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤ ÿ™ÿ≠ŸÅÿ©!)' } ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿàÿ®ÿ±ŸëÿØŸáÿß (ÿ≥ÿßÿ¶ŸÑÿ©). ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ© (ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ). ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ©ÿå ŸÖŸàÿßÿØ ÿ±ÿßŸÅÿπÿ©ÿå ŸÖŸÑÿ≠). ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ÿå ÿ≠ŸÖŸëÿµŸáÿß (175¬∞ŸÖÿå 5-8 ÿØ).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ≥ÿßÿ¶ŸÑÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ¨ÿßŸÅ ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="highlight">ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© (ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ).</span>', '<span class="highlight">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ŸÖŸÅÿ∂ŸÑ):</span> ÿ∫ÿ∑Ÿä Ÿàÿ®ÿ±ŸëÿØ <span class="highlight">30 ÿØŸÇŸäŸÇÿ©+</span> (ŸÑŸÄ 24 ÿ≥ÿßÿπÿ©).', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span>. ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ <span class="highlight">~2 ŸÖ.ŸÉ</span>. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">10-12 ÿØŸÇŸäŸÇÿ©</span> (ÿßŸÑÿ≠ÿ±ŸàŸÅ ÿØŸáÿ®Ÿäÿ©).', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5-10 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. ÿ®ÿßŸÑŸáŸÜÿß! üéâ' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿ≥ÿßÿ¶ŸÑÿ© = ÿ∑ÿπŸÖ ÿ®ÿØŸàŸÜ ÿÆŸÅŸÇ. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÇŸàÿßŸÖ. ÿ®ŸàÿØÿ± Ÿäÿ±ŸÅÿπ ÿ¥ŸàŸäÿ©. ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸàŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÑŸÑÿπŸÖŸÇ/ÿßŸÑŸÖÿ∂ÿ∫ÿ©." },
                 thick: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '50 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.5-2.75 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '310-330 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '~1.5-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '15-20 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'starch', emoji: '‚≠ê', cups: '1-2 ŸÖ.ŸÉ ŸÜÿ¥ÿß', grams: '8-16 ÿ¨ÿ±ÿßŸÖ ŸÜÿ¥ÿß (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÑÿ∑ÿ±ÿßŸàÿ©)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '2+ ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '340+ ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÉÿ™ÿ±! ÿπŸÖÿ± ÿ®ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ®!)</span>' }, { key: 'nuts', emoji: 'ü•ú', cups: '1/2 - 1 ŸÉŸàÿ® ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ©', grams: '50-100 ÿ¨ÿ±ÿßŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© (ŸÖŸèŸàÿµŸâ ÿ®Ÿáÿß ÿ®ÿ¥ÿØÿ© - ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤!)' } ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿà<span class="critical">ÿ®ÿ±ŸëÿØŸáÿß ÿµŸÑÿ®ÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ©. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ©ÿå ŸÜÿ¥ÿßÿå ŸÖŸàÿßÿØ ÿ±ÿßŸÅÿπÿ©ÿå ŸÖŸÑÿ≠). ÿ≠ŸÖŸëÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™.', '<span class="critical">ÿßÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä</span> ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿµŸÑÿ®ÿ© ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ ŸÉŸàŸäÿ≥ (3-5 ÿØŸÇÿßŸäŸÇ). ÿ∂ÿ±Ÿàÿ±Ÿä!', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÉÿ®ÿ±</span> ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑŸÉÿ®Ÿäÿ±ÿ©</span> <span class="highlight">ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© (ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ).</span>', '<span class="critical">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ÿ•ŸÑÿ≤ÿßŸÖŸä):</span> ÿ∫ÿ∑ŸäŸáÿß Ÿàÿ®ÿ±ŸëÿØŸáÿß <span class="critical">24 - 72 ÿ≥ÿßÿπÿ©</span>. ÿØŸá ÿßŸÑÿ≥ÿ±!', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span> (ŸÖŸÖŸÉŸÜ ÿ£ÿπŸÑŸâ ŸÅŸä ÿßŸÑÿ£ŸàŸÑ). ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="critical">ŸÉÿ®Ÿäÿ±ÿ© (3-4 ŸÖ.ŸÉ)</span> <span class="highlight">ŸàÿÆŸÑŸäŸáÿß ÿπÿßŸÑŸäÿ©!</span> ŸÑÿß ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> (ÿßŸÑŸÇŸÑÿ® <span class="critical">ÿ∑ÿ±Ÿä</span>).', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© <span class="critical">10-15 ÿØŸÇŸäŸÇÿ© ÿπ ÿßŸÑÿ£ŸÇŸÑ</span>ÿå ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. Ÿàÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑÿ∑ÿ±ÿßŸàÿ©! üòç' ], scienceNote: "ÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿµŸÑÿ®ÿ© = ŸáŸàÿßÿ° ŸÑŸÑÿ≥ŸÖŸÉ. ÿ™ÿ®ÿ±ŸäÿØ ÿ∑ŸàŸäŸÑ = ÿ™ÿ±ÿ∑Ÿäÿ® ŸàŸÜŸÉŸáÿ©. ÿØŸÇŸäŸÇ/ŸÜÿ¥ÿß ÿ£ŸÉÿ™ÿ± = ŸÖÿ∂ÿ∫ÿ©/ŸÜÿπŸàŸÖÿ©. ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ®ÿ™ÿØŸä ÿ™ÿ®ÿßŸäŸÜ." },
                 thin: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.25-2.5 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '280-300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '~1.5-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '15-20 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß<span class="critical note">(ŸÑÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', cups: '1-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ®', grams: '15-30 ŸÖŸÑ ÿ≠ŸÑŸäÿ® (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÅÿ±ÿ¥ ÿ≤ŸäÿßÿØÿ©)' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ) (+ ÿµŸÅÿßÿ± ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÖŸäŸÜŸä ŸÖŸÖŸÉŸÜ! ÿπŸÖÿ± ÿ®ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ®!)</span>' }, ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿÆŸÑŸäŸáÿß <span class="critical">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ©. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ®ÿå <span class="highlight">ÿµŸàÿØÿß ŸÅŸÇÿ∑</span>ÿå ŸÖŸÑÿ≠).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿØÿßŸÅÿ¶ÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ (ŸàÿµŸÅÿßÿ±/ÿ≠ŸÑŸäÿ® ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÇŸÑ</span> ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©.', '<span class="critical">ŸÑÿß ÿ™ÿ®ÿ±ŸëÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±ÿßŸã.', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">175¬∞ŸÖ</span>. ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="highlight">ÿµÿ∫Ÿäÿ±ÿ© (1.5-2 ŸÖ.ŸÉ)</span> <span class="critical">ÿ®ÿπŸäÿØ ÿπŸÜ ÿ®ÿπÿ∂!</span> ŸÖŸÖŸÉŸÜ ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß.', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> ÿ≠ÿ™Ÿâ ÿ™ÿ≠ŸÖÿ± Ÿàÿ™ÿ¨ŸÅ.', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß. Ÿáÿ™ŸÇÿ±ŸÖÿ¥ ŸÑŸÖÿß ÿ™ÿ®ÿ±ÿØ! ‚ú®' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿØÿßŸÅÿ¶ÿ© + ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ± + ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ + ÿµŸàÿØÿß ŸÅŸÇÿ∑ + ŸÑÿß ÿ™ÿ®ÿ±ŸäÿØ = ŸÅÿ±ÿ¥ ÿ£ŸÇÿµŸâ! ÿ≠ÿ±ÿßÿ±ÿ© ÿ£ŸÇŸÑ/ŸàŸÇÿ™ ÿ£ÿ∑ŸàŸÑ = ŸÇÿ±ŸÖÿ¥ÿ©." }
             },
            tips: [ /* TIPS UNCHANGED */ { emoji: '‚öñÔ∏è', text: "<span class='highlight'>ŸÇŸäÿ≥ ÿßŸÑÿØŸÇŸäŸÇ ÿµÿ≠:</span> ÿ®ÿßŸÑŸÖÿπŸÑŸÇÿ© Ÿàÿ≥ŸàŸëŸäÿå ÿ£Ÿà ŸÖŸäÿ≤ÿßŸÜ (ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÖŸÑŸÉ!). ÿπÿ¥ÿßŸÜ ŸÖÿ™ÿ∑ŸÑÿπÿ¥ ŸÜÿßÿ¥ŸÅÿ©." }, { emoji: 'ü•ö', text: "<span class='highlight'>ŸÖŸÉŸàŸÜÿßÿ™ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©:</span> ÿßŸÑÿ®Ÿäÿ∂ ŸàÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®Ÿäÿ™ÿÆŸÑÿ∑Ÿàÿß ÿ£ÿ≠ÿ≥ŸÜ. ÿ≠ŸÑ ÿ≥ÿ±Ÿäÿπ: ÿ≠ŸÖÿßŸÖ ŸÖŸäÿ© ÿØÿßŸÅŸäÿ© ŸÑŸÑÿ®Ÿäÿ∂." }, { emoji: 'üßà', text: "<span class='highlight'>ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸÖŸáŸÖÿ© ŸÖŸàÿ™:</span> ÿ≥ÿßÿ¶ŸÑÿ© ŸÖÿ®ÿ±ÿØÿ©ÿå ÿµŸÑÿ®ÿ©ÿå ÿ£Ÿà ÿØÿßŸÅÿ¶ÿ© - ÿ®ÿ™ÿ≠ÿØÿØ ÿßŸÑŸÇŸàÿßŸÖ!" }, { emoji: 'ü•∂', text: "<span class='critical'>ÿßÿ≠ÿ™ÿ±ŸÖ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!:</span> ŸÑŸÑÿ≥ŸÖŸäŸÉÿ© ÿ®ÿßŸÑÿ∞ÿßÿ™ÿå ÿ•ÿ¨ÿ®ÿßÿ±Ÿä. ÿ®Ÿäÿ®ŸÜŸä ÿ∑ÿπŸÖ Ÿàÿ®ŸäŸÖŸÜÿπ ÿßŸÑÿ≥Ÿäÿ≠ÿßŸÜ. ÿßÿπŸÖŸÑŸá!" }, { emoji: 'üî•', text: "<span class='highlight'>ÿßÿπÿ±ŸÅ ŸÅÿ±ŸÜŸÉ ŸÉŸàŸäÿ≥:</span> ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿ®ÿ™ŸÉÿØÿ®! ÿ™ÿ±ŸÖŸàŸÖÿ™ÿ± ŸÅÿ±ŸÜ ÿ±ÿÆŸäÿµ. ŸÑŸÅ ÿßŸÑÿµŸàÿßŸÜŸä." }, { emoji: 'üç™', text: "<span class='highlight'>ŸÖÿ™ŸàŸÑÿπÿ¥ ŸÅŸäŸáÿß!:</span> ÿ∑ŸÑÿπŸáÿß ŸàÿßŸÑÿ≠ÿ±ŸàŸÅ ŸÖÿ≥ÿ™ŸàŸäÿ© ŸàÿßŸÑŸÇŸÑÿ® ÿ∑ÿ±Ÿä *ÿ¥ŸàŸäÿ©*. ÿ®ÿ™ŸÉŸÖŸÑ ÿ≥Ÿàÿß ÿ®ÿ±ÿ©." }, { emoji: 'üìÑ', text: "<span class='highlight'>Ÿàÿ±ŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖŸáŸÖ:</span> ŸÖŸÅŸäÿ¥ ŸÑÿ≤ŸÇÿå ÿ™ŸÜÿ∂ŸäŸÅ ÿ≥ŸáŸÑÿå ŸÑŸàŸÜ ŸÖŸàÿ≠ÿØ." }, { emoji: 'ü•Ñ', text: "<span class='critical'>ÿπÿØŸàŸÉ: ÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ≤ŸäÿßÿØÿ©:</span> ÿ£ŸàŸÑ ŸÖÿß ÿßŸÑÿØŸÇŸäŸÇ ŸäÿÆÿ™ŸÅŸä ŸàŸÇŸëŸÅ. ÿÆŸÑÿ∑ ÿ≤ŸäÿßÿØÿ© = ŸÉŸàŸÉŸäÿ≤ ŸÜÿßÿ¥ŸÅÿ©." }, { emoji: '‚ú®', text: "<span class='highlight'>ÿßŸÑŸÅŸäŸÜÿ¥ ÿßŸÑÿ¥ŸäŸÉ: ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ:</span> ÿ±ÿ¥ÿ© ÿÆŸÅŸäŸÅÿ© *ŸÇÿ®ŸÑ* ÿßŸÑÿÆÿ®ÿ≤ ÿ®ÿ™ÿØŸä ÿ¥ŸÉŸÑ Ÿàÿ∑ÿπŸÖ ÿÆÿ∑Ÿäÿ±. ÿ¨ÿ±ÿ®!" }, { emoji: 'üç´', text: "<span class='highlight'>ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸáŸÖÿ©:</span> Ÿáÿßÿ™ ŸÜŸàÿπ ŸÜÿ∂ŸäŸÅ! ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ® ÿ≠ŸÑŸàÿ©! ÿßÿÆŸÑÿ∑ ÿ£ŸÜŸàÿßÿπ." }, { emoji: 'ü•ú', text: "<span class='highlight'>ÿ™ÿ≠ŸÖŸäÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ®ŸäŸÅÿ±ŸÇ:</span> ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ (ŸÉŸÑÿßÿ≥ŸäŸÉ/ÿ≥ŸÖŸäŸÉÿ©) ÿ≠ŸÖŸëÿµŸáÿß (175¬∞ŸÖÿå 5-8 ÿØ) ŸÑÿ≠ÿØ ŸÖÿß ÿßŸÑÿ±Ÿäÿ≠ÿ© ÿ™ÿ∑ŸÑÿπ. ŸÅÿ±ŸÇ ÿßŸÑÿ≥ŸÖÿß ŸàÿßŸÑÿ£ÿ±ÿ∂!" }, { key: 'sci1', emoji: 'üî•', text: 'ÿπŸÑŸÖ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ©: ÿ™ŸÅÿßÿπŸÑ ŸÖŸäŸÑÿßÿ±ÿØ = ŸÜŸÉŸáÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™!' }, { key: 'sci2', emoji: 'ü•õ', text: 'ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ: ŸÖÿ≤ŸäÿØ ŸÖŸÜ ŸÖŸäŸÑÿßÿ±ÿØ! ÿ∑ÿ±ÿßŸàÿ© ŸàÿπŸÖŸÇ. ÿ¥ŸàŸäÿ© ÿ®ŸäŸÅÿ±ŸÇŸàÿß.' } ]
        }
    };

    // --- FUNCTIONS ---

    function updateYieldInfo() {
        if (!yieldInfoDisplay) return;
        const texts = langData[currentLang];
        const template = texts.yieldInfoTemplate; // Use the template key
        if (!template) return;

        const scaledMinYield = Math.max(1, Math.round(BASE_YIELD_MIN * currentScaleFactor));
        const scaledMaxYield = Math.max(scaledMinYield, Math.round(BASE_YIELD_MAX * currentScaleFactor));

        const yieldText = template
            .replace('{min}', scaledMinYield)
            .replace('{max}', scaledMaxYield);

        yieldInfoDisplay.innerHTML = yieldText;
    }

    function updateLanguage(lang) {
        currentLang = lang;
        const texts = langData[lang];
        document.documentElement.lang = lang;
        body.dir = (lang === 'ar') ? 'rtl' : 'ltr';

        // Update all static text elements
        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.dataset.langKey;
            if (key === 'keyDifferencesTitleBase' || key === 'yieldInfo') { /* handled elsewhere */ }
            else if (texts[key]) { el.innerHTML = texts[key]; }
        });

        // Update page title
        document.title = texts.mainTitle || "Omar's Cookie Guide";
        // Update active language button
        langButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.lang === lang));

        // Update dynamic sections based on new language
        updateYieldInfo(); // Refresh yield text
        if (selectedCookieType) {
            displayKeyDifferences(selectedCookieType); // Refresh diffs text
            displayRecipe(selectedCookieType); // Refresh recipe text/units
        } else {
            showPlaceholder(); // Update placeholder text
        }
        displayTips(); // Refresh tips text
    }

    function handleScaleUpdate() {
        const newButterAmount = parseFloat(butterAmountInput.value);
        let updateSuccessful = false;

        if (!isNaN(newButterAmount) && newButterAmount >= 50) { // Ensure minimum 50g
            currentScaleFactor = newButterAmount / STANDARD_BUTTER_GRAMS;
            // Optionally round input value for display
            butterAmountInput.value = Math.round(newButterAmount);
            updateSuccessful = true;
            console.log(`Recipe scale factor updated to: ${currentScaleFactor}`);
        } else {
            // Reset on invalid input or less than 50
            currentScaleFactor = 1;
            butterAmountInput.value = STANDARD_BUTTER_GRAMS;
            alert(currentLang === 'ar' ? "ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ© (ÿ£ŸÇŸÑ ÿ≠ÿØ 50 ÿ¨ÿ±ÿßŸÖ). ÿ®ÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿ±ŸÇŸÖ ÿµÿ≠Ÿäÿ≠ ŸÖŸàÿ¨ÿ®. ÿ™ÿ™ŸÖ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ∂ÿ®ÿ∑ ÿ•ŸÑŸâ ÿßŸÑŸÖŸÇŸäÿßÿ≥ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä." : "Invalid butter amount (min 50g). Please enter a positive number. Resetting to default scale.");
        }

        // Update yield and recipe if type is selected
        updateYieldInfo();
        if (selectedCookieType) {
            // Regenerate ingredients only if metric view is active, or full recipe if needed
            const ingredientList = recipeDetailsContainer.querySelector('.ingredient-list');
             if (ingredientList && currentUnit === 'metric') {
                 ingredientList.innerHTML = generateIngredientsHTML(selectedCookieType);
             } else if (ingredientList && currentUnit === 'imperial') {
                 // Optional: Refresh imperial view too, although it doesn't scale
                  ingredientList.innerHTML = generateIngredientsHTML(selectedCookieType);
             }
        }

        // Flash background feedback
        if (updateSuccessful && recipeScalerSection) {
            recipeScalerSection.classList.add('updated');
            setTimeout(() => { recipeScalerSection.classList.remove('updated'); }, 400); // Corresponds to --anim-medium
        }
    }

    // --- Unit Toggle Functions ---
    function createUnitTogglesHTML() {
        if (!unitTogglesTemplate) return '';
        const wrapper = document.createElement('div');
        wrapper.className = 'unit-toggle-wrapper'; // Visible by default now
        const enToggle = unitTogglesTemplate.querySelector('.unit-selector[data-lang="en"]')?.cloneNode(true);
        const arToggle = unitTogglesTemplate.querySelector('.unit-selector[data-lang="ar"]')?.cloneNode(true);
        if (enToggle) wrapper.appendChild(enToggle);
        if (arToggle) wrapper.appendChild(arToggle);
        return wrapper.outerHTML; // Return HTML string
    }

    function updateUnitToggleVisibility(container) {
        const enSelector = container.querySelector('.unit-selector[data-lang="en"]');
        const arSelector = container.querySelector('.unit-selector[data-lang="ar"]');
        if (enSelector) enSelector.style.display = (currentLang === 'en') ? 'inline-block' : 'none';
        if (arSelector) arSelector.style.display = (currentLang === 'ar') ? 'inline-block' : 'none';
    }

    function updateUnitButtonActiveStates(container) {
        const unitButtons = container.querySelectorAll('.unit-btn');
        unitButtons.forEach(btn => {
             const btnUnit = btn.dataset.unitType;
             const btnLang = btn.closest('.unit-selector')?.dataset.lang;
             if (!btnLang) return;
             let isActive = false;
             if (currentUnit === 'imperial') isActive = (btnLang === 'en' && btnUnit === 'imperial') || (btnLang === 'ar' && btnUnit === 'cups');
             else isActive = (btnLang === 'en' && btnUnit === 'metric') || (btnLang === 'ar' && btnUnit === 'grams');
             btn.classList.toggle('active', isActive);
        });
    }

    function handleUnitChangeDelegation(event) {
        const button = event.target.closest('.unit-btn');
        if (!button || !event.currentTarget.contains(button)) return;

        const newUnitType = button.dataset.unitType;
        const buttonLang = button.closest('.unit-selector')?.dataset.lang;
        if (!buttonLang) return;

        const oldUnit = currentUnit;
        currentUnit = ((buttonLang === 'en' && newUnitType === 'imperial') || (buttonLang === 'ar' && newUnitType === 'cups')) ? 'imperial' : 'metric';

        // Only update ingredients if the unit actually changed
        if (oldUnit !== currentUnit && selectedCookieType) {
             const toggleWrapper = recipeDetailsContainer.querySelector('.unit-toggle-wrapper');
             if (toggleWrapper) updateUnitButtonActiveStates(toggleWrapper);

            const ingredientList = recipeDetailsContainer.querySelector('.ingredient-list');
            if (ingredientList) {
                ingredientList.innerHTML = generateIngredientsHTML(selectedCookieType);
            }
        } else if (oldUnit === currentUnit) { // If same unit clicked, just ensure active state is correct
             const toggleWrapper = recipeDetailsContainer.querySelector('.unit-toggle-wrapper');
             if (toggleWrapper) updateUnitButtonActiveStates(toggleWrapper);
        }
    }

    // --- generateIngredientsHTML (Refined Scaling Logic) ---
    function generateIngredientsHTML(type) {
        const texts = langData[currentLang];
        const recipe = texts.recipes[type];
        if (!recipe?.ingredients) return '';

        const unitSystemKeyForMetric = (currentLang === 'ar') ? 'grams' : 'metric';
        const unitKey = (currentUnit === 'imperial')
                          ? (currentLang === 'ar' ? 'cups' : 'imperial')
                          : unitSystemKeyForMetric;

        let ingredientsHtml = '';
        recipe.ingredients.forEach(ing => {
            let measurement = ing[unitKey] || ing.metric || ing.imperial || ing.grams || ing.cups || 'N/A';

            if (unitKey === unitSystemKeyForMetric && currentScaleFactor !== 1) {
                const gramMarker = (currentLang === 'ar') ? 'ÿ¨ÿ±ÿßŸÖ' : 'g';
                // Simple function to round scaled values nicely
                const roundScaled = (val) => Math.round(val * currentScaleFactor);

                // Prioritize scaling the butter amount based on STANDARD_BUTTER_GRAMS
                if (ing.key === 'butter') {
                    const scaledButter = roundScaled(STANDARD_BUTTER_GRAMS);
                    const butterRegex = new RegExp(`(${STANDARD_BUTTER_GRAMS})\\s*(${gramMarker})`, 'i');
                    if (butterRegex.test(measurement)) {
                        measurement = measurement.replace(butterRegex, `${scaledButter}$2`);
                    } else { // Fallback: Replace first number found before marker
                        const firstNumRegex = new RegExp(`(\\d+(\\.\\d+)?)(.*?)(${gramMarker})`, 'i');
                        measurement = measurement.replace(firstNumRegex, `${scaledButter}$3$4`);
                    }
                } else {
                    // Try scaling ranges first (e.g., "15-20g")
                    const rangeRegex = new RegExp(`(\\d+)\\s*-\\s*(\\d+)\\s*(${gramMarker})`, 'i');
                    measurement = measurement.replace(rangeRegex, (match, min, max, marker) => {
                        return `${roundScaled(parseFloat(min))}-${roundScaled(parseFloat(max))}${marker}`;
                    });

                    // Then try scaling single numbers (e.g., "250g", "~100g")
                    // Use lookbehind/ahead if possible, otherwise capture surrounding text
                    const singleNumRegex = new RegExp(`(\\D|^)(\\d+(\\.\\d+)?)(\\s*${gramMarker})`, 'ig'); // Find number before marker, capture preceding non-digit or start
                    measurement = measurement.replace(singleNumRegex, (match, prefix, num, _, suffix) => {
                         return `${prefix}${roundScaled(parseFloat(num))}${suffix}`;
                    });
                }
            }
            ingredientsHtml += `<li data-emoji="${ing.emoji || 'üç™'}">${measurement}</li>`;
        });
        return ingredientsHtml;
    }


    // --- displayRecipeContent (Minor update for structure) ---
    function displayRecipeContent(type) {
        const texts = langData[currentLang];
        const recipe = texts.recipes[type];
        if (!recipe) return '<p>Error: Recipe data not found!</p>';

        const unitTogglesHtml = createUnitTogglesHTML(); // Generate toggles HTML

        // Start content area div
        let contentHtml = `<div class="recipe-content-area">`;
        contentHtml += `<h3>${recipe.title}</h3>`; // Recipe Title
        contentHtml += unitTogglesHtml; // Inject Unit Toggles HERE

        // Ingredients Section
        contentHtml += `<h4 class="list-header" data-lang-key="ingredientsTitle">${texts.ingredientsTitle}</h4>`;
        contentHtml += `<ul class="ingredient-list">${generateIngredientsHTML(type)}</ul>`;

        // Steps Section
        contentHtml += `<h4 class="list-header" data-lang-key="stepsTitle">${texts.stepsTitle}</h4>`;
        contentHtml += `<ol class="steps-list">`;
        recipe.steps.forEach(step => { contentHtml += `<li>${step}</li>`; });
        contentHtml += `</ol>`;

        // Science Note Section (if exists)
        if (recipe.scienceNote) {
            contentHtml += `<div class="science-note">`;
            contentHtml += `<h4><span class="emoji">üî¨</span> ${texts.scienceNoteTitle}</h4>`; // Emoji + Text Title
            contentHtml += `<p>${recipe.scienceNote}</p>`;
            contentHtml += `</div>`;
        }
        contentHtml += `</div>`; // Close recipe-content-area
        return contentHtml;
    }


    // --- displayRecipe (Manages showing/hiding sections) ---
    function displayRecipe(type) {
        selectedCookieType = type;

        // Ensure placeholder is hidden, recipe container is prepared
        contentPlaceholder.classList.remove('visible');
        recipeDetailsContainer.innerHTML = ''; // Clear previous recipe
        recipeDetailsContainer.classList.remove('visually-hidden'); // Make container block visible for content population
        recipeDetailsContainer.classList.add('visible'); // Add visible class (even if content fades)

        // Generate and inject new content
        const recipeContentHtml = displayRecipeContent(type);
        recipeDetailsContainer.innerHTML = recipeContentHtml;

        // Apply theme class
        const theme = langData[currentLang].recipes[type]?.theme || '';
        recipeDetailsContainer.className = `details-section recipe-container visible ${theme}`;

        // Handle Easter Egg Visibility
        const isThick = (type === 'thick');
        easterEggContainer.classList.toggle('visible', isThick);
        easterEggContainer.classList.toggle('visually-hidden', !isThick);
        if (isThick) {
             if (!stuffedCookieImage.src || !stuffedCookieImage.src.endsWith(IMAGE_PATHS.stuffed)) {
                 stuffedCookieImage.src = IMAGE_PATHS.stuffed;
                 stuffedCookieImage.alt = langData[currentLang].easterEggIdea || "Stuffed Cookie";
             }
        }

        // Re-attach unit change listener for the newly added toggles
        recipeDetailsContainer.removeEventListener('click', handleUnitChangeDelegation); // Clean up first
        recipeDetailsContainer.addEventListener('click', handleUnitChangeDelegation);

        // Ensure toggles visibility and active states are correct
        const toggleWrapper = recipeDetailsContainer.querySelector('.unit-toggle-wrapper');
        if(toggleWrapper){
            updateUnitToggleVisibility(toggleWrapper);
            updateUnitButtonActiveStates(toggleWrapper);
        }
    }

    function showPlaceholder() {
         selectedCookieType = null;

         // Hide dynamic content sections
         [keyDifferencesContainer, recipeDetailsContainer, easterEggContainer].forEach(section => {
             section.classList.remove('visible');
             section.classList.add('visually-hidden');
         });

        // Show placeholder
        contentPlaceholder.classList.add('visible');
        contentPlaceholder.innerHTML = langData[currentLang].placeholderSelect; // Ensure text is correct

        // Reset image
        if (!selectedCookieImage.src || !selectedCookieImage.src.endsWith(IMAGE_PATHS.comparison)){
            selectedCookieImage.src = IMAGE_PATHS.comparison;
            selectedCookieImage.alt = "Comparison of classic, thick, and thin cookies";
        }
        selectedCookieImage.classList.remove(IMAGE_CLASS_SELECTED); // Remove small image class

         // Reset buttons
         cookieTypeButtons.forEach(btn => btn.classList.remove('active'));
    }

    function displayKeyDifferences(type) {
        const texts = langData[currentLang];
        const diffs = texts.diffs[type];
        if (!diffs || !keyDiffTitleH3 || !keyDifferencesPoints) {
             keyDifferencesContainer.classList.add('visually-hidden');
             keyDifferencesContainer.classList.remove('visible');
             return;
         }
        // Update title
        const baseTitleKey = 'keyDifferencesTitleBase';
        const cookieName = diffs.name || (type.charAt(0).toUpperCase() + type.slice(1) + ' Cookie');
        keyDiffTitleH3.innerHTML = `${texts[baseTitleKey] || 'Key Differences for'} <span class="dynamic-cookie-name">${cookieName}</span>`;

        // Update content paragraphs safely
        const points = {
             butterMethodP: keyDifferencesPoints.querySelector('.butter-diff p'),
             chillingMethodP: keyDifferencesPoints.querySelector('.chilling-diff p'),
             otherNotesP: keyDifferencesPoints.querySelector('.other-diff p'),
             butterTitleSpan: keyDifferencesPoints.querySelector('.butter-diff h4 span:not(.emoji)'),
             chillingTitleSpan: keyDifferencesPoints.querySelector('.chilling-diff h4 span:not(.emoji)'),
             otherNotesTitleSpan: keyDifferencesPoints.querySelector('.other-diff h4 span:not(.emoji)')
         };
         if (points.butterMethodP) points.butterMethodP.innerHTML = diffs.butterMethod || '';
         if (points.chillingMethodP) points.chillingMethodP.innerHTML = diffs.chillingMethod || '';
         if (points.otherNotesP) points.otherNotesP.innerHTML = diffs.otherNotes || '';
         if (points.butterTitleSpan && texts.butterTitle) points.butterTitleSpan.textContent = texts.butterTitle;
         if (points.chillingTitleSpan && texts.chillingTitle) points.chillingTitleSpan.textContent = texts.chillingTitle;
         if (points.otherNotesTitleSpan && texts.otherNotesTitle) points.otherNotesTitleSpan.textContent = texts.otherNotesTitle;

         // Make visible
         keyDifferencesContainer.classList.remove('visually-hidden');
         keyDifferencesContainer.classList.add('visible');
     }


    function displayTips() {
        const texts = langData[currentLang];
        if (!texts.tips || !tipsList) return;
        tipsList.innerHTML = ''; // Clear old tips
        // Use DocumentFragment for performance
        const fragment = document.createDocumentFragment();
        texts.tips.forEach(tip => {
            const li = document.createElement('li');
            li.dataset.emoji = tip.emoji || 'üí°';
            li.innerHTML = tip.text;
            fragment.appendChild(li);
        });
        tipsList.appendChild(fragment);

        // Update Tips Title
        const tipBoxTitleElement = document.querySelector('.tip-box h3[data-lang-key="tipsTitle"]');
        if(tipBoxTitleElement && texts.tipsTitle) {
             tipBoxTitleElement.innerHTML = `<span class="emoji">üí°</span> ${texts.tipsTitle} <span class="emoji">üî¨</span>`;
        }
    }

    // --- handleCookieTypeSelect (Revised) ---
    function handleCookieTypeSelect(event) {
        const button = event.currentTarget;
        const type = button.dataset.type;

        // No change if already selected
        if (selectedCookieType === type && button.classList.contains('active')) {
            // Maybe scroll to recipe if already selected? Optional.
            // recipeDetailsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
            return;
        }

        selectedCookieType = type;

        // Update button active states
        cookieTypeButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        // Update Hero Image
        const recipeTitle = langData[currentLang].recipes[type]?.title || `${type.charAt(0).toUpperCase() + type.slice(1)} Cookie`;
        const imagePath = IMAGE_PATHS[type];
        if (imagePath && (!selectedCookieImage.src || !selectedCookieImage.src.endsWith(imagePath))) {
             selectedCookieImage.src = imagePath;
             selectedCookieImage.alt = recipeTitle;
        }
         // Add class to trigger CSS transition for size/style change
        selectedCookieImage.classList.add(IMAGE_CLASS_SELECTED);

        // Display relevant content sections
        displayKeyDifferences(type); // Show differences first
        displayRecipe(type); // Then show recipe (handles Easter egg too)

         // Scroll to the key differences section smoothly after selection
         if (keyDifferencesContainer.classList.contains('visible')) {
             keyDifferencesContainer.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });
         }
    }


    // --- Scroll Animation Setup ---
    function setupScrollAnimations() {
        if (!('IntersectionObserver' in window)) {
            scrollFadeElements.forEach(el => el.classList.add('is-visible')); // Fallback
            return;
        }
        const observerOptions = { root: null, rootMargin: '0px', threshold: 0.15 }; // Trigger slightly earlier
        const observerCallback = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible');
                    observer.unobserve(entry.target); // Observe only once
                }
            });
        };
        const observer = new IntersectionObserver(observerCallback, observerOptions);
        scrollFadeElements.forEach(el => observer.observe(el));
    }


    // --- INITIALIZATION ---
    function initialize() {
        // Ensure initial DOM state matches placeholder view
        showPlaceholder(); // Set placeholder, hide dynamic sections initially

        // Set default language and initial text render
        updateLanguage(DEFAULT_LANG); // Also calls updateYieldInfo

        // Scaler initial setup
        if (butterAmountInput) {
             butterAmountInput.value = STANDARD_BUTTER_GRAMS;
             butterAmountInput.placeholder = STANDARD_BUTTER_GRAMS.toString();
        }

        // Setup Event Listeners
        langButtons.forEach(button => button.addEventListener('click', () => updateLanguage(button.dataset.lang)));
        cookieTypeButtons.forEach(button => button.addEventListener('click', handleCookieTypeSelect));
        if (updateScaleBtn) updateScaleBtn.addEventListener('click', handleScaleUpdate);
        if (butterAmountInput) {
             butterAmountInput.addEventListener('keypress', (event) => { if (event.key === 'Enter') { event.preventDefault(); handleScaleUpdate(); }});
             butterAmountInput.addEventListener('change', handleScaleUpdate);
        }

        // Initialize scroll animations
        setupScrollAnimations();

        // Fade in the page
        body.classList.add('loaded');
        console.log("Omar's Cookie Lab Initialized!");
    }

    initialize(); // Run the setup

}); // End DOMContentLoaded
