// ==== START OF SCRIPT.JS (Based on cookie3 script (2).js with additions) ====

document.addEventListener('DOMContentLoaded', () => {
    // --- CONFIGURATION ---
    const DEFAULT_LANG = 'en';
    const DEFAULT_UNIT = 'metric';
    const STANDARD_BUTTER_GRAMS = 226; // Base butter amount for scaling calculations
    const BASE_YIELD_MIN = 18; // Base minimum cookies
    const BASE_YIELD_MAX = 24; // Base maximum cookies
    const IMAGE_CLASS_SELECTED = 'selected-type-image'; // (Might not be used by original CSS)

    // --- IMAGE PATHS ---
    const IMAGE_PATHS = { classic: 'classic.webp', thick: 'thick_and_gooey.webp', thin: 'thin-and-crispy.webp', comparison: '3-cookie-types.jpg', stuffed: 'stuffed_cookie.webp' };

    // --- DOM ELEMENTS (Matching cookie3 index (3).html) ---
    const body = document.body;
    const omarsFavText = document.querySelector('.omars-fav-text');
    const langButtons = document.querySelectorAll('.lang-btn');
    const cookieTypeButtons = document.querySelectorAll('.selector-btn');
    const selectedCookieImage = document.getElementById('selected-cookie-image');
    const keyDifferencesContainer = document.getElementById('key-differences');
    const keyDifferencesPoints = keyDifferencesContainer.querySelector('.diff-points');
    const keyDiffTitleH3 = keyDifferencesContainer.querySelector('h3'); // Get the H3 element
    const recipeDetailsContainer = document.getElementById('recipe-details');
    const unitTogglesTemplate = document.getElementById('unit-toggles-template');
    const easterEggContainer = document.getElementById('easter-egg-container');
    const stuffedCookieImage = document.getElementById('stuffed-cookie-image');
    const tipsList = document.getElementById('tips-list');
    // Scaler Elements (Static in HTML)
    const butterAmountInput = document.getElementById('butter-amount-input');
    const updateScaleBtn = document.getElementById('update-scale-btn');
    // Yield element is retrieved dynamically in updateYieldDisplay

    // --- STATE ---
    let currentLang = DEFAULT_LANG;
    let currentUnit = DEFAULT_UNIT;
    let selectedCookieType = null;
    let currentScaleFactor = 1; // Initialize scale factor to 1 (100%)

    // --- DATA (Includes scaler text AND restored toast text) ---
    const langData = {
        en: {
            mainTitle: "üç™ Omar's Insanely Good Cookie Guide! üç™", omarsFavText: "Omar's Fave!", unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            yieldInfo: `Whips up about {min}-{max} cookies üç™`, // Use {} for replacement placeholders
            chooseStyle: "Alright, Cookie Boss! Pick Your Poison (aka Style!):", typeClassic: "Classic Balanced", typeThick: "Thick & Gooey", typeThin: "Thin & Crispy",
            keyDifferencesTitleBase: "üîë Key Differences for", butterTitle: "Brown Butter State & Mixing", chillingTitle: "Chilling Method", otherNotesTitle: "Other Key Notes",
            placeholderSelect: "üëà Click a cookie style above to witness the magic! ‚ú®", ingredientsTitle: "ü•£ Ingredients (The Good Stuff)", stepsTitle: "üìù Steps (Let's Bake!)",
            scienceNoteTitle: "The Science Bit! (Nerd Out!)", // Kept original text
            // *** ADDED Toast Milk Powder Text ***
            howToToastMilkPowderTitle: "ü§î How to Toast Milk Powder?",
            howToToastMilkPowderDesc: "Easy! Spread 3-4 Tbsp milk powder in a <span class='highlight'>dry skillet</span> over <span class='highlight'>LOW heat</span>. <span class='critical'>STIR CONSTANTLY</span> until light golden & nutty (3-5 min). Remove <span class='critical'>IMMEDIATELY</span> to prevent burning. Cool completely.",
            // ***********************************
            easterEggTitle: "üèÜ You Legend! Picked GOOEY! üèÜ", easterEggIntro: "Okay, you've got taste! Ready for the Level 2 Boss?", easterEggIdea: "üî• STUFFED COOKIES! üî•",
            easterEggDesc: "Dead easy: Make a dent in your THICK cookie dough ball, plop in ~1 tsp Nutella/Lotus/Pistachio cream, seal it up like a secret treasure, then bake as usual!",
            easterEggPistachioTip: "Seriously, TRUST the pistachio! It's a game-changer.", pistachioReco: "Best Spread IMHO:", pistachioLinkSource: "(Amazon EG link)",
            tipsTitle: "üí° Omar's Pro Tips! (Level Up Your Cookie Game)", finalTag: "Nailed it? Wanna show off? Tag me! @omarisavibe üòÑ",
            scalerTitle: "üßà Customize Your Batch Size!",
            scalerDesc: "Enter your starting butter amount (grams) to scale the metric recipe.",
            scalerLabel: "Starting Butter (g):",
            scalerButton: "Update Scale",
            scalerNote: "Note: Only metric (gram) values are scaled. Imperial (cup) units are approximate.",
            scalerAlertInvalid: "Invalid butter amount (min 50g). Resetting to default.", // Added for alert
             diffs: {
                 classic: { name: "Classic Balanced", butterMethod: "Use <span class='highlight'>COOLED but LIQUID</span> Brown Butter. Whisk with sugars (no heavy creaming needed).", chillingMethod: "<span class='highlight'>RECOMMENDED Chill:</span> 30 mins - 24 hrs. Improves flavor and texture.", otherNotes: "Standard flour amount (~300g). Includes baking powder for lift. Optional toasted nuts add amazing texture!" },
                 thick: { name: "Thick & Gooey", butterMethod: "Use <span class='critical'>CHILLED SOLID</span> Brown Butter. <span class='critical'>Cream</span> this with sugars until very light and fluffy (3-5 mins).", chillingMethod: "<span class='critical'>MANDATORY Long Chill:</span> 24 - 72 hrs. The SECRET to thickness & deep flavor!", otherNotes: "Use <span class='highlight'>MORE flour</span> (~310-330g). Baking powder + optional cornstarch for softness. Toasted nuts highly recommended!" },
                 thin: { name: "Thin & Crispy", butterMethod: "Use <span class='critical'>WARM LIQUID</span> Brown Butter. Whisk with sugars.", chillingMethod: "<span class='critical'>SKIP Chilling!</span> Bake immediately for maximum spread.", otherNotes: "Use <span class='highlight'>LESS flour</span> (~280-300g). <span class='critical'>OMIT baking powder.</span> More white sugar aids crispness." }
            },
            recipes: {
                 classic: { title: "Classic Balanced Cookies", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">COOLED but LIQUID</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups brown sugar, packed', metric: '250g brown sugar, packed' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup granulated sugar', metric: '100g granulated sugar' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 cups all-purpose flour', metric: '300g all-purpose flour' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '~1.5-2 Tbsp toasted milk powder', metric: '15-20g toasted milk powder (Optional)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' }, { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt (or 3g table salt)' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '1.5 - 2 cups chocolate', metric: '255-340g chocolate <span class="note">(Omar recommends Dropsy MILK chocolate!)</span>' }, { key: 'nuts', emoji: 'ü•ú', imperial: '1/2 - 1 cup toasted nuts', metric: '50-100g toasted nuts (Optional - Pecans/Walnuts recommended!)' } ], steps: [ 'Prep: Brown the butter & let cool (liquid). <span class="highlight">Toast milk powder (if using - see method note below!)</span>. Whisk dry (flour, milk powder, leavening, salt). If using nuts, toast them (350¬∞F/175¬∞C, 5-8 min).', 'Whisk <span class="highlight">liquid brown butter</span> & sugars.', 'Beat in eggs (one by one), then vanilla.', 'Gradually mix dry ingredients until JUST combined. <span class="critical">No overmixing!</span>', 'Stir in chocolate chips/chunks <span class="highlight">and toasted nuts (if using).</span>', '<span class="highlight">Chill Dough (Recommended):</span> Cover & chill <span class="highlight">30 mins+</span> (up to 24 hrs).', 'Preheat oven <span class="highlight">375¬∞F (190¬∞C)</span>. Line sheets.', 'Scoop <span class="highlight">~2 Tbsp</span> balls. Add flaky salt (optional).', 'Bake <span class="highlight">10-12 min</span> (golden edges).', 'Cool on pan 5-10 min, then rack. Enjoy! üéâ' ], scienceNote: "Cooled liquid brown butter = flavor without creaming air. Chill helps texture. Baking powder lifts slightly. Milk powder & nuts add depth/chew." },
                 thick: { title: "Thick & Gooey Cookies", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">CHILLED SOLID (scoopable)</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/2 cups brown sugar, packed', metric: '300g brown sugar, packed (More brown!)' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/4 cup granulated sugar', metric: '50g granulated sugar (Less white!)' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 - 2 3/4 cups all-purpose flour', metric: '310-330g all-purpose flour (More flour!)' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '~1.5-2 Tbsp toasted milk powder', metric: '15-20g toasted milk powder (Optional)' }, { key: 'starch', emoji: '‚≠ê', imperial: '1-2 Tbsp cornstarch', metric: '8-16g cornstarch (Optional, for softness)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' }, { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '2+ cups chocolate', metric: '340g+ chocolate <span class="note">(Go generous! Omar recommends Dropsy MILK chocolate!)</span>' }, { key: 'nuts', emoji: 'ü•ú', imperial: '1/2 - 1 cup toasted nuts', metric: '50-100g toasted nuts (Highly Recommended - Pecans/Walnuts!)' } ], steps: [ 'Prep: Brown butter & <span class="critical">chill solid</span>. <span class="highlight">Toast milk powder (if using - see method note below!)</span>. Whisk dry (flour, milk powder, cornstarch, leavening, salt). If using nuts, toast them.', '<span class="critical">CREAM</span> chilled brown butter & sugars until very light/fluffy (3-5 min). Essential!', 'Beat in eggs (one by one), then vanilla.', 'Gradually mix in <span class="highlight">higher amount</span> of dry ingredients until JUST combined. <span class="critical">NO OVERMIXING!</span>', 'Stir in <span class="highlight">generous</span> chocolate <span class="highlight">and toasted nuts (if using).</span>', '<span class="critical">CHILL DOUGH (MANDATORY):</span> Cover & chill <span class="critical">24 - 72 hours</span>. The secret!', 'Preheat oven <span class="highlight">375¬∞F (190¬∞C)</span> (maybe start higher 400¬∞F/200¬∞C). Line sheets.', 'Scoop <span class="critical">LARGE (~3-4 Tbsp)</span> balls. Keep <span class="highlight">TALL!</span> Don\'t flatten. Add salt (optional).', 'Bake <span class="highlight">12-15 min</span>. Centers look <span class="critical">soft/slightly underdone</span>.', 'Cool on pan <span class="critical">10-15 min MINIMUM</span>, then rack. GOOEY prize! üòç' ], scienceNote: "Creaming SOLID chilled brown butter = air for thickness. LONG chill = hydration & flavor. More flour/cornstarch = soft chew. Nuts add contrast." },
                 thin: { title: "Thin & Crispy Cookies", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">WARM LIQUID</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups granulated sugar', metric: '250g granulated sugar (More white!)' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup brown sugar, packed', metric: '100g brown sugar, packed (Less brown!)' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/4 - 2 1/2 cups all-purpose flour', metric: '280-300g all-purpose flour (Less flour!)' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '~1.5-2 Tbsp toasted milk powder', metric: '15-20g toasted milk powder (Optional)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda <span class="critical note"> (NO baking powder!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', imperial: '1-2 Tbsp milk', metric: '15-30ml milk (Optional, for extra spread)' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp (+ Optional extra Yolk for chew)' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '1.5 cups chocolate', metric: '255g chocolate <span class="note">(Minis ok! Omar recommends Dropsy MILK chocolate!)</span>' }, ], steps: [ 'Prep: Brown butter & keep <span class="critical">warm liquid</span>. <span class="highlight">Toast milk powder (if using - see method note below!)</span>. Whisk dry (flour, milk powder, <span class="highlight">soda ONLY</span>, salt).', 'Whisk <span class="highlight">warm brown butter</span> & sugars (adjusted ratio).', 'Beat in eggs (and optional yolk/milk), then vanilla.', 'Gradually mix in <span class="highlight">lower amount</span> of dry ingredients until JUST combined. <span class="critical">NO OVERMIXING!</span>', 'Stir in chocolate chips/chunks.', '<span class="critical">DO NOT CHILL.</span> Bake immediately!', 'Preheat oven lower: <span class="highlight">350¬∞F (175¬∞C)</span>. Line sheets.', 'Scoop <span class="highlight">smaller (~1.5-2 Tbsp)</span> balls. Place <span class="critical">FAR APART!</span> Can flatten slightly.', 'Bake <span class="highlight">12-15 minutes</span> until golden brown & fully set.', 'Cool on pan 5 min, then rack. Crisps up fully when cool! ‚ú®' ], scienceNote: "Warm liquid butter + more white sugar + less flour + soda only + no chill = SUPER SPREAD! Lower/longer bake dries them out for SNAP." }
            },
            tips: [ { emoji: '‚öñÔ∏è', text: "<span class='highlight'>Measure Flour Like a Pro:</span> Spoon & level, don't scoop! OR just use a scale (grams = KING). Avoids dry cookies." }, { emoji: 'ü•ö', text: "<span class='highlight'>Room Temp Ingredients Rule:</span> Eggs & butter mix way better when not fridge-cold. Quick fix: warm water bath for eggs!" }, { emoji: 'üßà', text: "<span class='highlight'>Brown Butter State is CRITICAL:</span> Cooled Liquid, Chilled Solid, or Warm Liquid - it dictates the texture! Pay attention!" }, { emoji: 'ü•∂', text: "<span class='critical'>Respect the Chill Time!:</span> Seriously, for thick/gooey it's non-negotiable. Builds flavour, prevents cookie puddles. DO IT." }, { emoji: 'üî•', text: "<span class='highlight'>Know Thy Oven:</span> They lie! An oven thermometer is cheap. Rotate pans if needed for even baking glory." }, { emoji: 'üç™', text: "<span class='highlight'>Don't Cremate Your Cookies:</span> Pull 'em out when edges are set/golden & centers look *slightly* underdone. Carryover cooking is real!" }, { emoji: 'üìÑ', text: "<span class='highlight'>Use Parchment Paper:</span> Prevents sticking, easy cleanup, promotes even browning. Your baking BFF." }, { emoji: 'ü•Ñ', text: "<span class='critical'>The Enemy: Overmixing Flour:</span> Mix JUST until flour disappears. More mixing = tough, sad cookies. Be gentle!" }, { emoji: '‚ú®', text: "<span class='highlight'>Fancy Finish: Flaky Sea Salt:</span> A tiny sprinkle *before* baking adds magic sparkle & flavor pop. Highly recommend!" }, { emoji: 'üç´', text: "<span class='highlight'>Chocolate Matters:</span> Use good stuff! Dropsy Milk is great! Mix types (chips & chopped bars) for texture variation." }, { emoji: 'ü•ú', text: "<span class='highlight'>Toasting Nuts = Flavor Boost:</span> Don't skip toasting nuts (if using Classic/Thick) - 350¬∞F/175¬∞C for 5-8 mins until fragrant. HUGE difference!" }, { key: 'sci1', emoji: 'üî•', text: 'Brown Butter Science: Maillard reaction = nutty flavor! Universal upgrade.' }, { key: 'sci2', emoji: 'ü•õ', text: 'Toasted Milk Powder: More Maillard! Extra chew/depth. Small amount makes a diff.' } ]
        },
        ar: {
            mainTitle: "üç™ ÿØŸÑŸäŸÑ ÿπŸÖÿ± ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿÆÿ±ÿßŸÅŸäÿ©! üç™", omarsFavText: "ŸÖŸÅÿ∂ŸÑÿßÿ™ ÿπŸÖÿ±!", unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            yieldInfo: `ÿ®ÿ™ÿπŸÖŸÑ ÿ≠ŸàÿßŸÑŸä {min}-{max} ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤ üç™`,
            chooseStyle: "ÿ™ŸÖÿßŸÖ Ÿäÿß ŸÖÿπŸÑŸÖ ÿßŸÑŸÉŸàŸÉŸäÿ≤! ÿßÿÆÿ™ÿßÿ± ŸÖÿ≤ÿßÿ¨ŸÉ (ŸäÿπŸÜŸä ÿßŸÑÿ≥ÿ™ÿßŸäŸÑ!):", typeClassic: "ŸÉŸÑÿßÿ≥ŸäŸÉ ŸÖÿ™Ÿàÿßÿ≤ŸÜ", typeThick: "ÿ≥ŸÖŸäŸÉÿ© Ÿà ÿ∫ÿ±ŸÇÿßŸÜÿ©: ÿßŸÑÿ®Ÿäÿ¨ ÿ≥ŸàŸÅÿ™Ÿä!", typeThin: "ÿ±ŸÅŸäÿπÿ© ŸàŸÖŸÇÿ±ŸÖÿ¥ÿ©: ÿßŸÑŸÑŸä ÿ®ÿ™ÿ∑ŸÇ",
            keyDifferencesTitleBase: "üîë ÿßŸÑŸÅÿ±ŸàŸÇÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑŸÉŸàŸÉŸäÿ≤", butterTitle: "ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸàÿßŸÑÿÆŸÑÿ∑", chillingTitle: "ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ", otherNotesTitle: "ÿßŸÑÿÆŸÑÿßÿµÿ© (ÿßŸÑÿ∫ÿ¥ ŸäÿπŸÜŸä)",
            placeholderSelect: "üëà ÿØŸàÿ≥ ÿπŸÑŸâ ÿ≥ÿ™ÿßŸäŸÑ ŸÅŸàŸÇ ÿπÿ¥ÿßŸÜ ÿ™ÿ¥ŸàŸÅ ÿßŸÑÿ≠ÿ±ŸÉÿßÿ™! ‚ú®", ingredientsTitle: "ü•£ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ (Ÿäÿß ÿ™ŸÉÿßÿ™Ÿá Ÿäÿß ÿ≠ÿ±ŸÉÿßÿ™Ÿá!)", stepsTitle: "üìù ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ (ÿ®ÿßŸÑÿ™ŸÅÿµŸäŸÑ ÿßŸÑŸÖŸÖŸÑ)",
            scienceNoteTitle: "ÿßŸÑÿ≠ÿ™ÿ© ÿßŸÑÿπŸÑŸÖŸäÿ© (ŸÑŸÑŸÅŸáŸÖÿßŸÜŸäŸÜ!)", // Use this key
             // *** ADDED Toast Milk Powder Text - AR ***
            howToToastMilkPowderTitle: "ü§î ÿ•ÿ≤ÿßŸä ŸÜÿ≠ŸÖÿµ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑŸÑÿ®ŸÜÿü",
            howToToastMilkPowderDesc: "ÿ≥ŸáŸÑÿ©! ÿßŸÜÿ¥ÿ± 3-4 ŸÖ.ŸÉ ÿ®ŸàÿØÿ±ÿ© ŸÑÿ®ŸÜ ŸÅŸä <span class='highlight'>ÿ∑ÿßÿ≥ÿ© ÿ¨ÿßŸÅÿ©</span> ÿπŸÑŸâ <span class='highlight'>ŸÜÿßÿ± ŸáÿßÿØŸäÿ©</span>. <span class='critical'>ŸÇŸÑÿ® ÿ®ÿßÿ≥ÿ™ŸÖÿ±ÿßÿ±</span> ŸÑÿ≠ÿØ ŸÖÿß ÿ™ÿßÿÆÿØ ŸÑŸàŸÜ ÿ∞Ÿáÿ®Ÿä ŸÅÿßÿ™ÿ≠ Ÿàÿ±Ÿäÿ≠ÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™ (3-5 ÿØŸÇ). ÿ¥ŸäŸÑŸáÿß <span class='critical'>ŸÅŸàÿ±ÿßŸã</span> ÿπÿ¥ÿßŸÜ ŸÖÿ™ÿ™ÿ≠ÿ±ŸÇÿ¥. ÿ≥Ÿäÿ®Ÿáÿß ÿ™ÿ®ÿ±ÿØ.",
            // *****************************************
            easterEggTitle: "üèÜ Ÿäÿß ÿ£ÿ≥ÿ∑Ÿàÿ±ÿ©! ÿßÿÆÿ™ÿ±ÿ™ ÿßŸÑÿ∫ÿ±ŸÇÿßŸÜÿ©! üèÜ", easterEggIntro: "ÿ∞ŸàŸÇŸÉ ÿπÿßŸÑŸä ÿßŸÑÿµÿ±ÿßÿ≠ÿ©! ÿ¨ÿßŸáÿ≤ ŸÑŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸàÿ≠ÿ¥ÿü", easterEggIdea: "üî• ŸÉŸàŸÉŸäÿ≤ ŸÖÿ≠ÿ¥Ÿäÿ© Ÿäÿß Ÿàÿ≠ÿ¥! üî•", easterEggDesc: "ÿ≥ŸáŸÑÿ© ŸÖŸàÿ™: ÿßÿπŸÖŸÑ ÿ≠ŸÅÿ±ÿ© ŸÅŸä ŸÉŸàÿ±ÿ© ÿπÿ¨ŸäŸÜÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ©ÿå ÿßÿ≠ÿ¥ÿ± ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ© ŸÜŸàÿ™ŸäŸÑÿß/ŸÑŸàÿ™ÿ≥/ÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸàÿå ÿßŸÇŸÅŸÑŸáÿß ŸÉŸàŸäÿ≥ ŸÉÿ£ŸÜŸáÿß ÿ≥ÿ± ÿ≠ÿ±ÿ®Ÿäÿå ŸàÿßÿÆÿ®ÿ≤Ÿáÿß ÿπÿßÿØŸä!",
            easterEggPistachioTip: "ÿ®ÿ¨ÿØÿå ÿ¨ÿ±ÿ® ÿßŸÑÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸà ŸàŸÖÿ™ÿÆÿßŸÅÿ¥! ÿπÿßŸÑŸÖ ÿ™ÿßŸÜŸä ŸàÿßŸÑŸÑŸá.", pistachioReco: "ÿ£ÿ≠ÿ≥ŸÜ ŸÉÿ±ŸäŸÖÿ© ÿ®ÿµÿ±ÿßÿ≠ÿ©:", pistachioLinkSource: "(ŸÑŸäŸÜŸÉ ÿ£ŸÖÿßÿ≤ŸàŸÜ ŸÖÿµÿ±)",
            tipsTitle: "üí° ŸÜÿµÿßÿ¶ÿ≠ ÿπŸÖÿ± ŸÑŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ! (ÿßÿ±ÿ™ŸÇŸê ÿ®ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÉŸàŸÉŸäÿ≤)", finalTag: "ÿ∏ÿ®ÿ∑ÿ™Ÿáÿßÿü ÿπÿßŸäÿ≤ ÿ™ÿ™ŸÖŸÜÿ∏ÿ±ÿü ÿßÿπŸÖŸÑŸä ÿ™ÿßÿ¨! @omarisavibe üòÑ",
            scalerTitle: "üßà ÿπÿØŸëŸÑ ÿ≠ÿ¨ŸÖ ÿØŸÅÿπÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤!",
            scalerDesc: "ÿ£ÿØÿÆŸÑ ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ£ŸàŸÑŸäÿ© (ÿ®ÿßŸÑÿ¨ÿ±ÿßŸÖ) ŸÑÿ∂ÿ®ÿ∑ ŸÖŸÇÿßÿØŸäÿ± ÿßŸÑŸàÿµŸÅÿ© (ÿßŸÑŸÖÿ™ÿ±Ÿäÿ©).",
            scalerLabel: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ®ÿØÿ¶Ÿäÿ© (ÿ¨ŸÖ):",
            scalerButton: "ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÇÿßÿØŸäÿ±",
            scalerNote: "ŸÖŸÑÿ≠Ÿàÿ∏ÿ©: Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ŸÇŸäŸÖ ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÅŸÇÿ∑. Ÿàÿ≠ÿØÿßÿ™ ÿßŸÑŸÉŸàÿ® ÿ™ŸÇÿ±Ÿäÿ®Ÿäÿ©.",
            scalerAlertInvalid: "ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ© (ÿ£ŸÇŸÑ ÿ≠ÿØ 50 ÿ¨ÿ±ÿßŸÖ). ÿßŸÑÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸàÿ∂ÿπ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä.", // Added for alert
             diffs: { classic: { name: "ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='highlight'>ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± (ÿ®ÿØŸàŸÜ ÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä).", chillingMethod: "<span class='highlight'>ÿ™ÿ®ÿ±ŸäÿØ ŸÖŸèŸàÿµŸâ ÿ®Ÿá:</span> 30 ÿØŸÇŸäŸÇÿ© - 24 ÿ≥ÿßÿπÿ©. Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÜŸÉŸáÿ© ŸàÿßŸÑŸÇŸàÿßŸÖ.", otherNotes: "ŸÉŸÖŸäÿ© ÿØŸÇŸäŸÇ ÿπÿßÿØŸäÿ© (~300 ÿ¨ŸÖ). ŸÅŸäŸáÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±. ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ© ÿ®ÿ™ÿ∂ŸäŸÅ ŸÇŸàÿßŸÖ ÿ™ÿ≠ŸÅÿ©!" }, thick: { name: "ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>. <span class='critical'>ÿßÿÆŸÅŸÇŸáÿß ŸÉÿ±ŸäŸÖŸä</span> ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± ÿ≠ÿ™Ÿâ Ÿáÿ¥ÿ© ÿ¨ÿØŸãÿß (3-5 ÿØŸÇÿßÿ¶ŸÇ).", chillingMethod: "<span class='critical'>ÿ™ÿ®ÿ±ŸäÿØ ÿ•ŸÑÿ≤ÿßŸÖŸä ÿ∑ŸàŸäŸÑ:</span> 24 - 72 ÿ≥ÿßÿπÿ©. <span class='critical'>ÿßŸÑÿ≥ÿ±</span> ŸÑŸÑÿ≥ŸÖŸÉ ŸàÿßŸÑŸÜŸÉŸáÿ©!", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÉÿ´ÿ±</span> (~310-330 ÿ¨ŸÖ). ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± + ŸÜÿ¥ÿß ÿßÿÆÿ™Ÿäÿßÿ±Ÿä. ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ŸÖŸáŸÖÿ© ŸáŸÜÿß!" }, thin: { name: "ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ÿØÿßŸÅÿ¶ÿ© Ÿàÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ±.", chillingMethod: "<span class='critical'>ÿ™ÿÆÿ∑Ÿé ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±Ÿãÿß.", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ</span> (~280-300 ÿ¨ŸÖ). <span class='critical'>ÿ®ÿØŸàŸÜ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±.</span> ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ´ÿ± ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©." } },
             recipes: {
                 classic: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂' }, { key: 'flour', emoji: 'üåæ', cups: '2 1/2 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ∫ÿ±ÿßÿ∂' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '~1.5-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '15-20 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ (ÿ£Ÿà 3ÿ¨ ŸÜÿßÿπŸÖ)' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 - 2 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255-340 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ÿπŸÖÿ± ÿ®ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ®!)</span>' }, { key: 'nuts', emoji: 'ü•ú', cups: '1/2 - 1 ŸÉŸàÿ® ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ©', grams: '50-100 ÿ¨ÿ±ÿßŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä - ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤ ÿ™ÿ≠ŸÅÿ©!)' } ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿàÿ®ÿ±ŸëÿØŸáÿß (ÿ≥ÿßÿ¶ŸÑÿ©). <span class="highlight">ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ© (ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ - ÿßŸÜÿ∏ÿ± ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ®ÿßŸÑÿ£ÿ≥ŸÅŸÑ!).</span> ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ©ÿå ŸÖŸàÿßÿØ ÿ±ÿßŸÅÿπÿ©ÿå ŸÖŸÑÿ≠). ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ÿå ÿ≠ŸÖŸëÿµŸáÿß (175¬∞ŸÖÿå 5-8 ÿØ).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ≥ÿßÿ¶ŸÑÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ¨ÿßŸÅ ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="highlight">ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© (ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ).</span>', '<span class="highlight">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ŸÖŸÅÿ∂ŸÑ):</span> ÿ∫ÿ∑Ÿä Ÿàÿ®ÿ±ŸëÿØ <span class="highlight">30 ÿØŸÇŸäŸÇÿ©+</span> (ŸÑŸÄ 24 ÿ≥ÿßÿπÿ©).', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span>. ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ <span class="highlight">~2 ŸÖ.ŸÉ</span>. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">10-12 ÿØŸÇŸäŸÇÿ©</span> (ÿßŸÑÿ≠ÿ±ŸàŸÅ ÿØŸáÿ®Ÿäÿ©).', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5-10 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. ÿ®ÿßŸÑŸáŸÜÿß! üéâ' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿ≥ÿßÿ¶ŸÑÿ© = ÿ∑ÿπŸÖ ÿ®ÿØŸàŸÜ ÿÆŸÅŸÇ. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÇŸàÿßŸÖ. ÿ®ŸàÿØÿ± Ÿäÿ±ŸÅÿπ ÿ¥ŸàŸäÿ©. ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸàŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÑŸÑÿπŸÖŸÇ/ÿßŸÑŸÖÿ∂ÿ∫ÿ©." },
                 thick: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '50 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.5-2.75 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '310-330 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '~1.5-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '15-20 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'starch', emoji: '‚≠ê', cups: '1-2 ŸÖ.ŸÉ ŸÜÿ¥ÿß', grams: '8-16 ÿ¨ÿ±ÿßŸÖ ŸÜÿ¥ÿß (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÑÿ∑ÿ±ÿßŸàÿ©)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '2+ ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '340+ ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÉÿ™ÿ±! ÿπŸÖÿ± ÿ®ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ®!)</span>' }, { key: 'nuts', emoji: 'ü•ú', cups: '1/2 - 1 ŸÉŸàÿ® ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ©', grams: '50-100 ÿ¨ÿ±ÿßŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© (ŸÖŸèŸàÿµŸâ ÿ®Ÿáÿß ÿ®ÿ¥ÿØÿ© - ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤!)' } ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿà<span class="critical">ÿ®ÿ±ŸëÿØŸáÿß ÿµŸÑÿ®ÿ©</span>. <span class="highlight">ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ© (ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ - ÿßŸÜÿ∏ÿ± ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ®ÿßŸÑÿ£ÿ≥ŸÅŸÑ!).</span> ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ©ÿå ŸÜÿ¥ÿßÿå ŸÖŸàÿßÿØ ÿ±ÿßŸÅÿπÿ©ÿå ŸÖŸÑÿ≠). ÿ≠ŸÖŸëÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™.', '<span class="critical">ÿßÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä</span> ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿµŸÑÿ®ÿ© ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ ŸÉŸàŸäÿ≥ (3-5 ÿØŸÇÿßŸäŸÇ). ÿ∂ÿ±Ÿàÿ±Ÿä!', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÉÿ®ÿ±</span> ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑŸÉÿ®Ÿäÿ±ÿ©</span> <span class="highlight">ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© (ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ).</span>', '<span class="critical">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ÿ•ŸÑÿ≤ÿßŸÖŸä):</span> ÿ∫ÿ∑ŸäŸáÿß Ÿàÿ®ÿ±ŸëÿØŸáÿß <span class="critical">24 - 72 ÿ≥ÿßÿπÿ©</span>. ÿØŸá ÿßŸÑÿ≥ÿ±!', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span> (ŸÖŸÖŸÉŸÜ ÿ£ÿπŸÑŸâ ŸÅŸä ÿßŸÑÿ£ŸàŸÑ). ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="critical">ŸÉÿ®Ÿäÿ±ÿ© (3-4 ŸÖ.ŸÉ)</span> <span class="highlight">ŸàÿÆŸÑŸäŸáÿß ÿπÿßŸÑŸäÿ©!</span> ŸÑÿß ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> (ÿßŸÑŸÇŸÑÿ® <span class="critical">ÿ∑ÿ±Ÿä</span>).', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© <span class="critical">10-15 ÿØŸÇŸäŸÇÿ© ÿπ ÿßŸÑÿ£ŸÇŸÑ</span>ÿå ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. Ÿàÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑÿ∑ÿ±ÿßŸàÿ©! üòç' ], scienceNote: "ÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿµŸÑÿ®ÿ© = ŸáŸàÿßÿ° ŸÑŸÑÿ≥ŸÖŸÉ. ÿ™ÿ®ÿ±ŸäÿØ ÿ∑ŸàŸäŸÑ = ÿ™ÿ±ÿ∑Ÿäÿ® ŸàŸÜŸÉŸáÿ©. ÿØŸÇŸäŸÇ/ŸÜÿ¥ÿß ÿ£ŸÉÿ™ÿ± = ŸÖÿ∂ÿ∫ÿ©/ŸÜÿπŸàŸÖÿ©. ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ®ÿ™ÿØŸä ÿ™ÿ®ÿßŸäŸÜ." },
                 thin: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.25-2.5 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '280-300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '~1.5-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ', grams: '15-20 ÿ¨ÿ±ÿßŸÖ ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß<span class="critical note">(ŸÑÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', cups: '1-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ®', grams: '15-30 ŸÖŸÑ ÿ≠ŸÑŸäÿ® (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÅÿ±ÿ¥ ÿ≤ŸäÿßÿØÿ©)' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ) (+ ÿµŸÅÿßÿ± ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÖŸäŸÜŸä ŸÖŸÖŸÉŸÜ! ÿπŸÖÿ± ÿ®ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ®!)</span>' }, ], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿÆŸÑŸäŸáÿß <span class="critical">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>. <span class="highlight">ÿ≠ŸÖŸëÿµ ÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ© (ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ - ÿßŸÜÿ∏ÿ± ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ®ÿßŸÑÿ£ÿ≥ŸÅŸÑ!).</span> ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (ÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ®ÿå <span class="highlight">ÿµŸàÿØÿß ŸÅŸÇÿ∑</span>ÿå ŸÖŸÑÿ≠).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿØÿßŸÅÿ¶ÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ (ŸàÿµŸÅÿßÿ±/ÿ≠ŸÑŸäÿ® ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÇŸÑ</span> ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©.', '<span class="critical">ŸÑÿß ÿ™ÿ®ÿ±ŸëÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±ÿßŸã.', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">175¬∞ŸÖ</span>. ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="highlight">ÿµÿ∫Ÿäÿ±ÿ© (1.5-2 ŸÖ.ŸÉ)</span> <span class="critical">ÿ®ÿπŸäÿØ ÿπŸÜ ÿ®ÿπÿ∂!</span> ŸÖŸÖŸÉŸÜ ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß.', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> ÿ≠ÿ™Ÿâ ÿ™ÿ≠ŸÖÿ± Ÿàÿ™ÿ¨ŸÅ.', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. Ÿáÿ™ŸÇÿ±ŸÖÿ¥ ŸÑŸÖÿß ÿ™ÿ®ÿ±ÿØ! ‚ú®' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿØÿßŸÅÿ¶ÿ© + ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ± + ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ + ÿµŸàÿØÿß ŸÅŸÇÿ∑ + ŸÑÿß ÿ™ÿ®ÿ±ŸäÿØ = ŸÅÿ±ÿ¥ ÿ£ŸÇÿµŸâ! ÿ≠ÿ±ÿßÿ±ÿ© ÿ£ŸÇŸÑ/ŸàŸÇÿ™ ÿ£ÿ∑ŸàŸÑ = ŸÇÿ±ŸÖÿ¥ÿ©." }
             },
            tips: [ { emoji: '‚öñÔ∏è', text: "<span class='highlight'>ŸÇŸäÿ≥ ÿßŸÑÿØŸÇŸäŸÇ ÿµÿ≠:</span> ÿ®ÿßŸÑŸÖÿπŸÑŸÇÿ© Ÿàÿ≥ŸàŸëŸäÿå ÿ£Ÿà ŸÖŸäÿ≤ÿßŸÜ (ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÖŸÑŸÉ!). ÿπÿ¥ÿßŸÜ ŸÖÿ™ÿ∑ŸÑÿπÿ¥ ŸÜÿßÿ¥ŸÅÿ©." }, { emoji: 'ü•ö', text: "<span class='highlight'>ŸÖŸÉŸàŸÜÿßÿ™ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©:</span> ÿßŸÑÿ®Ÿäÿ∂ ŸàÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®Ÿäÿ™ÿÆŸÑÿ∑Ÿàÿß ÿ£ÿ≠ÿ≥ŸÜ ŸÉÿ™Ÿäÿ±. ÿ≠ŸÑ ÿ≥ÿ±Ÿäÿπ: ÿ≠ŸÖÿßŸÖ ŸÖŸäÿ© ÿØÿßŸÅŸäÿ© ŸÑŸÑÿ®Ÿäÿ∂." }, { emoji: 'üßà', text: "<span class='highlight'>ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸÖŸáŸÖÿ© ŸÖŸàÿ™:</span> ÿ≥ÿßÿ¶ŸÑÿ© ŸÖÿ®ÿ±ÿØÿ©ÿå ÿµŸÑÿ®ÿ©ÿå ÿ£Ÿà ÿØÿßŸÅÿ¶ÿ© - ÿ®ÿ™ÿ≠ÿØÿØ ÿßŸÑŸÇŸàÿßŸÖ!" }, { emoji: 'ü•∂', text: "<span class='critical'>ÿßÿ≠ÿ™ÿ±ŸÖ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!:</span> ŸÑŸÑÿ≥ŸÖŸäŸÉÿ© ÿ®ÿßŸÑÿ∞ÿßÿ™ÿå ÿ•ÿ¨ÿ®ÿßÿ±Ÿä ŸàŸÖŸÅŸäÿ¥ ŸÜŸÇÿßÿ¥. ÿ®Ÿäÿ®ŸÜŸä ÿ∑ÿπŸÖ Ÿàÿ®ŸäŸÖŸÜÿπ ÿßŸÑÿ≥Ÿäÿ≠ÿßŸÜ. ÿßÿπŸÖŸÑŸá!" }, { emoji: 'üî•', text: "<span class='highlight'>ÿßÿπÿ±ŸÅ ŸÅÿ±ŸÜŸÉ ŸÉŸàŸäÿ≥:</span> ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿ®ÿ™ŸÉÿØÿ®! ÿ™ÿ±ŸÖŸàŸÖÿ™ÿ± ŸÅÿ±ŸÜ ÿ±ÿÆŸäÿµ. ŸÑŸÅ ÿßŸÑÿµŸàÿßŸÜŸä." }, { emoji: 'üç™', text: "<span class='highlight'>ŸÖÿ™ŸàŸÑÿπÿ¥ ŸÅŸäŸáÿß!:</span> ÿ∑ŸÑÿπŸáÿß ŸàÿßŸÑÿ≠ÿ±ŸàŸÅ ŸÖÿ≥ÿ™ŸàŸäÿ© ŸàÿßŸÑŸÇŸÑÿ® ÿ∑ÿ±Ÿä *ÿ¥ŸàŸäÿ©*. ÿ®ÿ™ŸÉŸÖŸÑ ÿ≥Ÿàÿß ÿ®ÿ±ÿ©." }, { emoji: 'üìÑ', text: "<span class='highlight'>Ÿàÿ±ŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿµÿØŸäŸÇŸÉ ÿßŸÑÿµÿØŸàŸÇ:</span> ŸÖŸÅŸäÿ¥ ŸÑÿ≤ŸÇÿå ÿ™ŸÜÿ∂ŸäŸÅ ÿ≥ŸáŸÑÿå ŸÑŸàŸÜ ŸÖŸàÿ≠ÿØ." }, { emoji: 'ü•Ñ', text: "<span class='critical'>ÿπÿØŸàŸÉ: ÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ≤ŸäÿßÿØÿ©:</span> ÿ£ŸàŸÑ ŸÖÿß ÿßŸÑÿØŸÇŸäŸÇ ŸäÿÆÿ™ŸÅŸä ŸàŸÇŸëŸÅ. ÿÆŸÑÿ∑ ÿ≤ŸäÿßÿØÿ© = ŸÉŸàŸÉŸäÿ≤ ŸÜÿßÿ¥ŸÅÿ© Ÿàÿ≠ÿ≤ŸäŸÜÿ©." }, { emoji: '‚ú®', text: "<span class='highlight'>ÿßŸÑŸÅŸäŸÜÿ¥ ÿßŸÑÿ¥ŸäŸÉ: ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ:</span> ÿ±ÿ¥ÿ© ÿÆŸÅŸäŸÅÿ© *ŸÇÿ®ŸÑ* ÿßŸÑÿÆÿ®ÿ≤ ÿ®ÿ™ÿØŸä ÿ¥ŸÉŸÑ Ÿàÿ∑ÿπŸÖ ÿÆÿ∑Ÿäÿ±. ÿ¨ÿ±ÿ®!" }, { emoji: 'üç´', text: "<span class='highlight'>ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸáŸÖÿ©:</span> Ÿáÿßÿ™ ŸÜŸàÿπ ŸÜÿ∂ŸäŸÅ! ÿßÿÆŸÑÿ∑ ÿ£ŸÜŸàÿßÿπ." }, { emoji: 'ü•ú', text: "<span class='highlight'>ÿ™ÿ≠ŸÖŸäÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ®ŸäŸÅÿ±ŸÇ:</span> ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ (ŸÉŸÑÿßÿ≥ŸäŸÉ/ÿ≥ŸÖŸäŸÉÿ©) ÿ≠ŸÖŸëÿµŸáÿß (175¬∞ŸÖÿå 5-8 ÿØ) ŸÑÿ≠ÿØ ŸÖÿß ÿßŸÑÿ±Ÿäÿ≠ÿ© ÿ™ÿ∑ŸÑÿπ. ŸÅÿ±ŸÇ ÿßŸÑÿ≥ŸÖÿß ŸàÿßŸÑÿ£ÿ±ÿ∂!" }, { key: 'sci1', emoji: 'üî•', text: 'ÿπŸÑŸÖ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ©: ÿ™ŸÅÿßÿπŸÑ ŸÖŸäŸÑÿßÿ±ÿØ = ŸÜŸÉŸáÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™!' }, { key: 'sci2', emoji: 'ü•õ', text: 'ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ: ŸÖÿ≤ŸäÿØ ŸÖŸÜ ŸÖŸäŸÑÿßÿ±ÿØ! ÿ∑ÿ±ÿßŸàÿ© ŸàÿπŸÖŸÇ. ÿ¥ŸàŸäÿ© ÿ®ŸäŸÅÿ±ŸÇŸàÿß.' } ]
        }
    }; // --- END OF langData ---


    // --- HELPER FUNCTIONS ---

    /** Updates text content based on data-lang-key attribute */
    function updateTextContent() {
        const texts = langData[currentLang];
        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.dataset.langKey;
            // Skip elements handled specifically elsewhere
            const skipKeys = [
                'yieldInfo', 'keyDifferencesTitleBase', 'butterTitle', 'chillingTitle', 'otherNotesTitle',
                'ingredientsTitle', 'stepsTitle', 'scienceNoteTitle', 'easterEggTitle', 'easterEggIntro',
                'easterEggIdea', 'easterEggDesc', 'easterEggPistachioTip', 'pistachioReco', 'pistachioLinkSource',
                'placeholderSelect', 'typeClassic', 'typeThick', 'typeThin' // Button text handled separately
            ];
            // Also skip content inside dynamic sections that get fully replaced
            const isDynamicContent = el.closest('#recipe-details') || el.closest('#key-differences .diff-points') || el.closest('#easter-egg-container');

            if (skipKeys.includes(key) || isDynamicContent) { return; }

            if (texts && texts[key] !== undefined) {
                if (key === 'tipsTitle' && el.tagName === 'H3') {
                     el.innerHTML = `<span class="emoji">üí°</span> ${texts[key]} <span class="emoji">üî¨</span>`;
                } else {
                    el.innerHTML = texts[key];
                }
            }
        });
        // Update page title
        document.title = texts?.mainTitle?.replace(/<[^>]*>?/gm, '') || "Omar's Cookie Guide";
        // Update Cookie Button Text
        cookieTypeButtons.forEach(btn => {
            const type = btn.dataset.type;
            const textKey = `type${type.charAt(0).toUpperCase() + type.slice(1)}`; // e.g., typeClassic
            const buttonTextSpan = btn.querySelector('span:not(.emoji)');
            if (buttonTextSpan && texts[textKey]) { buttonTextSpan.textContent = texts[textKey]; }
        });
         // Update scaler static text
         const scalerTitle = document.querySelector('.recipe-scaler h3[data-lang-key="scalerTitle"]');
         const scalerDesc = document.querySelector('.recipe-scaler p[data-lang-key="scalerDesc"]');
         const scalerLabel = document.querySelector('.recipe-scaler label[data-lang-key="scalerLabel"]');
         const scalerButton = document.querySelector('.recipe-scaler button[data-lang-key="scalerButton"]');
         const scalerNote = document.querySelector('.recipe-scaler span[data-lang-key="scalerNote"]');
         if(scalerTitle && texts.scalerTitle) scalerTitle.innerHTML = texts.scalerTitle;
         if(scalerDesc && texts.scalerDesc) scalerDesc.innerHTML = texts.scalerDesc;
         if(scalerLabel && texts.scalerLabel) scalerLabel.innerHTML = texts.scalerLabel;
         if(scalerButton && texts.scalerButton) scalerButton.innerHTML = texts.scalerButton;
         if(scalerNote && texts.scalerNote) scalerNote.innerHTML = texts.scalerNote;
         // Update Key Differences static titles
         updateKeyDiffTitles(texts);
    }

    /** Updates the static titles within the key differences section */
    function updateKeyDiffTitles(texts) {
        if (!keyDifferencesContainer) return;
        const butterTitleSpan = keyDifferencesContainer.querySelector('.butter-diff h4 span:not(.emoji)');
        const chillingTitleSpan = keyDifferencesContainer.querySelector('.chilling-diff h4 span:not(.emoji)');
        const otherNotesTitleSpan = keyDifferencesContainer.querySelector('.other-diff h4 span:not(.emoji)');
        if (butterTitleSpan && texts.butterTitle) butterTitleSpan.textContent = texts.butterTitle;
        if (chillingTitleSpan && texts.chillingTitle) chillingTitleSpan.textContent = texts.chillingTitle;
        if (otherNotesTitleSpan && texts.otherNotesTitle) otherNotesTitleSpan.textContent = texts.otherNotesTitle;
    }

    /** Calculates and updates the yield info text */
    function updateYieldDisplay() {
        const yieldElement = document.querySelector('[data-lang-key="yieldInfo"]'); // Target the yield element
        if (!yieldElement) { console.error("Yield element not found!"); return; }

        const scaledMin = Math.max(1, Math.round(BASE_YIELD_MIN * currentScaleFactor));
        const scaledMax = Math.max(1, Math.round(BASE_YIELD_MAX * currentScaleFactor));
        const yieldTemplate = langData[currentLang]?.yieldInfo || "Yield: {min}-{max}"; // Get template
        let displayText = yieldTemplate.replace('{min}', scaledMin).replace('{max}', scaledMax); // Replace placeholders

        // Optional English pluralization (can be expanded for Arabic if needed)
        if (currentLang === 'en') {
            displayText = displayText.replace(/cookies|cookie/, scaledMax === 1 ? 'cookie' : 'cookies');
        }

        yieldElement.innerHTML = displayText; // Update the element
    }


    /** Generates HTML for unit toggle controls */
    function createUnitTogglesHTML() {
        if (!unitTogglesTemplate) return '';
        const wrapper = document.createElement('div');
        wrapper.className = 'unit-toggle-wrapper';
        const enToggle = unitTogglesTemplate.querySelector('.unit-selector[data-lang="en"]')?.cloneNode(true);
        const arToggle = unitTogglesTemplate.querySelector('.unit-selector[data-lang="ar"]')?.cloneNode(true);
        if (enToggle) wrapper.appendChild(enToggle);
        if (arToggle) wrapper.appendChild(arToggle);
        return wrapper.outerHTML;
    }

    /** Updates visibility and active state of unit toggles inside a container */
    function updateUnitTogglesState(container) {
        const wrapper = container?.querySelector('.unit-toggle-wrapper');
        if (!wrapper) return;
        const enSelector = wrapper.querySelector('.unit-selector[data-lang="en"]');
        const arSelector = wrapper.querySelector('.unit-selector[data-lang="ar"]');
        if (enSelector) enSelector.style.display = (currentLang === 'en') ? 'inline-block' : 'none';
        if (arSelector) arSelector.style.display = (currentLang === 'ar') ? 'inline-block' : 'none';
        wrapper.querySelectorAll('.unit-btn').forEach(btn => {
            const btnUnit = btn.dataset.unitType;
            const btnLang = btn.closest('.unit-selector')?.dataset.lang;
            if (!btnUnit || !btnLang) return;
            let isActive = (currentUnit === 'imperial')
                ? (btnLang === 'en' && btnUnit === 'imperial') || (btnLang === 'ar' && btnUnit === 'cups')
                : (btnLang === 'en' && btnUnit === 'metric') || (btnLang === 'ar' && btnUnit === 'grams');
            btn.classList.toggle('active', isActive);
        });
    }

     /** Generates HTML for ingredient list based on type, unit, lang, scale */
     function generateIngredientsHTML(type) {
        const texts = langData[currentLang]; const recipe = texts.recipes[type]; if (!recipe?.ingredients) return '<p>Ingredients data missing!</p>';
        const metricKey = (currentLang === 'ar') ? 'grams' : 'metric'; const imperialKey = (currentLang === 'ar') ? 'cups' : 'imperial';
        const unitKey = (currentUnit === 'imperial') ? imperialKey : metricKey;
        const nonScalableKeys = ['eggs','vanilla','extra_liquid','leavening_soda','leavening_powder','salt'];
        let ingredientsHtml = '';
        recipe.ingredients.forEach(ing => {
            let measurement = ing[unitKey] || ing.metric || ing.grams || ing.imperial || ing.cups || 'N/A';
            const originalMeasurement = measurement;
            if (unitKey === metricKey && currentScaleFactor !== 1 && !nonScalableKeys.includes(ing.key)) {
                const gramMarker = (currentLang === 'ar') ? 'ÿ¨ÿ±ÿßŸÖ' : 'g'; const gramRegexBase = `(\\d+(\\.\\d+)?)\\s*${gramMarker}`;
                 try {
                     if (ing.key === 'butter') {
                         const scaledButter = Math.round(STANDARD_BUTTER_GRAMS * currentScaleFactor);
                         const standardButterRegex = new RegExp(`(${STANDARD_BUTTER_GRAMS})\\s*${gramMarker}`);
                         measurement = standardButterRegex.test(originalMeasurement) ? originalMeasurement.replace(standardButterRegex, `${scaledButter}${gramMarker}`) : measurement;
                     } else {
                         const rangeRegex = new RegExp(`(\\d+(\\.\\d+)?)\\s*-\\s*(\\d+(\\.\\d+)?)\\s*${gramMarker}`);
                         const rangeMatch = originalMeasurement.match(rangeRegex);
                         if (rangeMatch && rangeMatch[1] && rangeMatch[3]) {
                             const scaledMin = Math.round(parseFloat(rangeMatch[1]) * currentScaleFactor);
                             const scaledMax = Math.round(parseFloat(rangeMatch[3]) * currentScaleFactor);
                             measurement = originalMeasurement.replace(rangeMatch[0], `${scaledMin}-${scaledMax}${gramMarker}`);
                         } else {
                             measurement = originalMeasurement.replace(new RegExp(gramRegexBase, 'g'), (match, p1) => `${Math.round(parseFloat(p1) * currentScaleFactor)}${gramMarker}`);
                         }
                     }
                 } catch (e) { console.error(`Error scaling ingredient '${ing.key}': ${e}. Original: ${originalMeasurement}`); measurement = originalMeasurement; }
             }
            ingredientsHtml += `<li data-emoji="${ing.emoji || 'üç™'}">${measurement}</li>`;
        });
        return ingredientsHtml;
    }

    /** Populates the Key Differences section (points only) */
    function populateKeyDifferencePoints(type) {
        const texts = langData[currentLang];
        const diffs = texts.diffs?.[type];
        if (!diffs || !keyDiffPointsContainer) { console.warn("Key diff points container/data missing."); return; }

        const butterP = keyDiffPointsContainer.querySelector('.butter-diff p');
        const chillingP = keyDiffPointsContainer.querySelector('.chilling-diff p');
        const otherP = keyDiffPointsContainer.querySelector('.other-diff p');

        if (butterP) butterP.innerHTML = diffs.butterMethod || ''; else console.warn("Butter diff <p> not found");
        if (chillingP) chillingP.innerHTML = diffs.chillingMethod || ''; else console.warn("Chilling diff <p> not found");
        if (otherP) otherP.innerHTML = diffs.otherNotes || ''; else console.warn("Other notes <p> not found");
    }

    /** Generates complete HTML for Recipe Details section's INNER content */
     function generateRecipeHTML(type) {
        const texts = langData[currentLang]; const recipe = texts.recipes?.[type]; if (!recipe) return '<p>Recipe data not found!</p>';
        const unitTogglesHtml = createUnitTogglesHTML(); let stepsHtml = ''; let scienceNoteHtml = ''; let toastMethodHtml = '';
        const toastDescKey = `howToToastMilkPowderDesc`;
        const toastTitleKey = `howToToastMilkPowderTitle`;
        const toastDesc = texts[toastDescKey] || '';
        const toastTitle = texts[toastTitleKey] || '';
        if (toastDesc) { toastMethodHtml = `<li class='note step-note'><strong>${toastTitle}</strong> ${toastDesc}</li>`; }
        stepsHtml = recipe.steps.map(step => `<li>${step}</li>`).join('') + toastMethodHtml;
        let ingredientsHtml = generateIngredientsHTML(type);
        if (recipe.scienceNote) { scienceNoteHtml = `<div class="science-note"><h4><span class="emoji">üî¨</span> <span data-lang-key="scienceNoteTitle">${texts.scienceNoteTitle || 'Science!'}</span></h4><p>${recipe.scienceNote}</p></div>`; }
        return `
            <div class="recipe-content-area">
                <h3>${recipe.title || 'Cookie Recipe'}</h3>
                ${unitTogglesHtml}
                <h4 class="list-header" data-lang-key="ingredientsTitle">${texts.ingredientsTitle || 'Ingredients'}</h4>
                <ul class="ingredient-list">${ingredientsHtml}</ul>
                <h4 class="list-header" data-lang-key="stepsTitle">${texts.stepsTitle || 'Steps'}</h4>
                <ol class="steps-list">${stepsHtml}</ol>
                ${scienceNoteHtml}
            </div>`;
    }

    /** Generates complete HTML for Easter Egg section's INNER content */
    function generateEasterEggHTML(type) {
        if (type !== 'thick') return '';
        const texts = langData[currentLang]; const stuffedImgSrc = IMAGE_PATHS.stuffed || '';
        return `
             <h3 data-lang-key="easterEggTitle">${texts.easterEggTitle}</h3>
             <div class="easter-egg-content">
                 <p data-lang-key="easterEggIntro">${texts.easterEggIntro}</p>
                 <strong data-lang-key="easterEggIdea">${texts.easterEggIdea}</strong>
                 <p data-lang-key="easterEggDesc">${texts.easterEggDesc}</p>
                 <img id="stuffed-cookie-image" src="${stuffedImgSrc}" alt="${texts.easterEggIdea || 'Stuffed Cookie'}">
                 <p data-lang-key="easterEggPistachioTip">${texts.easterEggPistachioTip}</p>
                  <ul><li><span data-lang-key="pistachioReco">${texts.pistachioReco}</span> <a href="https://www.amazon.eg/-/en/Pistachio-spread-Irresistible-Luxurious-Goodness/dp/B0D9C3BDV2/" target="_blank" rel="noopener noreferrer">ASMACUP Pistachio Cream</a> <span data-lang-key="pistachioLinkSource">${texts.pistachioLinkSource}</span></li></ul>
             </div>`;
     }

    /** Generates and updates the Pro Tips list */
    function displayTips() {
        const texts = langData[currentLang]; if (!texts?.tips || !tipsList) return;
        tipsList.innerHTML = texts.tips.map(tip => `<li data-emoji="${tip.emoji || 'üí°'}">${tip.text}</li>`).join('');
        const tipBoxTitle = document.querySelector('.tip-box h3[data-lang-key="tipsTitle"]');
        if (tipBoxTitle && texts.tipsTitle) { tipBoxTitle.innerHTML = `<span class="emoji">üí°</span> ${texts.tipsTitle} <span class="emoji">üî¨</span>`; }
    }

    /** Hides dynamic sections and shows the placeholder text inside #recipe-details */
    function showPlaceholderContent() {
        const sectionsToMakeHidden = [keyDifferencesContainer, recipeDetailsContainer, easterEggContainer];
        sectionsToMakeHidden.forEach(section => {
            if (section) {
                section.classList.remove('visible');
                section.classList.add('visually-hidden');
                // Clear dynamic content but leave structure for KeyDiffs
                 if (section.id === 'recipe-details' || section.id === 'easter-egg-container') {
                    section.innerHTML = ''; // Clear fully
                } else if (section.id === 'key-differences') {
                    const pointsContainer = section.querySelector('.diff-points');
                    if(pointsContainer) pointsContainer.innerHTML = ''; // Clear points only
                     // Optionally reset the title span here too
                     const nameSpan = section.querySelector('.dynamic-cookie-name');
                     if(nameSpan) nameSpan.textContent = 'Cookie'; // Reset placeholder name
                }
            }
        });

        // Ensure Recipe container shows placeholder
        if (recipeDetailsContainer) {
             recipeDetailsContainer.innerHTML = `<div class="placeholder visible" data-lang-key="placeholderSelect">${langData[currentLang]?.placeholderSelect || 'Select a style!'}</div>`;
             recipeDetailsContainer.className = 'recipe-container'; // Reset theme
             recipeDetailsContainer.classList.remove('visually-hidden'); // Show container
             recipeDetailsContainer.classList.add('visible');
         }

        if(heroCookieImage){ heroCookieImage.src = IMAGE_PATHS.comparison || ''; heroCookieImage.alt = "Comparison of cookie types"; heroCookieImage.classList.remove(IMAGE_CLASS_SELECTED); }
        cookieTypeButtons.forEach(btn => btn.classList.remove('active'));
        if(omarsFavText) omarsFavText.classList.add('visually-hidden');
        selectedCookieType = null;
    }


    /** Main function to display content for a selected cookie type */
    function displaySelectedCookieContent(type) {
         if (!type || !langData[currentLang]?.recipes[type]) { console.error("Invalid cookie type:", type); showPlaceholderContent(); return; }
         selectedCookieType = type;

         // 1. Generate Content (Inner HTML)
         const recipeContentHTML = generateRecipeHTML(type);
         const easterEggContentHTML = generateEasterEggHTML(type);

         // 2. Update Key Differences Section
         if (keyDifferencesContainer) {
             const texts = langData[currentLang];
             const titleBase = texts.keyDifferencesTitleBase || 'Key Differences for';
             const diffsData = texts.diffs[type];
             const cookieName = diffsData?.name || type;
             if (keyDiffTitleH3 && keyDiffNameSpan) {
                 keyDiffTitleH3.firstChild.nodeValue = `${titleBase} `;
                 keyDiffNameSpan.textContent = cookieName;
             }
             populateKeyDifferencePoints(type); // Populate the <p> tags
         }

         // 3. Update Recipe Details Section
         if (recipeDetailsContainer) {
             recipeDetailsContainer.innerHTML = recipeContentHTML;
             const theme = langData[currentLang].recipes[type]?.theme || '';
             recipeDetailsContainer.className = `recipe-container ${theme}`; // Apply theme
         }

         // 4. Update Easter Egg Section
         if (easterEggContainer) {
             easterEggContainer.innerHTML = easterEggContentHTML;
         }

         // 5. Add Event Listeners
         if (recipeDetailsContainer) {
             recipeDetailsContainer.removeEventListener('click', handleUnitChangeDelegation);
             recipeDetailsContainer.addEventListener('click', handleUnitChangeDelegation);
         }

         // --- Visibility & Transitions ---
         setTimeout(() => {
            const sectionsToMakeVisible = [keyDifferencesContainer, recipeDetailsContainer];
            if (easterEggContainer && easterEggContentHTML) { sectionsToMakeVisible.push(easterEggContainer); }

            sectionsToMakeVisible.forEach(section => {
                 if (section && section.innerHTML.trim() !== '') {
                      section.classList.remove('visually-hidden');
                      section.classList.add('visible');
                 } else if (section) {
                     section.classList.remove('visible');
                     section.classList.add('visually-hidden');
                 }
            });

            // Update unit toggles state AFTER recipe container is visible
            if (recipeDetailsContainer) { updateUnitTogglesState(recipeDetailsContainer); }

         }, 50); // Short delay

         // Update Hero Image
         const imagePath = IMAGE_PATHS[type] || IMAGE_PATHS.comparison;
         if(heroCookieImage){ heroCookieImage.src = imagePath || ''; heroCookieImage.alt = langData[currentLang]?.recipes[type]?.title || `${type} cookie`; heroCookieImage.classList.toggle(IMAGE_CLASS_SELECTED, !!imagePath && imagePath !== IMAGE_PATHS.comparison); }

        // Update Omar's Fave Badge Visibility
        const isThick = (type === 'thick');
        if(omarsFavText){ omarsFavText.classList.toggle('visible', isThick); omarsFavText.classList.toggle('visually-hidden', !isThick); }
     }


    // --- EVENT HANDLERS ---

    function handleLanguageChange(event) {
        const newLang = event.target.dataset.lang; if (newLang === currentLang || !langData[newLang]) return;
        currentLang = newLang; document.documentElement.lang = currentLang; body.dir = (currentLang === 'ar') ? 'rtl' : 'ltr';
        updateTextContent(); // Updates static text, scaler text, button text, static titles
        updateYieldDisplay();
        displayTips();
        langButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.lang === currentLang));
        if (selectedCookieType) { displaySelectedCookieContent(selectedCookieType); }
        else { showPlaceholderContent(); } // Update placeholder text
    }

    function handleScaleUpdate() {
         if (!butterAmountInput) { console.error("Scaler input not found!"); return; }
         let newButterAmount = parseFloat(butterAmountInput.value);
         if (isNaN(newButterAmount) || newButterAmount < 50) { newButterAmount = STANDARD_BUTTER_GRAMS; alert(langData[currentLang]?.scalerAlertInvalid || (currentLang === 'ar' ? "ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ© (ÿ£ŸÇŸÑ ÿ≠ÿØ 50 ÿ¨ÿ±ÿßŸÖ). ÿßŸÑÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸàÿ∂ÿπ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä." : "Invalid butter amount (min 50g). Resetting to default.")); }
         currentScaleFactor = newButterAmount / STANDARD_BUTTER_GRAMS; butterAmountInput.value = Math.round(newButterAmount);
         updateYieldDisplay();
         if (selectedCookieType && recipeDetailsContainer) { const ingredientsList = recipeDetailsContainer.querySelector('.ingredient-list'); if (ingredientsList) { ingredientsList.innerHTML = generateIngredientsHTML(selectedCookieType); console.log("Ingredients updated for scaling."); } else { console.warn("Ingredient list element not found for scaling update."); } } else if (selectedCookieType) { console.warn("Recipe details container not found for scaling update."); }
         console.log(`Scale Factor: ${currentScaleFactor.toFixed(3)}`);
    }

    function handleCookieTypeSelect(event) {
         const button = event.currentTarget; if (!button) return; const type = button.dataset.type;
         if (button.classList.contains('active') && selectedCookieType === type) return;
         cookieTypeButtons.forEach(btn => btn.classList.remove('active')); button.classList.add('active');
         displaySelectedCookieContent(type); // This handles showing all relevant content
    }

    function handleUnitChangeDelegation(event) {
        const button = event.target.closest('.unit-btn'); if (!button || !event.currentTarget.contains(button)) return;
        const newUnitType = button.dataset.unitType; const buttonLang = button.closest('.unit-selector')?.dataset.lang; if (!buttonLang || !newUnitType) return;
        const newUnit = ((buttonLang === 'en' && newUnitType === 'imperial') || (buttonLang === 'ar' && newUnitType === 'cups')) ? 'imperial' : 'metric';
        if (newUnit !== currentUnit) {
             currentUnit = newUnit; console.log(`Unit changed to: ${currentUnit}`);
             const ingredientsList = recipeDetailsContainer?.querySelector('.ingredient-list');
             if (ingredientsList && selectedCookieType) { ingredientsList.innerHTML = generateIngredientsHTML(selectedCookieType); console.log("Ingredients updated for unit change."); } else if(selectedCookieType) { console.warn("Ingredient list not found for unit change update."); }
             updateUnitTogglesState(recipeDetailsContainer);
         } else {
              updateUnitTogglesState(recipeDetailsContainer); // Update active state even if unit didn't change
         }
     }

    // --- INITIALIZATION ---
    function initialize() {
        console.log("Initializing Final Hybrid Omar's Cookie Lab with Original CSS!");
        document.documentElement.lang = currentLang; body.dir = (currentLang === 'ar') ? 'rtl' : 'ltr';
        langButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.lang === currentLang));

        // Add event listeners to STATIC elements
        langButtons.forEach(btn => btn.addEventListener('click', handleLanguageChange));
        cookieTypeButtons.forEach(button => { button.addEventListener('click', handleCookieTypeSelect); button.addEventListener('keypress', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); handleCookieTypeSelect(e); } }); });
        if (updateScaleBtn) { updateScaleBtn.addEventListener('click', handleScaleUpdate); }
        if (butterAmountInput) {
            butterAmountInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { e.preventDefault(); handleScaleUpdate();} });
            butterAmountInput.addEventListener('change', handleScaleUpdate);
            butterAmountInput.value = STANDARD_BUTTER_GRAMS; // Set initial value
        }

        // Initial Page Setup
        updateTextContent(); // Set static text, button text, static titles
        updateYieldDisplay(); // Set initial yield
        displayTips(); // Display initial tips
        showPlaceholderContent(); // Start with placeholder visible & dynamic sections hidden

        body.classList.add('loaded'); // Trigger fade-in
    }

    // --- RUN INITIALIZATION ---
    initialize();

}); // --- END OF DOMContentLoaded ---

// ==== END OF FINAL HYBRID SCRIPT.JS ====
