document.addEventListener('DOMContentLoaded', () => {
    // --- CONFIGURATION ---
    const DEFAULT_LANG = 'en';
    const DEFAULT_UNIT = 'metric'; // Default to grams
    const STANDARD_BUTTER_GRAMS = 226;
    const BASE_YIELD_MIN = 18;
    const BASE_YIELD_MAX = 24;
    const IMAGE_CLASS_SHRUNK = 'shrunk-hero'; // Class to shrink hero image

    // --- IMAGE PATHS (Relative to HTML file) ---
    const IMAGE_PATHS = {
        classic: 'classic.webp',
        thick: 'thick_and_gooey.webp',
        thin: 'thin-and-crispy.webp', // Ensure filenames match exactly
        comparison: '3-cookie-types.jpg',
        stuffed: 'stuffed_cookie.webp'
    };

    // --- DOM ELEMENTS ---
    const body = document.body;
    const mainTitleH1 = document.getElementById('main-title-h1');
    const langButtons = document.querySelectorAll('.lang-btn');
    const yieldInfoDisplay = document.getElementById('yield-info-display');
    const unitTogglesTemplate = document.getElementById('unit-toggles-template');
    const heroCookieImage = document.getElementById('hero-cookie-image');
    const recipeScalerSection = document.getElementById('recipe-scaler-section');
    const butterAmountInput = document.getElementById('butter-amount-input');
    const updateScaleBtn = document.getElementById('update-scale-btn');
    const cookieTypeSelector = document.querySelector('.cookie-type-selector');
    const cookieCards = cookieTypeSelector.querySelectorAll('.cookie-card');
    // Dynamic content containers
    const dynamicContentWrapper = document.querySelector('.dynamic-content-wrapper');
    const contentPlaceholder = dynamicContentWrapper.querySelector('.content-placeholder');
    const keyDifferencesContainer = document.getElementById('key-differences');
    const recipeDetailsContainer = document.getElementById('recipe-details');
    const easterEggContainer = document.getElementById('easter-egg-container');
    // Specific dynamic elements
    const keyDiffTitleH3 = keyDifferencesContainer?.querySelector('h3'); // Includes span
    const keyDiffPointsDiv = keyDifferencesContainer?.querySelector('.diff-points');
    const stuffedCookieImage = easterEggContainer?.querySelector('#stuffed-cookie-image');
    const omarsFavBadge = document.querySelector('.omars-fav-badge'); // Specific badge
    const tipsList = document.getElementById('tips-list');
    const scrollFadeElements = document.querySelectorAll('.fade-in-on-scroll');

    // --- STATE ---
    let currentLang = DEFAULT_LANG;
    let currentUnit = DEFAULT_UNIT;
    let selectedCookieType = null;
    let currentScaleFactor = 1;
    let activeSection = contentPlaceholder; // Track currently visible dynamic section

    // --- DATA Store (Comprehensive - Merge EN/AR from final drafts) ---
    const langData = {
        en: {
            mainTitle: "üç™ Omar's Insanely Good Cookie Guide! üç™", omarsFavText: "Omar's Fave! üòâ",
            yieldInfoTemplate: "Whips up about {min}-{max} cookies üç™",
            unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:", // Keep both labels
            chooseStyle: "Alright, Cookie Boss! Pick Your Cookie Destiny:",
            typeClassic: "Classic Balanced", typeClassicDesc: "The reliable, chewy crowd-pleaser.",
            typeThick: "Thick & Gooey", typeThickDesc: "Big, soft, ultra decadent centre.",
            typeThin: "Thin & Crispy", typeThinDesc: "Maximum snap, buttery delight.",
            keyDifferencesTitleBase: "üîë Key Differences for ",
            butterTitle: "Brown Butter State & Mixing", chillingTitle: "Chilling Method", otherNotesTitle: "Other Key Notes",
            placeholderSelect: "üëÜ Select a cookie style above to load the recipe and details! ‚ú®",
            ingredientsTitle: "ü•£ Ingredients (The Good Stuff)", stepsTitle: "üìù Steps (Let's Bake!)",
            scienceNoteTitle: "The Science Bit! (Nerd Out!)", // Emoji removed as per CSS
            toastNutsTitle: "Optional Power-Up: Toast Nuts?", toastNutsDesc: "Toasting nuts (pecans/walnuts are great!) at 350¬∞F/175¬∞C for 5-8 mins unlocks deeper, nuttier flavor dimensions. Totally worth the tiny extra step!",
            howToToastMilkPowderTitle: "ü§î How *Do* You Toast Milk Powder?", howToToastMilkPowder: "Super easy! Spread 3-4 Tbsp milk powder (the regular kind!) in a <span class='highlight'>dry skillet</span> (no oil!). Put it on <span class='highlight'>LOW heat</span> and <span class='critical'>STIR CONSTANTLY</span>. Seriously, don't even blink. It'll start smelling nutty and turn a light golden brown in 3-5 minutes. Whip it off the heat IMMEDIATELY (it burns fast!) and let it cool completely. BOOM. Flavor unlocked.",
            easterEggTitle: "üèÜ You Legend! Picked GOOEY! üèÜ", easterEggIntro: "Okay, you've got taste! Ready for the Level 2 Boss?", easterEggIdea: "üî• STUFFED COOKIES! üî•",
            easterEggDesc: "Dead easy: Make a dent in your THICK cookie dough ball, plop in ~1 tsp Nutella/Lotus/Pistachio cream, seal it up like a secret treasure, then bake as usual!",
            easterEggPistachioTip: "Seriously, TRUST the pistachio! It's a game-changer.", pistachioReco: "Best Spread IMHO:", pistachioLinkSource: "(Amazon EG link)",
            tipsTitle: "üí° Omar's Pro Tips! (Level Up Your Cookie Game)",
            finalTag: "Nailed it? Wanna show off? Tag me! @omarisavibe üòÑ",
            scalerTitle: "üßà Customize Your Batch Size!",
            scalerDesc: "Enter your starting butter amount (grams) to scale the metric recipe.",
            scalerLabel: "Starting Butter (g):",
            scalerButton: "Update Scale",
            scalerNote: "Note: Only metric (gram) values are scaled. Imperial (cup) units are approximate.",
            diffs: { /* Include full diffs from latest draft */
                 classic: { name: "Classic Balanced", butterMethod: "Use <span class='highlight'>COOLED but LIQUID</span> Brown Butter. Whisk with sugars (no heavy creaming needed).", chillingMethod: "<span class='highlight'>RECOMMENDED Chill:</span> 30 mins - 24 hrs. Improves flavor and texture.", otherNotes: "Standard flour amount (~300g). Includes baking powder for lift. Optional toasted nuts add amazing texture!" },
                 thick: { name: "Thick & Gooey", butterMethod: "Use <span class='critical'>CHILLED SOLID</span> Brown Butter. <span class='critical'>Cream</span> this with sugars until very light and fluffy (3-5 mins).", chillingMethod: "<span class='critical'>MANDATORY Long Chill:</span> 24 - 72 hrs. The SECRET to thickness & deep flavor!", otherNotes: "Use <span class='highlight'>MORE flour</span> (~310-330g). Baking powder + optional cornstarch for softness. Toasted nuts highly recommended!" },
                 thin: { name: "Thin & Crispy", butterMethod: "Use <span class='critical'>WARM LIQUID</span> Brown Butter. Whisk with sugars.", chillingMethod: "<span class='critical'>SKIP Chilling!</span> Bake immediately for maximum spread.", otherNotes: "Use <span class='highlight'>LESS flour</span> (~280-300g). <span class='critical'>OMIT baking powder.</span> More white sugar aids crispness." }
            },
            recipes: { /* Include full recipes with correct ingredient keys (imperial/metric) */
                classic: { title: "Classic Balanced Cookies", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">COOLED but LIQUID</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups brown sugar, packed', metric: '250g brown sugar, packed' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup granulated sugar', metric: '100g granulated sugar' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 cups all-purpose flour', metric: '300g all-purpose flour' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '3-4 Tbsp toasted milk powder', metric: '30-40g toasted milk powder (Optional, adds chew!)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' }, { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt (or 3g table salt)' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '1.5 - 2 cups chocolate chips/chunks', metric: '255-340g chocolate chips/chunks <span class="note">(Good MILK chocolate recommended!)</span>' }, { key: 'nuts', emoji: 'ü•ú', imperial: '1/2 - 1 cup toasted nuts', metric: '50-100g toasted nuts (Optional - Pecans/Walnuts!)' }], steps: [ 'Universal Prep: Brown the butter & let cool until <span class="critical">liquid but not hot</span>. Toast milk powder (if using). Whisk dry ingredients (flour, milk powder, leavening, salt). Toast nuts (350¬∞F/175¬∞C, 5-8 min) if using.', 'Whisk <span class="highlight">liquid brown butter</span> & sugars.', 'Beat in eggs (one by one), then vanilla.', 'Gradually mix dry until JUST combined. <span class="critical">No overmixing!</span>', 'Stir in chocolate <span class="highlight">and toasted nuts (if using).</span>', '<span class="highlight">Chill Dough (Recommended):</span> Cover & chill <span class="highlight">30 mins+</span> (up to 24 hrs).', 'Preheat oven <span class="highlight">375¬∞F (190¬∞C)</span>. Line sheets.', 'Scoop <span class="highlight">~2 Tbsp</span> balls. Add flaky salt (optional).', 'Bake <span class="highlight">10-12 min</span> (golden edges).', 'Cool on pan 5-10 min, then rack. Enjoy! üéâ' ], scienceNote: "Cooled liquid brown butter adds nutty flavor without the airiness of creaming. Chilling recommended for texture. Baking powder gives a little extra lift. Milk powder/nuts enhance depth." },
                thick: { title: "Thick & Gooey Cookies", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">CHILLED SOLID (scoopable)</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/2 cups brown sugar, packed', metric: '300g brown sugar, packed (More brown!)' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/4 cup granulated sugar', metric: '50g granulated sugar (Less white!)' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/2 - 2 3/4 cups all-purpose flour', metric: '310-330g all-purpose flour (More flour!)' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '3-4 Tbsp toasted milk powder', metric: '30-40g toasted milk powder (Optional)' }, { key: 'starch', emoji: '‚≠ê', imperial: '1-2 Tbsp cornstarch', metric: '8-16g cornstarch (Optional, for softness)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda' }, { key: 'leavening_powder', emoji: '‚ú®', imperial: '1/2 tsp baking powder', metric: '2g baking powder' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '2+ cups chocolate chips/chunks', metric: '340g+ chocolate chips/chunks <span class="note">(Go generous! Good MILK chocolate!)</span>' }, { key: 'nuts', emoji: 'ü•ú', imperial: '1/2 - 1 cup toasted nuts', metric: '50-100g toasted nuts (Highly Recommended - Pecans/Walnuts!)' }], steps: [ 'Universal Prep: Brown the butter & <span class="critical">chill until SOLID</span> but scoopable. Toast milk powder (if using). Whisk dry ingredients (flour, milk powder, cornstarch, leavening, salt). Toast nuts (if using).', '<span class="critical">CREAM</span> the chilled solid brown butter with both sugars until very light & fluffy (3-5 mins). Don\'t skimp!', 'Beat in eggs one at a time, then vanilla.', 'Gradually mix in the <span class="highlight">higher amount</span> of dry ingredients until JUST combined. <span class="critical">NO OVERMIXING!</span>', 'Stir in a <span class="highlight">generous</span> amount of chocolate <span class="highlight">and toasted nuts (if using).</span>', '<span class="critical">CHILL DOUGH (MANDATORY):</span> Cover & chill for <span class="critical">24 - 72 hours</span>. This is non-negotiable for thickness and flavor!', 'Preheat oven to <span class="highlight">375¬∞F (190¬∞C)</span> (can start higher like 400¬∞F/200¬∞C for first few mins). Line sheets.', 'Scoop <span class="critical">LARGE (~3-4 Tbsp)</span> balls. Keep <span class="highlight">TALL!</span> Don\'t flatten. Optional: flaky salt.', 'Bake <span class="highlight">12-15 minutes</span>. Edges must be set, centers look <span class="critical">soft/slightly underdone</span>.', 'Cool on pan <span class="critical">10-15 min MINIMUM</span> to set, then transfer to wire rack. The GOOEY prize awaits! üòç' ], scienceNote: "Creaming SOLID chilled brown butter incorporates lots of air for thickness. The long chill is KEY for hydration and preventing spread. More flour + cornstarch = ultimate chew/softness. Nuts=texture contrast." },
                thin: { title: "Thin & Crispy Cookies", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', imperial: '1 cup (2 sticks) brown butter', metric: '226g brown butter, <span class="critical note">WARM LIQUID</span>' }, { key: 'sugar', emoji: 'üç¨', imperial: '1 1/4 cups granulated sugar', metric: '250g granulated sugar (More white!)' }, { key: 'sugar_gran', emoji: 'üçö', imperial: '1/2 cup brown sugar, packed', metric: '100g brown sugar, packed (Less brown!)' }, { key: 'flour', emoji: 'üåæ', imperial: '2 1/4 - 2 1/2 cups all-purpose flour', metric: '280-300g all-purpose flour (Less flour!)' }, { key: 'milkpowder', emoji: 'ü•õ', imperial: '3-4 Tbsp toasted milk powder', metric: '30-40g toasted milk powder (Optional)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', imperial: '1 tsp baking soda', metric: '5g baking soda <span class="critical note"> (NO baking powder!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', imperial: '1-2 Tbsp milk', metric: '15-30ml milk (Optional, for extra spread)' }, { key: 'salt', emoji: 'üßÇ', imperial: '1 tsp Kosher salt', metric: '6g Kosher salt' }, { key: 'eggs', emoji: 'ü•ö', imperial: '2 large eggs', metric: '2 large eggs (~100g), room temp (+ Optional extra Yolk for chew)' }, { key: 'vanilla', emoji: 'üè∫', imperial: '2 tsp vanilla extract', metric: '10ml vanilla extract' }, { key: 'choco', emoji: 'üç´', imperial: '1.5 cups chocolate chips/chunks', metric: '255g chocolate chips/chunks <span class="note">(Minis work well! Good MILK chocolate!)</span>' }], steps: [ 'Universal Prep: Brown the butter & keep it <span class="critical">warm liquid</span>. Toast milk powder (if using). Whisk dry ingredients (flour, milk powder, <span class="highlight">soda ONLY</span>, salt).', 'Whisk the <span class="highlight">warm brown butter</span> with both sugars (adjusted ratio) until combined.', 'Beat in eggs (and optional yolk/milk), then vanilla.', 'Gradually mix in the <span class="highlight">lower amount</span> of dry ingredients until JUST combined. <span class="critical">NO OVERMIXING!</span>', 'Stir in chocolate chips/chunks.', '<span class="critical">DO NOT CHILL.</span> Bake immediately for maximum spread!', 'Preheat oven lower: <span class="highlight">350¬∞F (175¬∞C)</span>. Line baking sheets.', 'Scoop <span class="highlight">smaller (~1.5-2 Tbsp)</span> balls. Place <span class="critical">FAR APART!</span> Can flatten slightly if desired.', 'Bake <span class="highlight">12-15 minutes</span> until golden brown and fully set for crispness.', 'Cool on pan 5 min, then transfer to wire rack. They will crisp up significantly as they cool completely! ‚ú®' ], scienceNote: "Warm liquid brown butter + more white sugar + less flour + soda only + no chill = SUPER SPREAD! Lower/longer bake time ensures they dry out for that satisfying snap." }
             },
            tips: [ /* Include full tips list from latest draft */
                 { emoji: '‚öñÔ∏è', text: "<span class='highlight'>Measure Flour Like a Pro:</span> Spoon & level, don't scoop! OR just use a scale (grams = KING). Avoids dry cookies." },
                 { emoji: 'ü•ö', text: "<span class='highlight'>Room Temp Ingredients Rule:</span> Eggs & butter mix way better when not fridge-cold. Quick fix: warm water bath for eggs!" },
                 { emoji: 'üßà', text: "<span class='highlight'>Brown Butter State is CRITICAL:</span> Cooled Liquid, Chilled Solid, or Warm Liquid - it dictates the texture! Pay attention!" },
                 { emoji: 'ü•∂', text: "<span class='critical'>Respect the Chill Time!:</span> Seriously, for thick/gooey it's non-negotiable. Builds flavour, prevents cookie puddles. DO IT." },
                 { emoji: 'üî•', text: "<span class='highlight'>Know Thy Oven:</span> They lie! An oven thermometer is cheap. Rotate pans if needed for even baking glory." },
                 { emoji: 'üç™', text: "<span class='highlight'>Don't Cremate Your Cookies:</span> Pull 'em out when edges are set/golden & centers look *slightly* underdone. Carryover cooking is real!" },
                 { emoji: 'üìÑ', text: "<span class='highlight'>Use Parchment Paper:</span> Prevents sticking, easy cleanup, promotes even browning. Your baking BFF." },
                 { emoji: 'ü•Ñ', text: "<span class='critical'>The Enemy: Overmixing Flour:</span> Mix JUST until flour disappears. More mixing = tough, sad cookies. Be gentle!" },
                 { emoji: '‚ú®', text: "<span class='highlight'>Fancy Finish: Flaky Sea Salt:</span> A tiny sprinkle *before* baking adds magic sparkle & flavor pop. Highly recommend!" },
                 { emoji: 'üç´', text: "<span class='highlight'>Chocolate Matters:</span> Use good stuff! Dropsy Milk is great! Mix types (chips & chopped bars) for texture variation." },
                 { emoji: 'ü•ú', text: "<span class='highlight'>Toasting Nuts = Flavor Boost:</span> Don't skip toasting nuts (if using Classic/Thick) - 350¬∞F/175¬∞C for 5-8 mins until fragrant. HUGE difference!" },
                 { key: 'sci1', emoji: 'üî•', text: 'Brown Butter Science: Maillard reaction = nutty flavor! Universal upgrade.' },
                 { key: 'sci2', emoji: 'ü•õ', text: 'Toasted Milk Powder: More Maillard! Extra chew/depth. Small amount makes a diff.' }
            ]
        },
        ar: { /* Include FULL ARABIC translations mirroring EN structure */
             mainTitle: "üç™ ÿØŸÑŸäŸÑ ÿπŸÖÿ± ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿÆÿ±ÿßŸÅŸäÿ©! üç™", omarsFavText: "ŸÖŸÅÿ∂ŸÑÿßÿ™ ÿπŸÖÿ±! üòâ",
             yieldInfoTemplate: "ÿ®ÿ™ÿπŸÖŸÑ ÿ≠ŸàÿßŸÑŸä {min}-{max} ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤ üç™",
             unitLabelEn: "Units:", unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
             chooseStyle: "ÿ™ŸÖÿßŸÖ Ÿäÿß ŸÖÿπŸÑŸÖ ÿßŸÑŸÉŸàŸÉŸäÿ≤! ÿßÿÆÿ™ÿßÿ± ŸÖÿ≤ÿßÿ¨ŸÉ (ŸäÿπŸÜŸä ÿßŸÑÿ≥ÿ™ÿßŸäŸÑ!):",
             typeClassic: "ŸÉŸÑÿßÿ≥ŸäŸÉ ŸÖÿ™Ÿàÿßÿ≤ŸÜ", typeClassicDesc: "ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜÿ© ŸÖÿ≠ÿ®Ÿàÿ®ÿ© ÿßŸÑÿ¨ŸÖÿßŸáŸäÿ±.",
             typeThick: "ÿ≥ŸÖŸäŸÉÿ© Ÿà ÿ∫ÿ±ŸÇÿßŸÜÿ©", typeThickDesc: "ÿßŸÑÿ®Ÿäÿ¨ ÿ≥ŸàŸÅÿ™Ÿäÿå ÿ∫ŸÜŸäÿ© ÿ¨ÿØÿßŸã.",
             typeThin: "ÿ±ŸÅŸäÿπÿ© ŸàŸÖŸÇÿ±ŸÖÿ¥ÿ©", typeThinDesc: "ÿ£ŸÇÿµŸâ ŸÇÿ±ŸÖÿ¥ÿ©ÿå ŸÖÿ™ÿπÿ© ÿ≤ÿ®ÿØŸäÿ©.",
             keyDifferencesTitleBase: "üîë ÿßŸÑŸÅÿ±ŸàŸÇÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑŸÉŸàŸÉŸäÿ≤",
             butterTitle: "ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸàÿßŸÑÿÆŸÑÿ∑", chillingTitle: "ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ", otherNotesTitle: "ÿßŸÑÿÆŸÑÿßÿµÿ© (ÿßŸÑÿ∫ÿ¥ ŸäÿπŸÜŸä)",
             placeholderSelect: "üëà ÿØŸàÿ≥ ÿπŸÑŸâ ÿ≥ÿ™ÿßŸäŸÑ ŸÅŸàŸÇ ÿπÿ¥ÿßŸÜ ÿ™ÿ¥ŸàŸÅ ÿßŸÑÿ≠ÿ±ŸÉÿßÿ™! ‚ú®",
             ingredientsTitle: "ü•£ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ (Ÿäÿß ÿ™ŸÉÿßÿ™Ÿá Ÿäÿß ÿ≠ÿ±ŸÉÿßÿ™Ÿá!)", stepsTitle: "üìù ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ (ÿ®ÿßŸÑÿ™ŸÅÿµŸäŸÑ ÿßŸÑŸÖŸÖŸÑ)",
             scienceNoteTitle: "üî¨ ÿßŸÑÿ≠ÿ™ÿ© ÿßŸÑÿπŸÑŸÖŸäÿ© (ŸÑŸÑŸÅŸáŸÖÿßŸÜŸäŸÜ!)",
             toastNutsTitle: "ÿ™ÿ≤ŸàŸäÿØÿ© ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ©: ÿ™ÿ≠ŸÖŸäÿµ ŸÖŸÉÿ≥ÿ±ÿßÿ™ÿü", toastNutsDesc: "ÿ™ÿ≠ŸÖŸäÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤ ÿ™ÿ≠ŸÅÿ©!) ŸÅŸä 175¬∞ŸÖ ŸÑŸÄ 5-8 ÿØŸÇÿßŸäŸÇ ÿ®ŸäŸÅÿ™ÿ≠ ŸÜŸÉŸáÿßÿ™ ÿ£ÿπŸÖŸÇ. ÿ™ÿ≥ÿ™ÿßŸáŸÑ!",
             howToToastMilkPowderTitle: "ü§î ÿ•ÿ≤ÿßŸä ŸÜÿ≠ŸÖÿ≥ ÿßŸÑÿ®ŸàÿØÿ±ÿ©ÿü", howToToastMilkPowder: "ÿ≥ŸáŸÑÿ© ÿ£ŸàŸä! ÿßŸÜÿ¥ÿ± 3-4 ŸÖŸÑÿßÿπŸÇ ÿ®ŸàÿØÿ±ÿ© ŸÑÿ®ŸÜ (ÿπÿßÿØŸäÿ©) ŸÅŸä <span class='highlight'>ŸÖŸÇŸÑÿßÿ© ÿ¨ÿßŸÅÿ©</span> (ŸÖŸÜ ÿ∫Ÿäÿ± ÿ≤Ÿäÿ™!). ÿ¥ÿ∫ŸÑŸáÿß ÿπŸÑŸâ <span class='highlight'>ŸÜÿßÿ± ŸáÿßÿØŸäÿ©</span> Ÿà<span class='critical'>ŸÇŸÑŸëÿ® ÿ®ÿßÿ≥ÿ™ŸÖÿ±ÿßÿ±</span>. ÿ®ÿ¨ÿØ ŸÖÿ™ÿ∫ŸÖÿ∂ÿ¥ ÿπŸäŸÜŸÉ. Ÿáÿ™ÿ®ÿØÿ£ ÿ±Ÿäÿ≠ÿ™Ÿáÿß ÿ™ÿ∑ŸÑÿπ ŸàŸÖŸäÿ®ŸÇŸâ ŸÑŸàŸÜŸáÿß ÿØŸáÿ®Ÿä ŸÅÿßÿ™ÿ≠ÿßŸÜÿ© ŸÅŸä 3-5 ÿØŸÇÿßŸäŸÇ. ÿ¥ŸäŸÑŸáÿß ŸÖŸÜ ÿßŸÑŸÜÿßÿ± ŸÅŸàÿ±ÿßŸã (ÿπÿ¥ÿßŸÜ ÿ®ÿ™ÿ≠ÿ™ÿ±ŸÇ ÿ®ÿ≥ÿ±ÿπÿ©!) Ÿàÿßÿ™ÿ±ŸÉŸáÿß ÿ™ÿ®ÿ±ÿØ. Ÿäÿß ÿ≥ŸÑÿßŸÖ ÿπŸÑŸâ ÿßŸÑÿ∑ÿπŸÖ!",
             easterEggTitle: "üèÜ Ÿäÿß ÿ£ÿ≥ÿ∑Ÿàÿ±ÿ©! ÿßÿÆÿ™ÿ±ÿ™ ÿßŸÑÿ∫ÿ±ŸÇÿßŸÜÿ©! üèÜ", easterEggIntro: "ÿ∞ŸàŸÇŸÉ ÿπÿßŸÑŸä ÿßŸÑÿµÿ±ÿßÿ≠ÿ©! ÿ¨ÿßŸáÿ≤ ŸÑŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸàÿ≠ÿ¥ÿü", easterEggIdea: "üî• ŸÉŸàŸÉŸäÿ≤ ŸÖÿ≠ÿ¥Ÿäÿ© Ÿäÿß Ÿàÿ≠ÿ¥! üî•",
             easterEggDesc: "ÿ≥ŸáŸÑÿ© ŸÖŸàÿ™: ÿßÿπŸÖŸÑ ÿ≠ŸÅÿ±ÿ© ŸÅŸä ŸÉŸàÿ±ÿ© ÿπÿ¨ŸäŸÜÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ©ÿå ÿßÿ≠ÿ¥ÿ± ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ© ŸÜŸàÿ™ŸäŸÑÿß/ŸÑŸàÿ™ÿ≥/ÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸàÿå ÿßŸÇŸÅŸÑŸáÿß ŸÉŸàŸäÿ≥ ŸÉÿ£ŸÜŸáÿß ÿ≥ÿ± ÿ≠ÿ±ÿ®Ÿäÿå ŸàÿßÿÆÿ®ÿ≤Ÿáÿß ÿπÿßÿØŸä!",
             easterEggPistachioTip: "ÿ®ÿ¨ÿØÿå ÿ¨ÿ±ÿ® ÿßŸÑÿ®ÿ≥ÿ™ÿßÿ¥ŸäŸà ŸàŸÖÿ™ÿÆÿßŸÅÿ¥! ÿπÿßŸÑŸÖ ÿ™ÿßŸÜŸä ŸàÿßŸÑŸÑŸá.", pistachioReco: "ÿ£ÿ≠ÿ≥ŸÜ ŸÉÿ±ŸäŸÖÿ© ÿ®ÿµÿ±ÿßÿ≠ÿ©:", pistachioLinkSource: "(ŸÑŸäŸÜŸÉ ÿ£ŸÖÿßÿ≤ŸàŸÜ ŸÖÿµÿ±)",
             tipsTitle: "üí° ŸÜÿµÿßÿ¶ÿ≠ ÿπŸÖÿ± ŸÑŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ! (ÿßÿ±ÿ™ŸÇŸê ÿ®ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÉŸàŸÉŸäÿ≤)",
             finalTag: "ÿ∏ÿ®ÿ∑ÿ™Ÿáÿßÿü ÿπÿßŸäÿ≤ ÿ™ÿ™ŸÖŸÜÿ∏ÿ±ÿü ÿßÿπŸÖŸÑŸä ÿ™ÿßÿ¨! @omarisavibe üòÑ",
             scalerTitle: "üßà ÿπÿØŸëŸÑ ÿ≠ÿ¨ŸÖ ÿØŸÅÿπÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤!",
             scalerDesc: "ÿ£ÿØÿÆŸÑ ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ£ŸàŸÑŸäÿ© (ÿ®ÿßŸÑÿ¨ÿ±ÿßŸÖ) ŸÑÿ∂ÿ®ÿ∑ ŸÖŸÇÿßÿØŸäÿ± ÿßŸÑŸàÿµŸÅÿ© (ÿßŸÑŸÖÿ™ÿ±Ÿäÿ©).",
             scalerLabel: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ®ÿØÿ¶Ÿäÿ© (ÿ¨ŸÖ):",
             scalerButton: "ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÇÿßÿØŸäÿ±",
             scalerNote: "ŸÖŸÑÿ≠Ÿàÿ∏ÿ©: Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ŸÇŸäŸÖ ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÅŸÇÿ∑. Ÿàÿ≠ÿØÿßÿ™ ÿßŸÑŸÉŸàÿ® ÿ™ŸÇÿ±Ÿäÿ®Ÿäÿ©.",
             diffs: { /* Include full AR diffs */
                 classic: { name: "ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='highlight'>ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± (ÿ®ÿØŸàŸÜ ÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä).", chillingMethod: "<span class='highlight'>ÿ™ÿ®ÿ±ŸäÿØ ŸäŸèŸÅÿ∂ŸÑ:</span> 30 ÿØŸÇŸäŸÇÿ© - 24 ÿ≥ÿßÿπÿ©.", otherNotes: "ŸÉŸÖŸäÿ© ÿØŸÇŸäŸÇ ÿπÿßÿØŸäÿ© (~300ÿ¨). ŸÅŸäŸáÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±. ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ© ÿ®ÿ™ÿ∂ŸäŸÅ ŸÇŸàÿßŸÖ ÿ™ÿ≠ŸÅÿ©!" },
                 thick: { name: "ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>. <span class='critical'>ÿßÿÆŸÅŸÇŸáÿß ŸÉÿ±ŸäŸÖŸä</span> ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± ÿ≠ÿ™Ÿâ Ÿáÿ¥ÿ© ÿ¨ÿØŸãÿß (3-5 ÿØŸÇÿßÿ¶ŸÇ).", chillingMethod: "<span class='critical'>ÿ™ÿ®ÿ±ŸäÿØ ÿ•ŸÑÿ≤ÿßŸÖŸä ÿ∑ŸàŸäŸÑ:</span> 24 - 72 ÿ≥ÿßÿπÿ©. <span class='critical'>ÿßŸÑÿ≥ÿ±</span>!", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÉÿ´ÿ±</span> (~310-330ÿ¨). ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± + ŸÜÿ¥ÿß ÿßÿÆÿ™Ÿäÿßÿ±Ÿä. ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ŸÖŸáŸÖÿ© ŸáŸÜÿß!" },
                 thin: { name: "ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", butterMethod: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© <span class='critical'>ÿØÿßŸÅÿ¶ÿ© Ÿàÿ≥ÿßÿ¶ŸÑ</span>. ÿßÿÆŸÅŸÇŸáÿß ÿ®ÿßŸÑÿ≥ŸÑŸÉ.", chillingMethod: "<span class='critical'>ÿ™ÿÆÿ∑Ÿé ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±ÿßŸã.", otherNotes: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ</span> (~280-300ÿ¨). <span class='critical'>ÿ®ÿØŸàŸÜ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±.</span> ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ´ÿ± = ŸÇÿ±ŸÖÿ¥ÿ©." }
             },
             recipes: { /* Include full AR recipes with cups/grams keys */
                classic: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ", theme: "classic-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸÑŸÉŸÜ ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂' }, { key: 'flour', emoji: 'üåæ', cups: '2 1/2 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '3-4 ŸÖ.ŸÉ ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµÿ©', grams: '30-40 ÿ¨ÿ±ÿßŸÖ ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ (ÿ£Ÿà 3ÿ¨ ŸÜÿßÿπŸÖ)' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5-2 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255-340 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ÿπŸÖÿ± ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä!)</span>' }, { key: 'nuts', emoji: 'ü•ú', cups: '1/2-1 ŸÉŸàÿ® ŸÖŸÉÿ≥ÿ±ÿßÿ™', grams: '50-100 ÿ¨ÿ±ÿßŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä: ÿ®ŸäŸÉÿßŸÜ/ÿ¨Ÿàÿ≤!)' }], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤ ÿ£ÿ≥ÿßÿ≥Ÿä: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿàÿ®ÿ±ŸëÿØŸáÿß ŸÑ<span class="critical">ÿ≥ÿßÿ¶ŸÑÿ© ÿ∫Ÿäÿ± ÿ≥ÿßÿÆŸÜÿ©</span>. ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≠ŸÑŸäÿ® ÿßŸÑÿ®ŸàÿØÿ±ÿ©. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ. ÿ≠ŸÖŸëÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (175¬∞ŸÖÿå 5-8 ÿØ) ŸÑŸà Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖ.', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ≥ÿßÿ¶ŸÑÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ¨ÿßŸÅ ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="highlight">ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (ÿ•ŸÜ ÿßÿ≥ÿ™ÿÆÿØŸÖÿ™).</span>', '<span class="highlight">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜ (ŸÖŸÅÿ∂ŸÑ):</span> ÿ∫ÿ∑Ÿê Ÿàÿ®ÿ±ŸëÿØ <span class="highlight">30ÿØ+</span> (ŸÑŸÄ 24 ÿ≥).', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span>. ÿ¨Ÿáÿ≤ ÿµŸàÿßŸÜŸä.', 'ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ <span class="highlight">~2 ŸÖ.ŸÉ</span>. ÿ±ÿ¥ ŸÖŸÑÿ≠ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä).', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">10-12 ÿØ</span>.', 'ÿ®ÿ±ŸëÿØ ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5-10ÿØ ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. üéâ' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿ≥ÿßÿ¶ŸÑÿ©=ŸÜŸÉŸáÿ©. ÿ™ÿ®ÿ±ŸäÿØ=ŸÇŸàÿßŸÖ. ÿ®ŸàÿØÿ±=ÿ±ŸÅÿπ. ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ©/ŸÖŸÉÿ≥ÿ±ÿßÿ™=ÿπŸÖŸÇ." },
                thick: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©", theme: "thick-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ŸÖÿ®ÿ±ÿØÿ© ŸàÿµŸÑÿ®ÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '300 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '50 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.5-2.75 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '310-330 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '3-4 ŸÖ.ŸÉ ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµÿ©', grams: '30-40 ÿ¨ÿ±ÿßŸÖ ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'starch', emoji: '‚≠ê', cups: '1-2 ŸÖ.ŸÉ ŸÜÿ¥ÿß', grams: '8-16 ÿ¨ÿ±ÿßŸÖ ŸÜÿ¥ÿß (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÑÿ∑ÿ±ÿßŸàÿ©)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß' }, { key: 'leavening_powder', emoji: '‚ú®', cups: '1/2 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±', grams: '2 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '2+ ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '340+ ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÉÿ™ÿ±! ÿπŸÖÿ± ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä!)</span>' }, { key: 'nuts', emoji: 'ü•ú', cups: '1/2-1 ŸÉŸàÿ® ŸÖŸÉÿ≥ÿ±ÿßÿ™', grams: '50-100 ÿ¨ÿ±ÿßŸÖ ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ≠ŸÖÿµÿ© (ŸÖŸàÿµŸâ ÿ®Ÿá ÿ®ÿ¥ÿØÿ©!)' }], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤ ÿ£ÿ≥ÿßÿ≥Ÿä: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© <span class="critical">Ÿàÿ®ÿ±ÿØŸáÿß ÿµŸÑÿ®ÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ®. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ. ÿ≠ŸÖŸëÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ.', '<span class="critical">ÿßÿÆŸÅŸÇ ŸÉÿ±ŸäŸÖŸä</span> ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿµŸÑÿ®ÿ© ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ ŸÉŸàŸäÿ≥ (3-5 ÿØŸÇÿßŸäŸÇ). ÿ∂ÿ±Ÿàÿ±Ÿä!', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ©ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÉÿ®ÿ±</span> ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® <span class="highlight">ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑŸÉÿ´Ÿäÿ±ÿ© ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ).</span>', '<span class="critical">ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ÿ•ŸÑÿ≤ÿßŸÖŸä):</span> ÿ∫ÿ∑ŸäŸáÿß Ÿàÿ®ÿ±ŸëÿØŸáÿß <span class="critical">24 - 72 ÿ≥ÿßÿπÿ©</span>. ÿßŸÑÿ≥ÿ±!', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">190¬∞ŸÖ</span> (ŸÖŸÖŸÉŸÜ ÿ£ÿπŸÑŸâ ŸÅŸä ÿßŸÑÿ£ŸàŸÑ).', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="critical">ŸÉÿ®Ÿäÿ±ÿ© (3-4 ŸÖ.ŸÉ)</span> <span class="highlight">ŸàÿÆŸÑŸäŸáÿß ÿπÿßŸÑŸäÿ©!</span> ŸÑÿß ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß. ÿ±ÿ¥ ŸÖŸÑÿ≠.', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØ</span> (ÿßŸÑŸÇŸÑÿ® <span class="critical">ÿ∑ÿ±Ÿä</span>).', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© <span class="critical">10-15 ÿØ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ</span> ÿ´ŸÖ ÿßŸÑÿ¥ÿ®ŸÉÿ©. üòç' ], scienceNote: "ÿÆŸÅŸÇ ÿ≤ÿ®ÿØÿ© ÿµŸÑÿ®ÿ© = ŸáŸàÿßÿ° ŸÑŸÑÿ≥ŸÖŸÉ. ÿ™ÿ®ÿ±ŸäÿØ ÿ∑ŸàŸäŸÑ = ŸÜŸÉŸáÿ©. ÿØŸÇŸäŸÇ/ŸÜÿ¥ÿß ÿ£ŸÉÿ™ÿ± = ŸÖÿ∂ÿ∫ÿ©/ŸÜÿπŸàŸÖÿ©. ŸÖŸÉÿ≥ÿ±ÿßÿ™=ÿ™ÿ®ÿßŸäŸÜ." },
                thin: { title: "ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©", theme: "thin-theme", ingredients: [ { key: 'butter', emoji: 'üßà', cups: '1 ŸÉŸàÿ® (226ÿ¨) ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©', grams: '226 ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ©ÿå <span class="critical note">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>' }, { key: 'sugar', emoji: 'üç¨', cups: '1 1/4 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂', grams: '250 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ±!)' }, { key: 'sugar_gran', emoji: 'üçö', cups: '1/2 ŸÉŸàÿ® ÿ≥ŸÉÿ± ÿ®ŸÜŸä', grams: '100 ÿ¨ÿ±ÿßŸÖ ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ÿ®ŸÜŸä ÿ£ŸÇŸÑ!)' }, { key: 'flour', emoji: 'üåæ', cups: '2.25-2.5 ŸÉŸàÿ® ÿØŸÇŸäŸÇ', grams: '280-300 ÿ¨ÿ±ÿßŸÖ ÿØŸÇŸäŸÇ (ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ!)' }, { key: 'milkpowder', emoji: 'ü•õ', cups: '3-4 ŸÖ.ŸÉ ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµÿ©', grams: '30-40 ÿ¨ÿ±ÿßŸÖ ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'leavening_soda', emoji: 'ü•Ñ', cups: '1 ŸÖ.ÿµ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß', grams: '5 ÿ¨ÿ±ÿßŸÖ ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß<span class="critical note">(ŸÑÿß ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±!)</span>' }, { key: 'extra_liquid', emoji: 'üíß', cups: '1-2 ŸÖ.ŸÉ ÿ≠ŸÑŸäÿ®', grams: '15-30 ŸÖŸÑ ÿ≠ŸÑŸäÿ® (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÅÿ±ÿ¥ ÿ≤ŸäÿßÿØÿ©)' }, { key: 'salt', emoji: 'üßÇ', cups: '1 ŸÖ.ÿµ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ', grams: '6 ÿ¨ÿ±ÿßŸÖ ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ' }, { key: 'eggs', emoji: 'ü•ö', cups: '2 ÿ®Ÿäÿ∂ÿ©', grams: '2 ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (~100 ÿ¨ÿ±ÿßŸÖ) (+ ÿµŸÅÿßÿ± ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)' }, { key: 'vanilla', emoji: 'üè∫', cups: '2 ŸÖ.ÿµ ŸÅÿßŸÜŸäŸÑŸäÿß', grams: '10 ŸÖŸÑ ŸÅÿßŸÜŸäŸÑŸäÿß' }, { key: 'choco', emoji: 'üç´', cups: '1.5 ŸÉŸàÿ® ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', grams: '255 ÿ¨ÿ±ÿßŸÖ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© <span class="note">(ŸÖŸäŸÜŸä ŸÖŸÖŸÉŸÜ! ÿπŸÖÿ± ŸäŸàÿµŸä ÿ®ÿØÿ±Ÿàÿ®ÿ≥Ÿä!)</span>' }], steps: [ 'ÿ™ÿ¨ŸáŸäÿ≤ ÿ£ÿ≥ÿßÿ≥Ÿä: ÿ≠ŸÖŸëÿµ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿÆŸÑŸäŸáÿß <span class="critical">ÿØÿßŸÅÿ¶ÿ© ÿ≥ÿßÿ¶ŸÑÿ©</span>. ÿ≠ŸÖŸëÿµ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ®. ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ (<span class="highlight">ÿµŸàÿØÿß ŸÅŸÇÿ∑</span>).', 'ÿßÿÆŸÅŸÇ <span class="highlight">ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿØÿßŸÅÿ¶ÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ±ŸäŸÜ.', 'ÿ∂ŸäŸÅ ÿßŸÑÿ®Ÿäÿ∂ (ŸàÿµŸÅÿßÿ±/ÿ≠ŸÑŸäÿ® ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)ÿå ÿ´ŸÖ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.', 'ÿ∂ŸäŸÅ <span class="highlight">ŸÉŸÖŸäÿ© ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸÇŸÑ</span> ÿ™ÿØÿ±Ÿäÿ¨ŸäÿßŸã ŸàÿßÿÆŸÑÿ∑ <span class="critical">ÿ®ÿßŸÑŸÉÿßÿØ</span>.', 'ŸÇŸÑŸëÿ® ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©.', '<span class="critical">ŸÑÿß ÿ™ÿ®ÿ±ŸëÿØ!</span> ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±ÿßŸã.', 'ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ <span class="highlight">175¬∞ŸÖ</span>.', 'ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± <span class="highlight">ÿµÿ∫Ÿäÿ±ÿ© (1.5-2 ŸÖ.ŸÉ)</span> <span class="critical">ÿ®ÿπŸäÿØ ÿπŸÜ ÿ®ÿπÿ∂!</span> ŸÖŸÖŸÉŸÜ ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß.', 'ÿßÿÆÿ®ÿ≤ <span class="highlight">12-15 ÿØŸÇŸäŸÇÿ©</span> ÿ≠ÿ™Ÿâ ÿ™ÿ≠ŸÖÿ± Ÿàÿ™ÿ¨ŸÅ.', 'ÿ®ÿ±ŸëÿØŸáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© 5 ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß. Ÿáÿ™ŸÇÿ±ŸÖÿ¥ ŸÑŸÖÿß ÿ™ÿ®ÿ±ÿØ! ‚ú®' ], scienceNote: "ÿ≤ÿ®ÿØÿ© ÿØÿßŸÅÿ¶ÿ© + ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ£ŸÉÿ™ÿ± + ÿØŸÇŸäŸÇ ÿ£ŸÇŸÑ + ÿµŸàÿØÿß ŸÅŸÇÿ∑ + ŸÑÿß ÿ™ÿ®ÿ±ŸäÿØ = ŸÅÿ±ÿ¥ ÿ£ŸÇÿµŸâ! ÿ≠ÿ±ÿßÿ±ÿ© ÿ£ŸÇŸÑ ŸàŸàŸÇÿ™ ÿ£ÿ∑ŸàŸÑ = ŸÇÿ±ŸÖÿ¥ÿ©." }
             },
            tips: [ /* Include full AR tips list */
                 { emoji: '‚öñÔ∏è', text: "<span class='highlight'>ŸÇŸäÿ≥ ÿßŸÑÿØŸÇŸäŸÇ ÿµÿ≠:</span> ÿ®ÿßŸÑŸÖÿπŸÑŸÇÿ© Ÿàÿ≥ŸàŸëŸäÿå ÿ£Ÿà ŸÖŸäÿ≤ÿßŸÜ (ÿßŸÑÿ¨ÿ±ÿßŸÖÿßÿ™ ŸÖŸÑŸÉ!). ÿπÿ¥ÿßŸÜ ŸÖÿ™ÿ∑ŸÑÿπÿ¥ ŸÜÿßÿ¥ŸÅÿ©." },
                 { emoji: 'ü•ö', text: "<span class='highlight'>ŸÖŸÉŸàŸÜÿßÿ™ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©:</span> ÿßŸÑÿ®Ÿäÿ∂ ŸàÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®Ÿäÿ™ÿÆŸÑÿ∑Ÿàÿß ÿ£ÿ≠ÿ≥ŸÜ. ÿ≠ŸÑ ÿ≥ÿ±Ÿäÿπ: ÿ≠ŸÖÿßŸÖ ŸÖŸäÿ© ÿØÿßŸÅŸäÿ© ŸÑŸÑÿ®Ÿäÿ∂." },
                 { emoji: 'üßà', text: "<span class='highlight'>ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸÖŸáŸÖÿ© ŸÖŸàÿ™:</span> ÿ≥ÿßÿ¶ŸÑÿ© ŸÖÿ®ÿ±ÿØÿ©ÿå ÿµŸÑÿ®ÿ©ÿå ÿ£Ÿà ÿØÿßŸÅÿ¶ÿ© - ÿ®ÿ™ÿ≠ÿØÿØ ÿßŸÑŸÇŸàÿßŸÖ!" },
                 { emoji: 'ü•∂', text: "<span class='critical'>ÿßÿ≠ÿ™ÿ±ŸÖ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!:</span> ŸÑŸÑÿ≥ŸÖŸäŸÉÿ© ÿ®ÿßŸÑÿ∞ÿßÿ™ÿå ÿ•ÿ¨ÿ®ÿßÿ±Ÿä. ÿ®Ÿäÿ®ŸÜŸä ÿ∑ÿπŸÖ Ÿàÿ®ŸäŸÖŸÜÿπ ÿßŸÑÿ≥Ÿäÿ≠ÿßŸÜ. ÿßÿπŸÖŸÑŸá!" },
                 { emoji: 'üî•', text: "<span class='highlight'>ÿßÿπÿ±ŸÅ ŸÅÿ±ŸÜŸÉ ŸÉŸàŸäÿ≥:</span> ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿ®ÿ™ŸÉÿØÿ®! ÿ™ÿ±ŸÖŸàŸÖÿ™ÿ± ŸÅÿ±ŸÜ ÿ±ÿÆŸäÿµ. ŸÑŸÅ ÿßŸÑÿµŸàÿßŸÜŸä." },
                 { emoji: 'üç™', text: "<span class='highlight'>ŸÖÿ™ŸàŸÑÿπÿ¥ ŸÅŸäŸáÿß!:</span> ÿ∑ŸÑÿπŸáÿß ŸàÿßŸÑÿ≠ÿ±ŸàŸÅ ŸÖÿ≥ÿ™ŸàŸäÿ© ŸàÿßŸÑŸÇŸÑÿ® ÿ∑ÿ±Ÿä *ÿ¥ŸàŸäÿ©*. ÿ®ÿ™ŸÉŸÖŸÑ ÿ≥Ÿàÿß ÿ®ÿ±ÿ©." },
                 { emoji: 'üìÑ', text: "<span class='highlight'>Ÿàÿ±ŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖŸáŸÖ:</span> ŸÖŸÅŸäÿ¥ ŸÑÿ≤ŸÇÿå ÿ™ŸÜÿ∂ŸäŸÅ ÿ≥ŸáŸÑÿå ŸÑŸàŸÜ ŸÖŸàÿ≠ÿØ." },
                 { emoji: 'ü•Ñ', text: "<span class='critical'>ÿπÿØŸàŸÉ: ÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ≤ŸäÿßÿØÿ©:</span> ÿ£ŸàŸÑ ŸÖÿß ÿßŸÑÿØŸÇŸäŸÇ ŸäÿÆÿ™ŸÅŸä ŸàŸÇŸëŸÅ. ÿÆŸÑÿ∑ ÿ≤ŸäÿßÿØÿ© = ŸÉŸàŸÉŸäÿ≤ ŸÜÿßÿ¥ŸÅÿ©." },
                 { emoji: '‚ú®', text: "<span class='highlight'>ÿßŸÑŸÅŸäŸÜÿ¥ ÿßŸÑÿ¥ŸäŸÉ: ŸÖŸÑÿ≠ ÿÆÿ¥ŸÜ:</span> ÿ±ÿ¥ÿ© ÿÆŸÅŸäŸÅÿ© *ŸÇÿ®ŸÑ* ÿßŸÑÿÆÿ®ÿ≤ ÿ®ÿ™ÿØŸä ÿ¥ŸÉŸÑ Ÿàÿ∑ÿπŸÖ ÿÆÿ∑Ÿäÿ±. ÿ¨ÿ±ÿ®!" },
                 { emoji: 'üç´', text: "<span class='highlight'>ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸáŸÖÿ©:</span> Ÿáÿßÿ™ ŸÜŸàÿπ ŸÜÿ∂ŸäŸÅ! ÿØÿ±Ÿàÿ®ÿ≥Ÿä ÿ≠ŸÑŸäÿ® ÿ≠ŸÑŸàÿ©! ÿßÿÆŸÑÿ∑ ÿ£ŸÜŸàÿßÿπ." },
                 { emoji: 'ü•ú', text: "<span class='highlight'>ÿ™ÿ≠ŸÖŸäÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ®ŸäŸÅÿ±ŸÇ:</span> ŸÑŸà ÿ®ÿ™ÿ≥ÿ™ÿÆÿØŸÖ (ŸÉŸÑÿßÿ≥ŸäŸÉ/ÿ≥ŸÖŸäŸÉÿ©) ÿ≠ŸÖŸëÿµŸáÿß (175¬∞ŸÖÿå 5-8 ÿØ) ŸÑÿ≠ÿØ ŸÖÿß ÿßŸÑÿ±Ÿäÿ≠ÿ© ÿ™ÿ∑ŸÑÿπ. ŸÅÿ±ŸÇ ÿßŸÑÿ≥ŸÖÿß ŸàÿßŸÑÿ£ÿ±ÿ∂!" },
                 { key: 'sci1', emoji: 'üî•', text: 'ÿπŸÑŸÖ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ©: ÿ™ŸÅÿßÿπŸÑ ŸÖŸäŸÑÿßÿ±ÿØ = ŸÜŸÉŸáÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™!' },
                 { key: 'sci2', emoji: 'ü•õ', text: 'ÿ≠ŸÑŸäÿ® ÿ®ŸàÿØÿ±ÿ© ŸÖÿ≠ŸÖÿµ: ŸÖÿ≤ŸäÿØ ŸÖŸÜ ŸÖŸäŸÑÿßÿ±ÿØ! ÿ∑ÿ±ÿßŸàÿ© ŸàÿπŸÖŸÇ. ÿ¥ŸàŸäÿ© ÿ®ŸäŸÅÿ±ŸÇŸàÿß.' }
            ]
        }
    }; // End langData

    // --- UTILITY FUNCTIONS ---

    // Debounce function to limit rapid execution (e.g., for window resize)
    function debounce(func, wait, immediate) {
        let timeout;
        return function executedFunction() {
            const context = this;
            const args = arguments;
            const later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };

    // --- CORE FUNCTIONS ---

    function updateTextContent() {
        const texts = langData[currentLang];
        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.dataset.langKey;
            // Skip yield (handled dynamically), key diff title (handled separately)
            if (key !== 'yieldInfo' && key !== 'keyDifferencesTitleBase' && texts[key]) {
                el.innerHTML = texts[key];
            }
        });
        // Update dynamic title components
        mainTitleH1.innerHTML = texts.mainTitle || "üç™ Cookie Guide! üç™"; // Set base title
        document.title = mainTitleH1.textContent || "Omar's Cookie Guide"; // Update page title
    }

    function updateYieldInfo() {
        if (!yieldInfoDisplay) return;
        const texts = langData[currentLang];
        const template = texts.yieldInfoTemplate;
        if (!template) return;

        const scaledMinYield = Math.max(1, Math.round(BASE_YIELD_MIN * currentScaleFactor));
        const scaledMaxYield = Math.max(scaledMinYield, Math.round(BASE_YIELD_MAX * currentScaleFactor));

        const yieldText = template.replace('{min}', scaledMinYield).replace('{max}', scaledMaxYield);
        yieldInfoDisplay.innerHTML = yieldText;
    }

    function handleLanguageChange(newLang) {
        if (newLang === currentLang || !langData[newLang]) return;
        currentLang = newLang;
        document.documentElement.lang = currentLang;
        body.dir = (currentLang === 'ar') ? 'rtl' : 'ltr';

        updateTextContent(); // Update all static text first
        langButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.lang === currentLang));
        updateYieldInfo(); // Update yield display

        // Re-render dynamic content if a type is selected
        if (selectedCookieType) {
            // Re-display sections to get correct language & potentially re-scaled ingredients
            displayKeyDifferences(selectedCookieType);
            displayRecipe(selectedCookieType); // This re-renders using current state
            displayEasterEgg(selectedCookieType); // Re-render for language
        } else {
            showPlaceholder(); // Update placeholder text
        }
        displayTips(); // Re-render tips
    }

    function handleScaleUpdate() {
        const newButterAmount = parseFloat(butterAmountInput.value);
        let updateSuccessful = false;

        if (!isNaN(newButterAmount) && newButterAmount >= 50) { // Check against min attribute
            currentScaleFactor = newButterAmount / STANDARD_BUTTER_GRAMS;
            butterAmountInput.value = newButterAmount; // Keep the valid number
            updateSuccessful = true;
            console.log(`Scale Factor: ${currentScaleFactor.toFixed(3)}`);
        } else {
            currentScaleFactor = 1;
            butterAmountInput.value = STANDARD_BUTTER_GRAMS;
            alert(langData[currentLang].scalerNote || "Invalid butter amount. Resetting.");
            console.warn("Invalid butter amount entered. Resetting scale.");
        }

        updateYieldInfo();
        if (selectedCookieType) {
            displayRecipe(selectedCookieType); // Re-render recipe with new scale
        }

        // Flash effect on scaler section
        if (updateSuccessful && recipeScalerSection) {
            recipeScalerSection.classList.remove('updated'); // Remove first if already present
            void recipeScalerSection.offsetWidth; // Trigger reflow
            recipeScalerSection.classList.add('updated');
            setTimeout(() => recipeScalerSection.classList.remove('updated'), 400); // Match animation duration
        }
    }

    // --- UNIT TOGGLE LOGIC ---
    function createUnitTogglesHTML() {
        if (!unitTogglesTemplate) return '';
        const wrapper = document.createElement('div');
        wrapper.className = 'unit-toggle-wrapper';
        const enToggle = unitTogglesTemplate.querySelector('.unit-selector[data-lang="en"]')?.cloneNode(true);
        const arToggle = unitTogglesTemplate.querySelector('.unit-selector[data-lang="ar"]')?.cloneNode(true);
        if (enToggle) wrapper.appendChild(enToggle);
        if (arToggle) wrapper.appendChild(arToggle);
        return wrapper.outerHTML; // Return as string to inject
    }

    function updateUnitToggleVisibility(container = recipeDetailsContainer) {
        const enSelector = container.querySelector('.unit-selector[data-lang="en"]');
        const arSelector = container.querySelector('.unit-selector[data-lang="ar"]');
        if (enSelector) enSelector.style.display = (currentLang === 'en') ? 'inline-block' : 'none';
        if (arSelector) arSelector.style.display = (currentLang === 'ar') ? 'inline-block' : 'none';
    }

    function updateUnitButtonActiveStates(container = recipeDetailsContainer) {
        const unitButtons = container.querySelectorAll('.unit-toggle-wrapper .unit-btn');
        if (!unitButtons.length) return;
        unitButtons.forEach(btn => {
             const btnUnit = btn.dataset.unitType;
             const btnLang = btn.closest('.unit-selector')?.dataset.lang;
             if (!btnLang) return;
             let isActive = false;
             if (currentUnit === 'imperial') { isActive = (btnLang === 'en' && btnUnit === 'imperial') || (btnLang === 'ar' && btnUnit === 'cups'); }
             else { isActive = (btnLang === 'en' && btnUnit === 'metric') || (btnLang === 'ar' && btnUnit === 'grams'); }
             btn.classList.toggle('active', isActive);
        });
    }

    function handleUnitChangeDelegation(event) {
        const button = event.target.closest('.unit-btn');
        if (!button || !event.currentTarget.contains(button)) return;

        const newUnitType = button.dataset.unitType;
        const buttonLang = button.closest('.unit-selector')?.dataset.lang;
        if (!buttonLang) return;

        const oldUnit = currentUnit;
        currentUnit = ((buttonLang === 'en' && newUnitType === 'imperial') || (buttonLang === 'ar' && newUnitType === 'cups')) ? 'imperial' : 'metric';

        if (oldUnit !== currentUnit) {
            console.log(`Unit changed to: ${currentUnit}`);
            updateUnitButtonActiveStates(recipeDetailsContainer); // Update buttons visually
            if (selectedCookieType) { // Re-render ingredients list only
                const ingredientList = recipeDetailsContainer.querySelector('.ingredient-list');
                if (ingredientList) {
                    const newIngredientsHTML = generateIngredientsHTML(selectedCookieType);
                    ingredientList.innerHTML = newIngredientsHTML;
                }
            }
        }
    }

    // --- CONTENT GENERATION ---
    function generateIngredientsHTML(type) {
        const texts = langData[currentLang];
        const recipe = texts.recipes[type];
        if (!recipe?.ingredients) return '<li>Ingredient data missing!</li>';

        const unitSystemKeyForMetric = (currentLang === 'ar') ? 'grams' : 'metric';
        const unitKey = (currentUnit === 'imperial') ? ((currentLang === 'ar') ? 'cups' : 'imperial') : unitSystemKeyForMetric;

        return recipe.ingredients.map(ing => {
            let measurement = ing[unitKey] || ing.metric || ing.imperial || ing.grams || ing.cups || 'N/A';
            if (unitKey === unitSystemKeyForMetric && currentScaleFactor !== 1) {
                const gramMarker = (currentLang === 'ar') ? 'ÿ¨ÿ±ÿßŸÖ' : 'g';
                const gramMarkerPlural = (currentLang === 'ar') ? 'ÿ¨ÿ±ÿßŸÖÿßÿ™' : gramMarker; // Use plural if defined

                const tryReplaceScaled = (text, originalVal, scaledVal) => {
                    let replaced = false;
                    // Try exact match with singular marker
                    let regex = new RegExp(`(^|\\D)(${originalVal})(\\s*)(${gramMarker})(\\W|$)`, 'i');
                    if (regex.test(text)) {
                         text = text.replace(regex, `$1${scaledVal}$3$4$5`); replaced = true;
                    }
                    // Try exact match with plural marker (if different)
                    if (!replaced && gramMarker !== gramMarkerPlural) {
                        regex = new RegExp(`(^|\\D)(${originalVal})(\\s*)(${gramMarkerPlural})(\\W|$)`, 'i');
                        if (regex.test(text)) {
                            text = text.replace(regex, `$1${scaledVal}$3$4$5`); replaced = true;
                        }
                    }
                    // Fallback: find first gram number
                    if (!replaced) {
                         regex = new RegExp(`(\\d+(\\.\\d+)?)(.)*?(${gramMarker}|${gramMarkerPlural})`, 'i');
                         const match = text.match(regex);
                         if(match && match[1]) {
                              text = text.replace(match[1], scaledVal); // Replace only the numeric part
                              replaced = true;
                         }
                    }
                    return text;
                };

                if (ing.key === 'butter') {
                    const scaledButter = Math.round(STANDARD_BUTTER_GRAMS * currentScaleFactor);
                    measurement = tryReplaceScaled(measurement, STANDARD_BUTTER_GRAMS, scaledButter);
                } else {
                    const rangeRegex = new RegExp(`(\\d+)\\s*-\\s*(\\d+)\\s*(${gramMarker}|${gramMarkerPlural})`, 'i');
                    const rangeMatch = measurement.match(rangeRegex);
                    if (rangeMatch && rangeMatch[1] && rangeMatch[2]) {
                        const scaledMin = Math.round(parseFloat(rangeMatch[1]) * currentScaleFactor);
                        const scaledMax = Math.round(parseFloat(rangeMatch[2]) * currentScaleFactor);
                        measurement = measurement.replace(rangeMatch[0], `${scaledMin}-${scaledMax}${rangeMatch[3]}`);
                    } else {
                        const singleGramRegex = new RegExp(`(\\d+(\\.\\d+)?)(.)*?(${gramMarker}|${gramMarkerPlural})`, 'i');
                        const singleMatch = measurement.match(singleGramRegex);
                        if (singleMatch && singleMatch[1]) {
                            const scaledGrams = Math.round(parseFloat(singleMatch[1]) * currentScaleFactor);
                             // More robust replacement of only the number part found
                             measurement = measurement.replace(new RegExp(`(^|\\D)(${singleMatch[1]})`), `$1${scaledGrams}`);

                        }
                    }
                }
            }
            return `<li data-emoji="${ing.emoji || 'üç™'}">${measurement}</li>`;
        }).join('');
    }

    function generateRecipeHTML(type) {
        const texts = langData[currentLang];
        const recipe = texts.recipes[type];
        if (!recipe) return '<p>Error: Recipe data not found!</p>';

        const unitTogglesHtml = createUnitTogglesHTML();
        let contentHtml = `<div class="recipe-content-area">`;
        contentHtml += `<h3>${recipe.title}</h3>`;
        contentHtml += unitTogglesHtml; // Inject toggles
        // Ingredients
        contentHtml += `<h4 class="list-header" data-lang-key="ingredientsTitle">${texts.ingredientsTitle}</h4><ul class="ingredient-list">`;
        contentHtml += generateIngredientsHTML(type);
        contentHtml += '</ul>';
        // Optional Toasted Nuts Info (If relevant - could check recipe.ingredients for 'nuts' key)
        const hasNuts = recipe.ingredients.some(ing => ing.key === 'nuts');
        if (hasNuts && texts.toastNutsTitle) {
            contentHtml += `<div class="how-to-toast"><h4 data-lang-key="toastNutsTitle">${texts.toastNutsTitle}</h4><p data-lang-key="toastNutsDesc">${texts.toastNutsDesc}</p></div>`;
        }
        // How to Toast Milk Powder (if relevant - could check for 'milkpowder' key)
         const hasMilkPowder = recipe.ingredients.some(ing => ing.key === 'milkpowder');
         if (hasMilkPowder && texts.howToToastMilkPowderTitle) {
              contentHtml += `<div class="how-to-toast"><h4 data-lang-key="howToToastMilkPowderTitle">${texts.howToToastMilkPowderTitle}</h4><p data-lang-key="howToToastMilkPowder">${texts.howToToastMilkPowder}</p></div>`;
          }
        // Steps
        contentHtml += `<h4 class="list-header" data-lang-key="stepsTitle">${texts.stepsTitle}</h4><ol class="steps-list">`;
        recipe.steps.forEach(step => { contentHtml += `<li>${step}</li>`; });
        contentHtml += '</ol>';
        // Science Note
        if (recipe.scienceNote) {
             contentHtml += `<div class="science-note"><h4><span class="emoji">üî¨</span> ${texts.scienceNoteTitle}</h4><p>${recipe.scienceNote}</p></div>`;
         }
        contentHtml += `</div>`; // Close recipe-content-area
        return contentHtml;
    }

     function generateEasterEggHTML() {
        const texts = langData[currentLang];
        // Ensure elements exist before trying to set content
        const titleEl = easterEggContainer?.querySelector('h3');
        const introEl = easterEggContainer?.querySelector('[data-lang-key="easterEggIntro"]');
        const ideaEl = easterEggContainer?.querySelector('[data-lang-key="easterEggIdea"]');
        const descEl = easterEggContainer?.querySelector('[data-lang-key="easterEggDesc"]');
        const tipEl = easterEggContainer?.querySelector('[data-lang-key="easterEggPistachioTip"]');
        const recoEl = easterEggContainer?.querySelector('[data-lang-key="pistachioReco"]');
        const sourceEl = easterEggContainer?.querySelector('[data-lang-key="pistachioLinkSource"]');

        if (titleEl) titleEl.innerHTML = texts.easterEggTitle || '';
        if (introEl) introEl.innerHTML = texts.easterEggIntro || '';
        if (ideaEl) ideaEl.innerHTML = texts.easterEggIdea || '';
        if (descEl) descEl.innerHTML = texts.easterEggDesc || '';
        if (stuffedCookieImage) {
            stuffedCookieImage.src = IMAGE_PATHS.stuffed;
            stuffedCookieImage.alt = texts.easterEggIdea || "Stuffed Cookie";
        }
        if (tipEl) tipEl.innerHTML = texts.easterEggPistachioTip || '';
        if (recoEl) recoEl.innerHTML = texts.pistachioReco || '';
        if (sourceEl) sourceEl.innerHTML = texts.pistachioLinkSource || '';
    }

    function displayTips() {
        const texts = langData[currentLang];
        if (!texts.tips || !tipsList) return;
        tipsList.innerHTML = texts.tips.map(tip => `<li data-emoji="${tip.emoji || 'üí°'}">${tip.text}</li>`).join('');
        const tipBoxTitleElement = document.querySelector('.tip-box h3[data-lang-key="tipsTitle"]');
        if (tipBoxTitleElement && texts.tipsTitle) {
            tipBoxTitleElement.innerHTML = `<span class="emoji">üí°</span> ${texts.tipsTitle} <span class="emoji">üî¨</span>`;
        }
    }

    // --- DISPLAY LOGIC & TRANSITIONS ---
    function switchActiveSection(newSection) {
        if (activeSection === newSection) return; // No change needed

        // Hide the currently active section
        if (activeSection) {
            activeSection.classList.remove('visible');
            activeSection.classList.add('visually-hidden'); // Hide completely
        }

        // Show the new section
        if (newSection) {
            newSection.classList.remove('visually-hidden');
            // Use requestAnimationFrame to ensure the hidden class is removed before adding visible
            requestAnimationFrame(() => {
                newSection.classList.add('visible');
            });
        }
        activeSection = newSection;
    }

    function displayKeyDifferences(type) {
         const texts = langData[currentLang];
         const diffs = texts.diffs[type];
         if (!diffs || !keyDiffTitleH3 || !keyDiffPointsDiv) {
             switchActiveSection(contentPlaceholder); // Fallback to placeholder
             return;
         }
         // Update Title
         const baseTitle = texts.keyDifferencesTitleBase || 'Key Differences for ';
         const cookieName = diffs.name || type.charAt(0).toUpperCase() + type.slice(1);
         keyDiffTitleH3.innerHTML = `${baseTitle} <span class="dynamic-cookie-name">${cookieName}</span>`;
         // Update Points
         keyDiffPointsDiv.innerHTML = `
             <div class="diff-point butter-diff"><h4><span class="emoji">üßà</span> <span data-lang-key="butterTitle">${texts.butterTitle}</span></h4><p>${diffs.butterMethod || ''}</p></div>
             <div class="diff-point chilling-diff"><h4><span class="emoji">ü•∂</span> <span data-lang-key="chillingTitle">${texts.chillingTitle}</span></h4><p>${diffs.chillingMethod || ''}</p></div>
             <div class="diff-point other-diff"><h4><span class="emoji">üìù</span> <span data-lang-key="otherNotesTitle">${texts.otherNotesTitle}</span></h4><p>${diffs.otherNotes || ''}</p></div>
         `;
         switchActiveSection(keyDifferencesContainer);
     }

    function displayRecipe(type) {
        const recipeHTML = generateRecipeHTML(type);
        if (!recipeHTML) {
            switchActiveSection(contentPlaceholder);
            return;
        }
        recipeDetailsContainer.innerHTML = recipeHTML;
        const theme = langData[currentLang]?.recipes[type]?.theme || '';
        recipeDetailsContainer.className = `details-section recipe-container ${theme}`; // Add theme

        // Re-attach delegated listener for units
        recipeDetailsContainer.removeEventListener('click', handleUnitChangeDelegation);
        recipeDetailsContainer.addEventListener('click', handleUnitChangeDelegation);
        // Update unit toggles visibility/active state within the newly added content
        updateUnitToggleVisibility(recipeDetailsContainer);
        updateUnitButtonActiveStates(recipeDetailsContainer);

        switchActiveSection(recipeDetailsContainer);
    }

    function displayEasterEgg(type) {
        const isThick = (type === 'thick');
        if (isThick) {
            generateEasterEggHTML(); // Populate content
            switchActiveSection(easterEggContainer);
        } else if (activeSection === easterEggContainer) {
            // If easter egg is currently shown but shouldn't be, switch back to recipe
            displayRecipe(selectedCookieType); // Re-display recipe
        }
         // Update fave badge visibility
         omarsFavBadge.classList.toggle('visible', isThick);
         omarsFavBadge.classList.toggle('visually-hidden', !isThick);
    }

    function showPlaceholder() {
        selectedCookieType = null;
        if (contentPlaceholder) {
            contentPlaceholder.innerHTML = langData[currentLang]?.placeholderSelect || 'Select a cookie!';
            switchActiveSection(contentPlaceholder);
        }
        if (heroCookieImage) {
            heroCookieImage.src = IMAGE_PATHS.comparison;
            heroCookieImage.alt = "Comparison of cookie types";
            heroCookieImage.classList.remove(IMAGE_CLASS_SHRUNK);
        }
        cookieCards.forEach(card => card.classList.remove('active'));
        omarsFavBadge?.classList.add('visually-hidden');
        omarsFavBadge?.classList.remove('visible');
    }

    // --- EVENT HANDLERS ---
    function handleCookieTypeSelect(event) {
        const card = event.currentTarget;
        const type = card.dataset.type;

        if (selectedCookieType === type) return; // Already selected

        selectedCookieType = type;
        cookieCards.forEach(c => c.classList.remove('active'));
        card.classList.add('active');
        card.setAttribute('aria-pressed', 'true'); // Accessibility

        // Update Hero Image
        const recipeTitle = langData[currentLang]?.recipes[type]?.title || type;
        heroCookieImage.src = IMAGE_PATHS[type] || IMAGE_PATHS.comparison;
        heroCookieImage.alt = recipeTitle;
        heroCookieImage.classList.add(IMAGE_CLASS_SHRUNK); // Add class to shrink

        // Display Content Sections (order matters for transition)
        displayKeyDifferences(type); // Display first
        // Use setTimeout to allow diffs to start transitioning before recipe appears
        setTimeout(() => {
             displayRecipe(type);
             // Display easter egg only if type is thick, potentially replacing recipe view
             displayEasterEgg(type);
        }, 50); // Small delay
    }

    // --- Scroll Animation Setup ---
    function setupScrollAnimations() {
        if (!('IntersectionObserver' in window)) {
            scrollFadeElements.forEach(el => el.classList.add('is-visible')); return;
        }
        const observerOptions = { root: null, rootMargin: '0px', threshold: 0.15 }; // Trigger slightly earlier
        const observerCallback = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible');
                    observer.unobserve(entry.target);
                }
            });
        };
        const observer = new IntersectionObserver(observerCallback, observerOptions);
        scrollFadeElements.forEach(el => observer.observe(el));
    }

    // --- INITIALIZATION ---
    function initialize() {
        // Set initial language and direction
        currentLang = document.documentElement.lang || DEFAULT_LANG;
        if (!langData[currentLang]) currentLang = DEFAULT_LANG;
        updateLanguage(currentLang); // Set initial text, placeholder, tips, yield

        // Initial hero image
        heroCookieImage.src = IMAGE_PATHS.comparison;
        heroCookieImage.alt = "Comparison of classic, thick, and thin cookies";

        // Set initial scaler value
        if (butterAmountInput) {
             butterAmountInput.value = STANDARD_BUTTER_GRAMS;
             butterAmountInput.placeholder = STANDARD_BUTTER_GRAMS.toString();
        }

        // Attach Event Listeners
        langButtons.forEach(button => button.addEventListener('click', () => handleLanguageChange(button.dataset.lang)));
        cookieCards.forEach(card => {
            card.addEventListener('click', handleCookieTypeSelect);
            card.addEventListener('keypress', (e) => { // Accessibility
                if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); handleCookieTypeSelect(e); }
            });
        });
        if (updateScaleBtn) updateScaleBtn.addEventListener('click', handleScaleUpdate);
        if (butterAmountInput) {
             butterAmountInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { e.preventDefault(); handleScaleUpdate(); } });
             butterAmountInput.addEventListener('change', handleScaleUpdate);
        }

        // Start scroll animations
        setupScrollAnimations();

        // Fade in body
        body.classList.add('loaded');
        console.log("Ultimate Cookie Guide Initialized!");
    }

    initialize();

}); // End DOMContentLoaded
