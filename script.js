// script.js

document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM fully loaded and parsed");

    // --- DATA ---
    // (In a real app, fetch this from JSON)

    const langData = {
        en: {
            pageTitle: "üç™ Omar's Cookie Lab! üç™",
            mainTitle: '<span class="emoji">üç™</span> Omar\'s Insanely Good Cookie Guide! <span class="emoji">üç™</span>',
            heroSubtitle: "Discover your perfect chocolate chip cookie!",
            chooseStyle: "Pick Your Cookie Destiny:",
            typeClassic: "The Classic Balanced Cookie",
            typeClassicShort: "Classic Balanced",
            typeClassicDesc: "The reliable, chewy crowd-pleaser with crisp edges. Your go-to standard.",
            typeThick: "The Thick & Gooey Cookie",
            typeThickShort: "Thick & Gooey",
            typeThickDesc: "Big, soft, slightly underbaked centre. Pure decadent comfort.",
            typeThin: "The Thin & Crispy Cookie",
            typeThinShort: "Thin & Crispy",
            typeThinDesc: "Maximum snap, buttery flavour, and delightful crunch. Like a fancy biscuit.",
            exploreRecipe: "Explore Recipe",
            omarsFavText: "Omar's Fave! üòâ",
            placeholderSelect: "üëÜ Select a cookie style above to load the recipe and details! ‚ú®",
            keyDifferencesTitleBase: "üîë Key Differences Breakdown!",
            keyDifferencesTitleFor: "for", // Used like "Key Differences for [Cookie Name]"
            yieldInfoBase: "Yield:",
            yieldInfoApprox: "approx.",
            unitLabelEn: "Units:",
            unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            unitImperial: "Imperial",
            unitMetric: "Metric",
            unitCups: "ÿ£ŸÉŸàÿßÿ®", // Arabic for Cups
            unitGrams: "ÿ¨ÿ±ÿßŸÖÿßÿ™", // Arabic for Grams
            scalerTitle: "üßà Customize Your Batch Size!",
            scalerDesc: "Enter your starting butter amount (grams) to scale the metric recipe.",
            scalerLabel: "Starting Butter (g):",
            scalerButton: "Update Scale",
            scalerNote: "Note: Only metric (gram) values are scaled. Imperial (cup/tbsp) units are approximate and not scaled.",
            recipeTitlePrefix: "Recipe:", // E.g., "Recipe: The Classic Cookie"
            ingredientsTitle: "Ingredients",
            stepsTitle: "Instructions",
            tipsTitle: "Omar's Pro Tips!",
            scienceNoteTitle: "üî¨ The Science Bit!",
            howToToastMilkPowderTitle: "Toasting Milk Powder (Optional but Recommended!)",
            howToToastMilkPowderDesc: "Spread milk powder on a baking sheet. Bake at 150¬∞C (300¬∞F) for 5-8 mins, stirring occasionally, until lightly golden and nutty. Watch carefully, it burns fast!",
            toastNutsTitle: "Toasting Nuts (Optional)",
            toastNutsDesc: "Spread nuts on a baking sheet. Bake at 175¬∞C (350¬∞F) for 6-10 mins until fragrant and lightly browned. Let cool before chopping.",
            finalTag: 'Nailed it? Show off your bake! Tag me on Insta: <a href="https://www.instagram.com/omarisavibe/" target="_blank">@omarisavibe</a> üòÑ',

            // Ingredients (Keys match recipeData)
            ingredientButter: "Unsalted Butter",
            ingredientSugarBrown: "Brown Sugar (Light or Dark)",
            ingredientSugarGran: "Granulated Sugar",
            ingredientEgg: "Large Egg(s)",
            ingredientEggYolk: "Large Egg Yolk(s)",
            ingredientVanilla: "Vanilla Extract",
            ingredientFlourAP: "All-Purpose Flour",
            ingredientMilkPowder: "Milk Powder (Whole Fat)",
            ingredientCornstarch: "Cornstarch",
            ingredientBakingSoda: "Baking Soda",
            ingredientSalt: "Salt (Fine Sea Salt)",
            ingredientChocolateChips: "Chocolate Chips or Chunks",
            ingredientNuts: "Chopped Nuts (Optional - e.g., Walnuts, Pecans)",
            ingredientFlakySalt: "Flaky Sea Salt (for finishing)",

            // Units
            unitGram: "g",
            unitMl: "ml",
            unitCup: "cup(s)",
            unitTbsp: "tbsp",
            unitTsp: "tsp",
            unitStick: "stick(s)",
            unitOz: "oz",
            unitWhole: "whole",
            unitPinch: "pinch",

            // Notes / Modifiers
            noteRoomTemp: "room temperature",
            noteMelted: "melted",
            noteCold: "cold, cubed",
            notePacked: "packed",
            noteToasted: "toasted (see how-to)",
            noteOptional: "optional",
            noteFinishing: "for finishing",
            noteVaries: "amount varies",

            // Key Differences Text (Keys match keyDifferencesData)
            diffTextureTitle: "Texture",
            diffTextureClassic: "Chewy center, crisp edges. The classic contrast.",
            diffTextureThick: "Soft, doughy, gooey center. Minimal crispness.",
            diffTextureThin: "Uniformly crisp and snappy throughout. Buttery.",
            diffSpreadTitle: "Spread & Thickness",
            diffSpreadClassic: "Moderate spread, medium thickness.",
            diffSpreadThick: "Minimal spread, very thick and tall.",
            diffSpreadThin: "Significant spread, very thin.",
            diffFlavorTitle: "Flavor Profile",
            diffFlavorClassic: "Balanced butterscotch and vanilla notes.",
            diffFlavorThick: "Rich, buttery, slightly more intense due to less spread.",
            diffFlavorThin: "Pronounced buttery and caramelized sugar flavor.",
            diffChillTitle: "Chill Time <span class='emoji'>ü•∂</span>",
            diffChillClassic: "<span class='highlight'>Recommended (30min+)</span>: Enhances texture and prevents over-spreading.",
            diffChillThick: "<span class='critical'>Required (Minimum 1-2 hours)</span>: Essential for thickness and preventing puddles.",
            diffChillThin: "<span class='highlight'>Optional/Short (15-30min)</span>: Mainly for easier handling, not required for crispness.",
            diffButterTitle: "Butter State <span class='emoji'>üßà</span>",
            diffButterClassic: "Softened / Room Temperature.",
            diffButterThick: "Melted (often cooled slightly).",
            diffButterThin: "Melted.",
            diffSugarTitle: "Sugar Ratio",
            diffSugarClassic: "Balanced brown and white sugar.",
            diffSugarThick: "Higher ratio of brown sugar usually.",
            diffSugarThin: "Higher ratio of white sugar often used for crispness.",

            // Steps (Keys match recipeData steps)
            stepPrep: "Preheat oven to 190¬∞C (375¬∞F). Line baking sheets with parchment paper.",
            stepPrepThick: "Line baking sheets with parchment paper. (Oven preheating comes later).",
            stepPrepThin: "Preheat oven to 175¬∞C (350¬∞F). Line baking sheets with parchment paper.",
            stepCreamButterSugar: "In a large bowl, cream together the <span class='highlight'>softened butter</span>, brown sugar, and granulated sugar until light and fluffy (about 2-3 minutes).",
            stepCreamButterSugarThick: "In a large bowl, whisk together the <span class='highlight'>melted (and slightly cooled) butter</span>, brown sugar, and granulated sugar until combined. It won't be fluffy.",
            stepCreamButterSugarThin: "In a large bowl, whisk together the <span class='highlight'>melted butter</span>, brown sugar, and granulated sugar until well combined.",
            stepAddEggsVanilla: "Beat in the egg(s) and vanilla extract until just combined. Don't overmix.",
            stepAddEggsVanillaThick: "Beat in the egg(s), egg yolk(s), and vanilla extract until just combined.",
            stepCombineDry: "In a separate bowl, whisk together the flour, milk powder (if using, toasted or untoasted), cornstarch (if using), baking soda, and salt.",
            stepCombineDryThin: "In a separate bowl, whisk together the flour, baking soda, and salt.",
            stepAddDryToWet: "Gradually add the dry ingredients to the wet ingredients, mixing on low speed (or by hand) until <span class='critical'>just combined</span>. Be careful not to overmix.",
            stepFoldInMixins: "Stir in the chocolate chips and nuts (if using).",
            stepChillClassic: "<span class='highlight'>Chill Dough (Recommended):</span> Cover the bowl and refrigerate for at least 30 minutes (or up to 72 hours) for better texture and less spread.",
            stepChillThick: "<span class='critical'>Chill Dough (Required):</span> Cover the bowl tightly and refrigerate for <span class='highlight'>at least 1-2 hours</span>, or ideally overnight (up to 72 hours). This is crucial for thickness.",
            stepChillThin: "<span class='highlight'>Chill Dough (Optional):</span> You can chill for 15-30 minutes for easier scooping, but it's not essential for the final texture.",
            stepPreheatThick: "Preheat oven to 200¬∞C (400¬∞F) near the end of the chilling time.", // Higher temp for thick
            stepScoopClassic: "Scoop rounded tablespoons (about 45-50g) of dough onto the prepared baking sheets, leaving space between them.",
            stepScoopThick: "Scoop large mounds of dough (about 85-100g or 1/3 cup) onto the prepared baking sheets. Leave <span class='critical'>plenty of space</span> (maybe only 6 per large sheet). Don't flatten them.",
            stepScoopThin: "Scoop small, slightly flattened tablespoons (about 30-35g) of dough onto the prepared baking sheets, leaving ample space as they will spread.",
            stepBakeClassic: "Bake for 9-12 minutes, or until the edges are golden brown and the centers look slightly soft.",
            stepBakeThick: "Bake for 11-14 minutes. The edges should be set and lightly golden, but the centers will look <span class='highlight'>very soft and slightly underdone</span>. This is key for gooiness.",
            stepBakeThin: "Bake for 10-13 minutes, or until the cookies are spread thin, golden brown all over, and the edges are visibly crisping.",
            stepCoolClassic: "Let cookies cool on the baking sheets for 5 minutes before transferring them to a wire rack to cool completely.",
            stepCoolThick: "Let cookies cool on the baking sheets for <span class='highlight'>10-15 minutes</span> (they need to set) before carefully transferring to a wire rack.",
            stepCoolThin: "Let cookies cool on the baking sheets for 2-3 minutes before transferring them to a wire rack to cool completely. They will crisp up as they cool.",
            stepFinishSprinkle: "If desired, sprinkle with flaky sea salt immediately after removing from the oven.",

            // Tips Text (Keys match tipsData)
            tipMeasureFlour: "Spoon flour into your measuring cup and level it off. Don't scoop directly from the bag ‚Äì this packs it in and leads to dry cookies!",
            tipRoomTemp: "Use <span class='highlight'>room temperature eggs and butter</span> (for classic/softened butter recipes). They combine better for a smoother batter.",
            tipDontOvermix: "<span class='critical'>Don't overmix</span> the dough, especially after adding flour. Mix *just* until combined to keep cookies tender.",
            tipChillDough: "Chilling the dough isn't just for thickness! It <span class='highlight'>deepens flavor</span> and controls spread. Even 30 minutes helps most recipes.",
            tipUnderbakeSlightly: "For chewy or gooey cookies, <span class='highlight'>pull them out when the center looks *slightly* underdone</span>. They'll finish baking on the hot pan.",
            tipParchmentPaper: "Always use parchment paper or a silicone mat. It prevents sticking and promotes even baking.",
            tipCoolingRack: "Transfer cookies to a wire rack after a few minutes on the pan. This stops the bottoms from over-baking and helps them crisp (if applicable).",
            tipChocolateQuality: "Use good quality chocolate chips or chunks. It makes a HUGE difference in flavor!",
            tipToastedMilkPowder: "Toasted milk powder adds a <span class='highlight'>nutty, caramelized depth</span>. Try it, especially in the classic or thick cookies!",
            tipFlakySalt: "A sprinkle of flaky sea salt on top <span class='highlight'>balances sweetness</span> and adds a professional touch. Highly recommend!",
            tipOvenTemp: "Oven temperatures vary! Get an oven thermometer to ensure accuracy. Baking times are guidelines.",
            tipUniformScoops: "Use a cookie scoop for <span class='highlight'>uniform size and even baking</span>. Makes your batch look great too!",

            // Easter Egg
            easterEggTitle: "ü§´ Omar's ULTIMATE Stuffed Cookie Secret!",
            easterEggIntro: "Alright, alright, you found the *real* treasure! This is how I make those insane, bakery-style <span class='highlight'>MEGA Stuffed Cookies</span>. It builds on the 'Thick & Gooey' base.",
            easterEggCoreConcept: "The Core Idea:",
            easterEggCoreDesc: "We're taking the chilled 'Thick & Gooey' dough and wrapping it around a frozen ball of deliciousness (like Nutella, Biscoff, ganache, or even another cookie dough!).",
            easterEggStep1: "Make the 'Thick & Gooey' dough as per the recipe. <span class='critical'>Chill it thoroughly (at least 2-3 hours).</span>",
            easterEggStep2: "Prepare your filling: Scoop balls (about 1-1.5 tbsp) of Nutella, Biscoff spread, firm ganache, or cream cheese onto parchment paper. <span class='critical'>Freeze solid (at least 1 hour).</span>",
            easterEggStep3: "Take a large scoop of the chilled cookie dough (maybe 1.5x the normal 'thick' size - ~120-140g). Flatten it in your palm.",
            easterEggStep4: "Place a <span class='highlight'>frozen filling ball</span> in the center.",
            easterEggStep5: "Carefully wrap the cookie dough around the filling, sealing it completely. Roll gently into a ball.",
            easterEggStep6: "<span class='critical'>Chill the stuffed dough balls AGAIN for at least 30-60 minutes.</span> This prevents the filling from exploding.",
            easterEggStep7: "Bake at a slightly lower temperature than the regular thick cookies, maybe <span class='highlight'>190¬∞C (375¬∞F)</span>, for a bit longer, <span class='highlight'>15-18 minutes</span>. Watch for edges setting.",
            easterEggStep8: "<span class='critical'>Cool COMPLETELY</span> on the baking sheet for at least 15-20 minutes before *carefully* moving. They are fragile when hot!",
            easterEggEnjoy: "Enjoy the ridiculously decadent results! üòâ",
            stuffedCookieAltText: "A large, thick cookie cut in half revealing a gooey Nutella center.",

            // Science Notes
            scienceClassic: "The balance of softened butter (creamed for air), sugars, and flour creates the classic texture. Chilling allows flour hydration for chewiness and prevents excessive spread.",
            scienceThick: "Melted butter coats flour differently, reducing gluten development. More brown sugar adds moisture and acidity (reacting with baking soda for lift without much spread). Cornstarch absorbs moisture for tenderness. <span class='critical'>Chilling is vital</span> to solidify the fat, preventing the dough from spreading rapidly in the hot oven, allowing it to bake upwards.",
            scienceThin: "Melted butter and often more white sugar promote spread. Less flour or leavening compared to fat/sugar encourages a thinner result. Baking at a moderate temperature allows time for spreading before setting.",

            // Yields
            yieldClassic: "18-24 cookies",
            yieldThick: "10-12 large cookies",
            yieldThin: "24-30 cookies",
        },
        ar: {
            pageTitle: "üç™ ŸÖÿπŸÖŸÑ ŸÉŸàŸÉŸäÿ≤ ÿπŸÖÿ±! üç™",
            mainTitle: '<span class="emoji">üç™</span> ÿØŸÑŸäŸÑ ÿπŸÖÿ± ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ±ŸáŸäÿ®ÿ©! <span class="emoji">üç™</span>',
            heroSubtitle: "ÿßŸÉÿ™ÿ¥ŸÅ ŸàÿµŸÅÿ© ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑŸÖÿ´ÿßŸÑŸäÿ© ŸÑŸÉ!",
            chooseStyle: "ÿßÿÆÿ™ÿ± ŸÖÿµŸäÿ± ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ:",
            typeClassic: "ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ© ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜÿ©",
            typeClassicShort: "ŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ© ŸÖÿ™Ÿàÿßÿ≤ŸÜÿ©",
            typeClassicDesc: "ÿßŸÑŸÖŸàÿ´ŸàŸÇÿ©ÿå ÿßŸÑÿ∑ÿ±Ÿäÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ±ÿ∂Ÿä ÿßŸÑÿ¨ŸÖŸäÿπ ÿ®ÿ≠ŸàÿßŸÅ ŸÖŸÇÿ±ŸÖÿ¥ÿ©. ÿÆŸäÿßÿ±ŸÉ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä.",
            typeThick: "ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©",
            typeThickShort: "ÿ≥ŸÖŸäŸÉÿ© Ÿàÿ∑ÿ±Ÿäÿ©",
            typeThickDesc: "ŸÉÿ®Ÿäÿ±ÿ©ÿå ÿ∑ÿ±Ÿäÿ©ÿå ÿ®ŸÇŸÑÿ® ÿ∫ŸÜŸä ÿ¨ÿØŸãÿß. ŸÇŸÖÿ© ÿßŸÑÿØŸÑÿßŸÑ ŸàÿßŸÑÿ±ÿßÿ≠ÿ©.",
            typeThin: "ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ±ŸÅŸäÿπÿ© ŸàÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ©",
            typeThinShort: "ÿ±ŸÅŸäÿπÿ© ŸàŸÖŸÇÿ±ŸÖÿ¥ÿ©",
            typeThinDesc: "ÿ£ŸÇÿµŸâ ŸÇÿ±ŸÖÿ¥ÿ©ÿå ŸÜŸÉŸáÿ© ÿ≤ÿ®ÿØŸäÿ© ÿ±ÿßÿ¶ÿπÿ©. ŸÖÿ´ŸÑ ÿßŸÑÿ®ÿ≥ŸÉŸàŸäÿ™ ÿßŸÑŸÅÿßÿÆÿ±.",
            exploreRecipe: "ÿßÿ≥ÿ™ŸÉÿ¥ŸÅ ÿßŸÑŸàÿµŸÅÿ©",
            omarsFavText: "ŸÖŸÅÿ∂ŸÑÿ© ÿπŸÖÿ±! üòâ",
            placeholderSelect: "üëÜ ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ŸÉŸàŸÉŸäÿ≤ ÿ£ÿπŸÑÿßŸá ŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸàÿµŸÅÿ© ŸàÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ! ‚ú®",
            keyDifferencesTitleBase: "üîë ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÅÿ±ŸàŸÇÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©!",
            keyDifferencesTitleFor: "ŸÑŸÄŸê", // Used like "Key Differences for [Cookie Name]" -> "ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÅÿ±ŸàŸÇÿßÿ™ ŸÑŸÄ [ÿßÿ≥ŸÖ ÿßŸÑŸÉŸàŸÉŸäÿ≤]"
            yieldInfoBase: "ÿßŸÑŸÉŸÖŸäÿ©:",
            yieldInfoApprox: "ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß",
            unitLabelEn: "Units:", // Keep EN label visible in AR for clarity maybe? Or hide?
            unitLabelAr: "ÿßŸÑŸàÿ≠ÿØÿßÿ™:",
            unitImperial: "ÿ•ŸÖÿ®ÿ±ŸäÿßŸÑ", // Keep? Or remove Imperial for AR? Let's keep for now.
            unitMetric: "ŸÖÿ™ÿ±Ÿä", // Keep?
            unitCups: "ÿ£ŸÉŸàÿßÿ®",
            unitGrams: "ÿ¨ÿ±ÿßŸÖÿßÿ™",
            scalerTitle: "üßà ÿπÿØŸëŸÑ ÿ≠ÿ¨ŸÖ ÿØŸÅÿπÿ™ŸÉ!",
            scalerDesc: "ÿ£ÿØÿÆŸÑ ŸÉŸÖŸäÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿäÿ© (ÿ®ÿßŸÑÿ¨ÿ±ÿßŸÖ) ŸÑÿ™ÿπÿØŸäŸÑ ŸÖŸÇÿßÿØŸäÿ± ÿßŸÑŸàÿµŸÅÿ© ÿßŸÑŸÖÿ™ÿ±Ÿäÿ©.",
            scalerLabel: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿäÿ© (ÿ¨ŸÖ):",
            scalerButton: "ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÇÿßÿØŸäÿ±",
            scalerNote: "ŸÖŸÑÿßÿ≠ÿ∏ÿ©: Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÖÿ™ÿ±Ÿäÿ© (ÿ®ÿßŸÑÿ¨ÿ±ÿßŸÖ) ŸÅŸÇÿ∑. ÿßŸÑŸàÿ≠ÿØÿßÿ™ ÿßŸÑÿ•ŸÖÿ®ÿ±ŸäÿßŸÑŸäÿ© (ÿ£ŸÉŸàÿßÿ®/ŸÖŸÑÿßÿπŸÇ) ÿ™ŸÇÿ±Ÿäÿ®Ÿäÿ© ŸàŸÑÿß Ÿäÿ™ŸÖ ÿ™ÿπÿØŸäŸÑŸáÿß.",
            recipeTitlePrefix: "ŸàÿµŸÅÿ©:", // E.g., "ŸàÿµŸÅÿ©: ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ©"
            ingredientsTitle: "ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™",
            stepsTitle: "ÿßŸÑÿÆÿ∑Ÿàÿßÿ™",
            tipsTitle: "ŸÜÿµÿßÿ¶ÿ≠ ÿπŸÖÿ± ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©!",
            scienceNoteTitle: "üî¨ ÿßŸÑÿ¨ÿßŸÜÿ® ÿßŸÑÿπŸÑŸÖŸä!",
            howToToastMilkPowderTitle: "ÿ™ÿ≠ŸÖŸäÿµ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸÉŸÜ ŸÖŸàÿµŸâ ÿ®Ÿá!)",
            howToToastMilkPowderDesc: "Ÿàÿ≤Ÿëÿπ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® ÿπŸÑŸâ ÿµŸäŸÜŸäÿ© ÿÆÿ®ÿ≤. ÿßÿÆÿ®ÿ≤Ÿáÿß ÿπŸÑŸâ 150¬∞ŸÖ (300¬∞ŸÅ) ŸÑŸÖÿØÿ© 5-8 ÿØŸÇÿßÿ¶ŸÇÿå ŸÖÿπ ÿßŸÑÿ™ÿ≠ÿ±ŸäŸÉ ŸÖŸÜ ÿ≠ŸäŸÜ ŸÑÿ¢ÿÆÿ±ÿå ÿ≠ÿ™Ÿâ Ÿäÿµÿ®ÿ≠ ŸÑŸàŸÜŸáÿß ÿ∞Ÿáÿ®ŸäŸãÿß ŸÅÿßÿ™ÿ≠Ÿãÿß Ÿàÿ±ÿßÿ¶ÿ≠ÿ™Ÿáÿß ÿ™ÿ¥ÿ®Ÿá ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™. ÿ±ÿßŸÇÿ®Ÿáÿß ÿ¨ŸäÿØŸãÿßÿå ÿ™ÿ≠ÿ™ÿ±ŸÇ ÿ®ÿ≥ÿ±ÿπÿ©!",
            toastNutsTitle: "ÿ™ÿ≠ŸÖŸäÿµ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)",
            toastNutsDesc: "Ÿàÿ≤Ÿëÿπ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿπŸÑŸâ ÿµŸäŸÜŸäÿ© ÿÆÿ®ÿ≤. ÿßÿÆÿ®ÿ≤Ÿáÿß ÿπŸÑŸâ 175¬∞ŸÖ (350¬∞ŸÅ) ŸÑŸÖÿØÿ© 6-10 ÿØŸÇÿßÿ¶ŸÇ ÿ≠ÿ™Ÿâ ÿ™ŸÅŸàÿ≠ ÿ±ÿßÿ¶ÿ≠ÿ™Ÿáÿß Ÿàÿ™ÿµÿ®ÿ≠ ÿ∞Ÿáÿ®Ÿäÿ© ÿßŸÑŸÑŸàŸÜ ŸÇŸÑŸäŸÑÿßŸã. ÿØÿπŸáÿß ÿ™ÿ®ÿ±ÿØ ŸÇÿ®ŸÑ ÿßŸÑÿ™ŸÇÿ∑Ÿäÿπ.",
            finalTag: 'ŸÜÿ¨ÿ≠ÿ™ÿü ÿ¥ÿßÿ±ŸÉŸÜÿß ÿ•ÿ®ÿØÿßÿπŸÉ! ÿßÿπŸÖŸÑ ŸÑŸä ÿ™ÿßÿ¨ ÿπŸÑŸâ ÿßŸÜÿ≥ÿ™ÿ¨ÿ±ÿßŸÖ: <a href="https://www.instagram.com/omarisavibe/" target="_blank">@omarisavibe</a> üòÑ',

            // Ingredients (AR)
            ingredientButter: "ÿ≤ÿ®ÿØÿ© ÿ∫Ÿäÿ± ŸÖŸÖŸÑÿ≠ÿ©",
            ingredientSugarBrown: "ÿ≥ŸÉÿ± ÿ®ŸÜŸä (ŸÅÿßÿ™ÿ≠ ÿ£Ÿà ÿ∫ÿßŸÖŸÇ)",
            ingredientSugarGran: "ÿ≥ŸÉÿ± ÿ≠ÿ®Ÿäÿ®ÿßÿ™ ÿ£ÿ®Ÿäÿ∂",
            ingredientEgg: "ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (ÿ®Ÿäÿ∂)",
            ingredientEggYolk: "ÿµŸÅÿßÿ± ÿ®Ÿäÿ∂ÿ© ŸÉÿ®Ÿäÿ±ÿ© (ÿµŸÅÿßÿ±)",
            ingredientVanilla: "ÿÆŸÑÿßÿµÿ© ŸÅÿßŸÜŸäŸÑŸäÿß",
            ingredientFlourAP: "ÿØŸÇŸäŸÇ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ∫ÿ±ÿßÿ∂",
            ingredientMilkPowder: "ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® (ŸÉÿßŸÖŸÑ ÿßŸÑÿØÿ≥ŸÖ)",
            ingredientCornstarch: "ŸÜÿ¥ÿß ÿ∞ÿ±ÿ©",
            ingredientBakingSoda: "ÿµŸàÿØÿß ÿßŸÑÿÆÿ®ÿ≤ (ÿ®ŸäŸÉÿ±ÿ®ŸàŸÜÿßÿ™ ÿßŸÑÿµŸàÿØŸäŸàŸÖ)",
            ingredientSalt: "ŸÖŸÑÿ≠ (ŸÖŸÑÿ≠ ÿ®ÿ≠ÿ± ŸÜÿßÿπŸÖ)",
            ingredientChocolateChips: "ÿ±ŸÇÿßÿ¶ŸÇ ÿ£Ÿà ŸÇÿ∑ÿπ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©",
            ingredientNuts: "ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖŸÇÿ∑ÿπÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä - ŸÖÿ´ŸÑ ÿßŸÑÿ¨Ÿàÿ≤ÿå ÿßŸÑÿ®ŸäŸÉÿßŸÜ)",
            ingredientFlakySalt: "ŸÖŸÑÿ≠ ÿ®ÿ≠ÿ±Ÿä ŸÇÿ¥ÿßÿ±Ÿä (ŸÑŸÑÿ™ÿ≤ŸäŸäŸÜ)",

            // Units (AR)
            unitGram: "ÿ¨ŸÖ",
            unitMl: "ŸÖŸÑ",
            unitCup: "ŸÉŸàÿ®",
            unitTbsp: "ŸÖŸÑÿπŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ©",
            unitTsp: "ŸÖŸÑÿπŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ©",
            unitStick: "ÿ•ÿµÿ®ÿπ", // Or keep "stick"? "ÿ•ÿµÿ®ÿπ" is literal
            unitOz: "ÿ£ŸàŸÜÿµÿ©",
            unitWhole: "ŸÉÿßŸÖŸÑÿ©",
            unitPinch: "ÿ±ÿ¥ÿ©",

            // Notes / Modifiers (AR)
            noteRoomTemp: "ÿ®ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©",
            noteMelted: "ŸÖÿ∞ÿßÿ®ÿ©",
            noteCold: "ÿ®ÿßÿ±ÿØÿ©ÿå ŸÖŸÇÿ∑ÿπÿ© ŸÖŸÉÿπÿ®ÿßÿ™",
            notePacked: "ŸÖŸÉÿ®Ÿàÿ≥",
            noteToasted: "ŸÖÿ≠ŸÖÿµÿ© (ÿßŸÜÿ∏ÿ± ÿßŸÑÿ∑ÿ±ŸäŸÇÿ©)",
            noteOptional: "ÿßÿÆÿ™Ÿäÿßÿ±Ÿä",
            noteFinishing: "ŸÑŸÑÿ™ÿ≤ŸäŸäŸÜ ÿßŸÑŸÜŸáÿßÿ¶Ÿä",
            noteVaries: "ÿßŸÑŸÉŸÖŸäÿ© ÿ™ÿÆÿ™ŸÑŸÅ",

            // Key Differences Text (AR)
            diffTextureTitle: "ÿßŸÑŸÇŸàÿßŸÖ",
            diffTextureClassic: "ŸÇŸÑÿ® ÿ∑ÿ±Ÿäÿå ÿ≠ŸàÿßŸÅ ŸÖŸÇÿ±ŸÖÿ¥ÿ©. ÿßŸÑÿ™ÿ®ÿßŸäŸÜ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸä.",
            diffTextureThick: "ŸÇŸÑÿ® ŸÜÿßÿπŸÖÿå ÿπÿ¨ŸäŸÜŸäÿå ŸàŸÑÿ≤ÿ¨. ŸÇÿ±ŸÖÿ¥ÿ© ŸÇŸÑŸäŸÑÿ©.",
            diffTextureThin: "ŸÖŸÇÿ±ŸÖÿ¥ÿ© ŸàŸáÿ¥ÿ© ÿ®ÿ¥ŸÉŸÑ ŸÖÿ™ÿ≥ÿßŸàŸç. ÿ≤ÿ®ÿØŸäÿ©.",
            diffSpreadTitle: "ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ŸàÿßŸÑÿ≥ŸÖÿßŸÉÿ©",
            diffSpreadClassic: "ÿßŸÜÿ™ÿ¥ÿßÿ± ŸÖÿπÿ™ÿØŸÑÿå ÿ≥ŸÖÿßŸÉÿ© ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©.",
            diffSpreadThick: "ÿßŸÜÿ™ÿ¥ÿßÿ± ŸÇŸÑŸäŸÑÿå ÿ≥ŸÖŸäŸÉÿ© ÿ¨ÿØŸãÿß ŸàÿπÿßŸÑŸäÿ©.",
            diffSpreadThin: "ÿßŸÜÿ™ÿ¥ÿßÿ± ŸÉÿ®Ÿäÿ±ÿå ÿ±ŸÅŸäÿπÿ© ÿ¨ÿØŸãÿß.",
            diffFlavorTitle: "ÿßŸÑŸÜŸÉŸáÿ©",
            diffFlavorClassic: "ŸÜŸÉŸáÿßÿ™ ŸÖÿ™Ÿàÿßÿ≤ŸÜÿ© ŸÖŸÜ ÿßŸÑŸÉÿ±ÿßŸÖŸäŸÑ ŸàÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.",
            diffFlavorThick: "ÿ∫ŸÜŸäÿ©ÿå ÿ≤ÿ®ÿØŸäÿ©ÿå ÿ£ŸÉÿ´ÿ± ŸÉÿ´ÿßŸÅÿ© ŸÇŸÑŸäŸÑÿßŸã ÿ®ÿ≥ÿ®ÿ® ŸÇŸÑÿ© ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±.",
            diffFlavorThin: "ŸÜŸÉŸáÿ© ÿ≤ÿ®ÿØŸäÿ© Ÿàÿ≥ŸÉÿ± ŸÖŸÉÿ±ŸÖŸÑ Ÿàÿßÿ∂ÿ≠ÿ©.",
            diffChillTitle: "ŸàŸÇÿ™ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ <span class='emoji'>ü•∂</span>",
            diffChillClassic: "<span class='highlight'>ŸÖŸàÿµŸâ ÿ®Ÿá (30 ÿØŸÇŸäŸÇÿ©+)</span>: Ÿäÿ≠ÿ≥ŸÜ ÿßŸÑŸÇŸàÿßŸÖ ŸàŸäŸÖŸÜÿπ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ÿßŸÑÿ≤ÿßÿ¶ÿØ.",
            diffChillThick: "<span class='critical'>ŸÖÿ∑ŸÑŸàÿ® (1-2 ÿ≥ÿßÿπÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ)</span>: ÿ£ÿ≥ÿßÿ≥Ÿä ŸÑŸÑÿ≥ŸÖÿßŸÉÿ© ŸàŸÖŸÜÿπ ÿßŸÑÿ∞Ÿàÿ®ÿßŸÜ.",
            diffChillThin: "<span class='highlight'>ÿßÿÆÿ™Ÿäÿßÿ±Ÿä/ŸÇÿµŸäÿ± (15-30 ÿØŸÇŸäŸÇÿ©)</span>: ÿ®ÿ¥ŸÉŸÑ ÿ£ÿ≥ÿßÿ≥Ÿä ŸÑÿ≥ŸáŸàŸÑÿ© ÿßŸÑÿ™ÿπÿßŸÖŸÑÿå ÿ∫Ÿäÿ± ŸÖÿ∑ŸÑŸàÿ® ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©.",
            diffButterTitle: "ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© <span class='emoji'>üßà</span>",
            diffButterClassic: "ÿ∑ÿ±Ÿäÿ© / ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©.",
            diffButterThick: "ŸÖÿ∞ÿßÿ®ÿ© (ÿ∫ÿßŸÑÿ®Ÿãÿß ŸÖÿ®ÿ±ÿØÿ© ŸÇŸÑŸäŸÑÿßŸã).",
            diffButterThin: "ŸÖÿ∞ÿßÿ®ÿ©.",
            diffSugarTitle: "ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿ≥ŸÉÿ±",
            diffSugarClassic: "ÿ™Ÿàÿßÿ≤ŸÜ ÿ®ŸäŸÜ ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä ŸàÿßŸÑÿ£ÿ®Ÿäÿ∂.",
            diffSugarThick: "ÿπÿßÿØÿ© ŸÜÿ≥ÿ®ÿ© ÿ£ÿπŸÑŸâ ŸÖŸÜ ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä.",
            diffSugarThin: "ÿ∫ÿßŸÑÿ®Ÿãÿß ŸÜÿ≥ÿ®ÿ© ÿ£ÿπŸÑŸâ ŸÖŸÜ ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂ ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©.",

            // Steps (AR)
            stepPrep: "ÿ≥ÿÆŸëŸÜ ÿßŸÑŸÅÿ±ŸÜ ÿ•ŸÑŸâ 190¬∞ŸÖ (375¬∞ŸÅ). ÿ®ÿ∑ŸëŸÜ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ÿ®Ÿàÿ±ŸÇ ÿ≤ÿ®ÿØÿ©.",
            stepPrepThick: "ÿ®ÿ∑ŸëŸÜ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ÿ®Ÿàÿ±ŸÇ ÿ≤ÿ®ÿØÿ©. (ÿ™ÿ≥ÿÆŸäŸÜ ÿßŸÑŸÅÿ±ŸÜ ŸÑÿßÿ≠ŸÇŸãÿß).",
            stepPrepThin: "ÿ≥ÿÆŸëŸÜ ÿßŸÑŸÅÿ±ŸÜ ÿ•ŸÑŸâ 175¬∞ŸÖ (350¬∞ŸÅ). ÿ®ÿ∑ŸëŸÜ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ÿ®Ÿàÿ±ŸÇ ÿ≤ÿ®ÿØÿ©.",
            stepCreamButterSugar: "ŸÅŸä Ÿàÿπÿßÿ° ŸÉÿ®Ÿäÿ±ÿå ÿßÿÆŸÅŸÇ <span class='highlight'>ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ∑ÿ±Ÿäÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä ŸàÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂ ŸÖÿπŸãÿß ÿ≠ÿ™Ÿâ Ÿäÿµÿ®ÿ≠ ÿßŸÑŸÖÿ≤Ÿäÿ¨ ÿÆŸÅŸäŸÅŸãÿß Ÿàÿ±ŸÇŸäŸÇŸãÿß (ÿ≠ŸàÿßŸÑŸä 2-3 ÿØŸÇÿßÿ¶ŸÇ).",
            stepCreamButterSugarThick: "ŸÅŸä Ÿàÿπÿßÿ° ŸÉÿ®Ÿäÿ±ÿå ÿßÿÆŸÑÿ∑ <span class='highlight'>ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ∞ÿßÿ®ÿ© (ŸàÿßŸÑŸÖÿ®ÿ±ÿØÿ© ŸÇŸÑŸäŸÑÿßŸã)</span> ŸàÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä ŸàÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂ ŸÖÿπŸãÿß ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥Ÿàÿß. ŸÑŸÜ ŸäŸÉŸàŸÜ ÿßŸÑŸÖÿ≤Ÿäÿ¨ ÿ±ŸÇŸäŸÇŸãÿß.",
            stepCreamButterSugarThin: "ŸÅŸä Ÿàÿπÿßÿ° ŸÉÿ®Ÿäÿ±ÿå ÿßÿÆŸÑÿ∑ <span class='highlight'>ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ∞ÿßÿ®ÿ©</span> ŸàÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä ŸàÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂ ŸÖÿπŸãÿß ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥Ÿàÿß ÿ¨ŸäÿØŸãÿß.",
            stepAddEggsVanilla: "ÿ£ÿ∂ŸÅ ÿßŸÑÿ®Ÿäÿ∂ ŸàÿÆŸÑÿßÿµÿ© ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ŸàÿßÿÆŸÅŸÇ ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥ ÿßŸÑŸÖÿ≤Ÿäÿ¨ ŸÅŸÇÿ∑. ŸÑÿß ÿ™ŸÅÿ±ÿ∑ ŸÅŸä ÿßŸÑÿÆŸÅŸÇ.",
            stepAddEggsVanillaThick: "ÿ£ÿ∂ŸÅ ÿßŸÑÿ®Ÿäÿ∂ ŸàÿµŸÅÿßÿ± ÿßŸÑÿ®Ÿäÿ∂ ŸàÿÆŸÑÿßÿµÿ© ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ŸàÿßÿÆŸÅŸÇ ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥ ÿßŸÑŸÖÿ≤Ÿäÿ¨ ŸÅŸÇÿ∑.",
            stepCombineDry: "ŸÅŸä Ÿàÿπÿßÿ° ŸÖŸÜŸÅÿµŸÑÿå ÿßÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® (ÿ•ÿ∞ÿß ÿßÿ≥ÿ™ÿÆÿØŸÖÿ™ÿå ŸÖÿ≠ŸÖÿµÿ© ÿ£Ÿà ÿ∫Ÿäÿ± ŸÖÿ≠ŸÖÿµÿ©)ÿå ÿßŸÑŸÜÿ¥ÿß (ÿ•ÿ∞ÿß ÿßÿ≥ÿ™ÿÆÿØŸÖÿ™)ÿå ÿµŸàÿØÿß ÿßŸÑÿÆÿ®ÿ≤ÿå ŸàÿßŸÑŸÖŸÑÿ≠.",
            stepCombineDryThin: "ŸÅŸä Ÿàÿπÿßÿ° ŸÖŸÜŸÅÿµŸÑÿå ÿßÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇÿå ÿµŸàÿØÿß ÿßŸÑÿÆÿ®ÿ≤ÿå ŸàÿßŸÑŸÖŸÑÿ≠.",
            stepAddDryToWet: "ÿ£ÿ∂ŸÅ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑÿ¨ÿßŸÅÿ© ÿ™ÿØÿ±Ÿäÿ¨ŸäŸãÿß ÿ•ŸÑŸâ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑÿ±ÿ∑ÿ®ÿ©ÿå ŸàÿßÿÆŸÑÿ∑ ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© (ÿ£Ÿà ŸäÿØŸàŸäŸãÿß) ÿ≠ÿ™Ÿâ <span class='critical'>Ÿäÿ™ÿ¨ÿßŸÜÿ≥ ÿßŸÑŸÖÿ≤Ÿäÿ¨ ŸÅŸÇÿ∑</span>. ÿßÿ≠ÿ±ÿµ ÿπŸÑŸâ ÿπÿØŸÖ ÿßŸÑÿ•ŸÅÿ±ÿßÿ∑ ŸÅŸä ÿßŸÑÿÆŸÑÿ∑.",
            stepFoldInMixins: "ÿ£ÿ∂ŸÅ ÿ±ŸÇÿßÿ¶ŸÇ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ (ÿ•ÿ∞ÿß ÿßÿ≥ÿ™ÿÆÿØŸÖÿ™) ŸàŸÇŸÑŸëÿ®.",
            stepChillClassic: "<span class='highlight'>ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ŸÖŸàÿµŸâ ÿ®Ÿá):</span> ÿ∫ÿ∑Ÿë ÿßŸÑŸàÿπÿßÿ° Ÿàÿ∂ÿπŸá ŸÅŸä ÿßŸÑÿ´ŸÑÿßÿ¨ÿ© ŸÑŸÖÿØÿ© 30 ÿØŸÇŸäŸÇÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ (ÿ£Ÿà ÿ≠ÿ™Ÿâ 72 ÿ≥ÿßÿπÿ©) ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÇŸàÿßŸÖ ÿ£ŸÅÿ∂ŸÑ Ÿàÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±.",
            stepChillThick: "<span class='critical'>ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ŸÖÿ∑ŸÑŸàÿ®):</span> ÿ∫ÿ∑Ÿë ÿßŸÑŸàÿπÿßÿ° ÿ®ÿ•ÿ≠ŸÉÿßŸÖ Ÿàÿ∂ÿπŸá ŸÅŸä ÿßŸÑÿ´ŸÑÿßÿ¨ÿ© ŸÑŸÖÿØÿ© <span class='highlight'>1-2 ÿ≥ÿßÿπÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ</span>ÿå ÿ£Ÿà ŸäŸÅÿ∂ŸÑ ŸÑŸäŸÑÿ© ŸÉÿßŸÖŸÑÿ© (ÿ≠ÿ™Ÿâ 72 ÿ≥ÿßÿπÿ©). Ÿáÿ∞ÿß ÿ∂ÿ±Ÿàÿ±Ÿä ŸÑŸÑÿ≥ŸÖÿßŸÉÿ©.",
            stepChillThin: "<span class='highlight'>ÿ®ÿ±ŸëÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä):</span> ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ŸÑŸÖÿØÿ© 15-30 ÿØŸÇŸäŸÇÿ© ŸÑÿ≥ŸáŸàŸÑÿ© ÿßŸÑÿ™ÿ¥ŸÉŸäŸÑÿå ŸÑŸÉŸÜŸá ŸÑŸäÿ≥ ÿ∂ÿ±Ÿàÿ±ŸäŸãÿß ŸÑŸÑŸÇŸàÿßŸÖ ÿßŸÑŸÜŸáÿßÿ¶Ÿä.",
            stepPreheatThick: "ÿ≥ÿÆŸëŸÜ ÿßŸÑŸÅÿ±ŸÜ ÿ•ŸÑŸâ 200¬∞ŸÖ (400¬∞ŸÅ) ŸÇÿ±ÿ® ŸÜŸáÿßŸäÿ© ŸàŸÇÿ™ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ.", // ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿ£ÿπŸÑŸâ ŸÑŸÑÿ≥ŸÖŸäŸÉÿ©
            stepScoopClassic: "ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ ÿ®ÿ≠ÿ¨ŸÖ ŸÖŸÑÿπŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ© (ÿ≠ŸàÿßŸÑŸä 45-50 ÿ¨ŸÖ) ŸÖŸÜ ÿßŸÑÿπÿ¨ŸäŸÜÿ© Ÿàÿ∂ÿπŸáÿß ÿπŸÑŸâ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ÿßŸÑŸÖŸèÿ¨Ÿáÿ≤ÿ©ÿå ŸÖÿπ ÿ™ÿ±ŸÉ ŸÖÿ≥ÿßŸÅÿ© ÿ®ŸäŸÜŸáÿß.",
            stepScoopThick: "ÿ¥ŸÉŸëŸÑ ÿ£ŸÉŸàÿßŸÖŸãÿß ŸÉÿ®Ÿäÿ±ÿ© ŸÖŸÜ ÿßŸÑÿπÿ¨ŸäŸÜÿ© (ÿ≠ŸàÿßŸÑŸä 85-100 ÿ¨ŸÖ ÿ£Ÿà 1/3 ŸÉŸàÿ®) ÿπŸÑŸâ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ÿßŸÑŸÖŸèÿ¨Ÿáÿ≤ÿ©. ÿßÿ™ÿ±ŸÉ <span class='critical'>ŸÖÿ≥ÿßŸÅÿ© ŸÉÿ®Ÿäÿ±ÿ© ÿ¨ÿØŸãÿß</span> ÿ®ŸäŸÜŸáÿß (ÿ±ÿ®ŸÖÿß 6 ŸÅŸÇÿ∑ ŸÅŸä ÿßŸÑÿµŸäŸÜŸäÿ© ÿßŸÑŸÉÿ®Ÿäÿ±ÿ©). ŸÑÿß ÿ™ÿ®ÿ≥ÿ∑Ÿáÿß.",
            stepScoopThin: "ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ ÿµÿ∫Ÿäÿ±ÿ© ŸÖÿ≥ÿ∑ÿ≠ÿ© ŸÇŸÑŸäŸÑÿßŸã ÿ®ÿ≠ÿ¨ŸÖ ŸÖŸÑÿπŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ© (ÿ≠ŸàÿßŸÑŸä 30-35 ÿ¨ŸÖ) ŸÖŸÜ ÿßŸÑÿπÿ¨ŸäŸÜÿ© Ÿàÿ∂ÿπŸáÿß ÿπŸÑŸâ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ÿßŸÑŸÖŸèÿ¨Ÿáÿ≤ÿ©ÿå ŸÖÿπ ÿ™ÿ±ŸÉ ŸÖÿ≥ÿßŸÅÿ© ŸÉÿßŸÅŸäÿ© ŸÑÿ£ŸÜŸáÿß ÿ≥ÿ™ŸÜÿ™ÿ¥ÿ±.",
            stepBakeClassic: "ÿßÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 9-12 ÿØŸÇŸäŸÇÿ©ÿå ÿ£Ÿà ÿ≠ÿ™Ÿâ ÿ™ÿµÿ®ÿ≠ ÿßŸÑÿ≠ŸàÿßŸÅ ÿ∞Ÿáÿ®Ÿäÿ© ÿßŸÑŸÑŸàŸÜ ŸàŸäÿ®ÿØŸà ÿßŸÑŸàÿ≥ÿ∑ ÿ∑ÿ±ŸäŸãÿß ŸÇŸÑŸäŸÑÿßŸã.",
            stepBakeThick: "ÿßÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 11-14 ÿØŸÇŸäŸÇÿ©. Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿßŸÑÿ≠ŸàÿßŸÅ ŸÖÿ™ŸÖÿßÿ≥ŸÉÿ© Ÿàÿ∞Ÿáÿ®Ÿäÿ© ŸÇŸÑŸäŸÑÿßŸãÿå ŸÑŸÉŸÜ ÿßŸÑŸàÿ≥ÿ∑ ÿ≥Ÿäÿ®ÿØŸà <span class='highlight'>ÿ∑ÿ±ŸäŸãÿß ÿ¨ÿØŸãÿß Ÿàÿ∫Ÿäÿ± ŸÖŸÉÿ™ŸÖŸÑ ÿßŸÑŸÜÿ∂ÿ¨ ŸÇŸÑŸäŸÑÿßŸã</span>. Ÿáÿ∞ÿß ŸáŸà ŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑÿ∑ÿ±ÿßŸàÿ©.",
            stepBakeThin: "ÿßÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 10-13 ÿØŸÇŸäŸÇÿ©ÿå ÿ£Ÿà ÿ≠ÿ™Ÿâ ÿ™ŸÜÿ™ÿ¥ÿ± ÿßŸÑŸÉŸàŸÉŸäÿ≤ Ÿàÿ™ÿµÿ®ÿ≠ ÿ±ŸÅŸäÿπÿ©ÿå ÿ∞Ÿáÿ®Ÿäÿ© ÿßŸÑŸÑŸàŸÜ ÿ®ÿßŸÑŸÉÿßŸÖŸÑÿå Ÿàÿ™ÿ∏Ÿáÿ± ÿßŸÑÿ≠ŸàÿßŸÅ ŸÖŸÇÿ±ŸÖÿ¥ÿ©.",
            stepCoolClassic: "ÿßÿ™ÿ±ŸÉ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ™ÿ®ÿ±ÿØ ÿπŸÑŸâ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 5 ÿØŸÇÿßÿ¶ŸÇ ŸÇÿ®ŸÑ ŸÜŸÇŸÑŸáÿß ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä ŸÑÿ™ÿ®ÿ±ÿØ ÿ™ŸÖÿßŸÖŸãÿß.",
            stepCoolThick: "ÿßÿ™ÿ±ŸÉ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ™ÿ®ÿ±ÿØ ÿπŸÑŸâ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© <span class='highlight'>10-15 ÿØŸÇŸäŸÇÿ©</span> (ÿ™ÿ≠ÿ™ÿßÿ¨ ŸÑÿ™ÿ™ŸÖÿßÿ≥ŸÉ) ŸÇÿ®ŸÑ ŸÜŸÇŸÑŸáÿß ÿ®ÿ≠ÿ∞ÿ± ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä.",
            stepCoolThin: "ÿßÿ™ÿ±ŸÉ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ™ÿ®ÿ±ÿØ ÿπŸÑŸâ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 2-3 ÿØŸÇÿßÿ¶ŸÇ ŸÇÿ®ŸÑ ŸÜŸÇŸÑŸáÿß ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä ŸÑÿ™ÿ®ÿ±ÿØ ÿ™ŸÖÿßŸÖŸãÿß. ÿ≥ÿ™ÿµÿ®ÿ≠ ŸÖŸÇÿ±ŸÖÿ¥ÿ© ÿ£ŸÉÿ´ÿ± ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ®ÿ±ŸäÿØŸáÿß.",
            stepFinishSprinkle: "ÿ•ÿ∞ÿß ÿ±ÿ∫ÿ®ÿ™ÿå ÿ±ÿ¥ ÿßŸÑŸÖŸÑÿ≠ ÿßŸÑŸÇÿ¥ÿßÿ±Ÿä ŸÅŸàÿ± ÿ•ÿÆÿ±ÿßÿ¨Ÿáÿß ŸÖŸÜ ÿßŸÑŸÅÿ±ŸÜ.",

            // Tips Text (AR)
            tipMeasureFlour: "ÿßŸÖŸÑÿ£ ŸÉŸàÿ® ÿßŸÑŸÇŸäÿßÿ≥ ÿ®ÿßŸÑÿØŸÇŸäŸÇ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖŸÑÿπŸÇÿ© ÿ´ŸÖ ÿ≥ŸàŸëŸê ÿßŸÑÿ≥ÿ∑ÿ≠. ŸÑÿß ÿ™ÿ∫ÿ±ŸÅ ÿßŸÑÿØŸÇŸäŸÇ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÖŸÜ ÿßŸÑŸÉŸäÿ≥ ‚Äì Ÿáÿ∞ÿß ŸäŸÉÿ®ÿ≥Ÿá ŸàŸäÿ§ÿØŸä ÿ•ŸÑŸâ ŸÉŸàŸÉŸäÿ≤ ÿ¨ÿßŸÅÿ©!",
            tipRoomTemp: "ÿßÿ≥ÿ™ÿÆÿØŸÖ <span class='highlight'>ÿ®Ÿäÿ∂ Ÿàÿ≤ÿ®ÿØÿ© ÿ®ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©</span> (ŸÑŸÑŸàÿµŸÅÿßÿ™ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ©/ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ∑ÿ±Ÿäÿ©). ŸäŸÖÿ™ÿ≤ÿ¨ŸàŸÜ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ ŸÑÿπÿ¨ŸäŸÜÿ© ÿ£ŸÜÿπŸÖ.",
            tipDontOvermix: "<span class='critical'>ŸÑÿß ÿ™ŸÅÿ±ÿ∑ ŸÅŸä ÿÆŸÑÿ∑</span> ÿßŸÑÿπÿ¨ŸäŸÜÿ©ÿå ÿÆÿßÿµÿ© ÿ®ÿπÿØ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÇŸäŸÇ. ÿßÿÆŸÑÿ∑ *ŸÅŸÇÿ∑* ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥ ŸÑŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ÿ∑ÿ±ÿßŸàÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤.",
            tipChillDough: "ÿ™ÿ®ÿ±ŸäÿØ ÿßŸÑÿπÿ¨ŸäŸÜÿ© ŸÑŸäÿ≥ ŸÅŸÇÿ∑ ŸÑŸÑÿ≥ŸÖÿßŸÉÿ©! ÿ•ŸÜŸá <span class='highlight'>ŸäÿπŸÖŸÇ ÿßŸÑŸÜŸÉŸáÿ©</span> ŸàŸäÿ™ÿ≠ŸÉŸÖ ŸÅŸä ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±. ÿ≠ÿ™Ÿâ 30 ÿØŸÇŸäŸÇÿ© ÿ™ÿ≥ÿßÿπÿØ ŸÖÿπÿ∏ŸÖ ÿßŸÑŸàÿµŸÅÿßÿ™.",
            tipUnderbakeSlightly: "ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÉŸàŸÉŸäÿ≤ ÿ∑ÿ±Ÿäÿ© ÿ£Ÿà ŸÑÿ≤ÿ¨ÿ©ÿå <span class='highlight'>ÿ£ÿÆÿ±ÿ¨Ÿáÿß ÿπŸÜÿØŸÖÿß Ÿäÿ®ÿØŸà ÿßŸÑŸàÿ≥ÿ∑ ÿ∫Ÿäÿ± ŸÖŸÉÿ™ŸÖŸÑ ÿßŸÑŸÜÿ∂ÿ¨ *ŸÇŸÑŸäŸÑÿßŸã*</span>. ÿ≥ÿ™ŸÉŸÖŸÑ ÿßŸÑÿÆÿ®ÿ≤ ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© ÿßŸÑÿ≥ÿßÿÆŸÜÿ©.",
            tipParchmentPaper: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿØÿßÿ¶ŸÖŸãÿß Ÿàÿ±ŸÇ ÿ≤ÿ®ÿØÿ© ÿ£Ÿà ÿ≠ÿµŸäÿ±ÿ© ÿ≥ŸäŸÑŸäŸÉŸàŸÜ. ŸäŸÖŸÜÿπ ÿßŸÑÿßŸÑÿ™ÿµÿßŸÇ ŸàŸäÿ≥ÿßÿπÿØ ÿπŸÑŸâ ÿÆÿ®ÿ≤ ŸÖÿ™ÿ≥ÿßŸàŸç.",
            tipCoolingRack: "ÿßŸÜŸÇŸÑ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä ÿ®ÿπÿØ ÿ®ÿ∂ÿπ ÿØŸÇÿßÿ¶ŸÇ ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ©. Ÿáÿ∞ÿß ŸäŸàŸÇŸÅ ÿßŸÑÿ•ŸÅÿ±ÿßÿ∑ ŸÅŸä ÿÆÿ®ÿ≤ ÿßŸÑŸÇÿßÿπ ŸàŸäÿ≥ÿßÿπÿØŸáÿß ÿπŸÑŸâ ÿ£ŸÜ ÿ™ÿµÿ®ÿ≠ ŸÖŸÇÿ±ŸÖÿ¥ÿ© (ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ∞ŸÑŸÉ ŸÖÿ∑ŸÑŸàÿ®Ÿãÿß).",
            tipChocolateQuality: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ±ŸÇÿßÿ¶ŸÇ ÿ£Ÿà ŸÇÿ∑ÿπ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ∞ÿßÿ™ ŸÜŸàÿπŸäÿ© ÿ¨ŸäÿØÿ©. ÿ™ÿ≠ÿØÿ´ ŸÅÿ±ŸÇŸãÿß ŸÉÿ®Ÿäÿ±Ÿãÿß ŸÅŸä ÿßŸÑŸÜŸÉŸáÿ©!",
            tipToastedMilkPowder: "ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ÿ™ÿ∂ŸäŸÅ <span class='highlight'>ÿπŸÖŸÇŸãÿß ÿ®ŸÜŸÉŸáÿ© ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸàÿßŸÑŸÉÿ±ÿßŸÖŸäŸÑ</span>. ÿ¨ÿ±ÿ®Ÿáÿßÿå ÿÆÿßÿµÿ© ŸÅŸä ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ© ÿ£Ÿà ÿßŸÑÿ≥ŸÖŸäŸÉÿ©!",
            tipFlakySalt: "ÿ±ÿ¥ÿ© ŸÖŸÜ ÿßŸÑŸÖŸÑÿ≠ ÿßŸÑŸÇÿ¥ÿßÿ±Ÿä ÿπŸÑŸâ ÿßŸÑŸàÿ¨Ÿá <span class='highlight'>ÿ™Ÿàÿßÿ≤ŸÜ ÿßŸÑÿ≠ŸÑÿßŸàÿ©</span> Ÿàÿ™ÿ∂ŸäŸÅ ŸÑŸÖÿ≥ÿ© ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©. ŸÖŸàÿµŸâ ÿ®Ÿá ÿ®ÿ¥ÿØÿ©!",
            tipOvenTemp: "ÿØÿ±ÿ¨ÿßÿ™ ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ£ŸÅÿ±ÿßŸÜ ÿ™ÿÆÿ™ŸÑŸÅ! ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ŸÖŸäÿ≤ÿßŸÜ ÿ≠ÿ±ÿßÿ±ÿ© ŸÑŸÑŸÅÿ±ŸÜ ŸÑÿ∂ŸÖÿßŸÜ ÿßŸÑÿØŸÇÿ©. ÿ£ŸàŸÇÿßÿ™ ÿßŸÑÿÆÿ®ÿ≤ ŸáŸä ÿ•ÿ±ÿ¥ÿßÿØÿßÿ™.",
            tipUniformScoops: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ∫ÿ±ŸÅÿ© ŸÉŸàŸÉŸäÿ≤ ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ <span class='highlight'>ÿ≠ÿ¨ŸÖ ŸÖŸàÿ≠ÿØ ŸàÿÆÿ®ÿ≤ ŸÖÿ™ÿ≥ÿßŸàŸç</span>. ÿ™ÿ¨ÿπŸÑ ÿØŸÅÿπÿ™ŸÉ ÿ™ÿ®ÿØŸà ÿ±ÿßÿ¶ÿπÿ© ÿ£Ÿäÿ∂Ÿãÿß!",

            // Easter Egg (AR)
            easterEggTitle: "ü§´ ÿ≥ÿ± ÿπŸÖÿ± ÿßŸÑŸÜŸáÿßÿ¶Ÿä ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÖÿ≠ÿ¥Ÿäÿ©!",
            easterEggIntro: "ÿ≠ÿ≥ŸÜŸãÿßÿå ÿ≠ÿ≥ŸÜŸãÿßÿå ŸÑŸÇÿØ Ÿàÿ¨ÿØÿ™ ÿßŸÑŸÉŸÜÿ≤ *ÿßŸÑÿ≠ŸÇŸäŸÇŸä*! Ÿáÿ∞Ÿá ŸáŸä ÿ∑ÿ±ŸäŸÇÿ™Ÿä ŸÑÿµŸÜÿπ ÿ™ŸÑŸÉ <span class='highlight'>ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ∂ÿÆŸÖÿ© ÿßŸÑŸÖÿ≠ÿ¥Ÿäÿ©</span> ÿßŸÑŸÖÿ¨ŸÜŸàŸÜÿ© ÿπŸÑŸâ ÿ∑ÿ±ÿßÿ≤ ÿßŸÑŸÖÿÆÿßÿ®ÿ≤. ÿ•ŸÜŸáÿß ŸÖÿ®ŸÜŸäÿ© ÿπŸÑŸâ ÿ£ÿ≥ÿßÿ≥ ŸàÿµŸÅÿ© 'ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©'.",
            easterEggCoreConcept: "ÿßŸÑŸÅŸÉÿ±ÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©:",
            easterEggCoreDesc: "ÿ≥ŸÜÿ£ÿÆÿ∞ ÿπÿ¨ŸäŸÜÿ© 'ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©' ÿßŸÑŸÖÿ®ÿ±ÿØÿ© ŸàŸÜŸÑŸÅŸáÿß ÿ≠ŸàŸÑ ŸÉÿ±ÿ© ŸÖÿ¨ŸÖÿØÿ© ŸÖŸÜ ÿßŸÑÿ≠ÿ¥Ÿàÿ© ÿßŸÑŸÑÿ∞Ÿäÿ∞ÿ© (ŸÖÿ´ŸÑ ÿßŸÑŸÜŸàÿ™ŸäŸÑÿßÿå ÿ£Ÿà ÿ≤ÿ®ÿØÿ© ÿßŸÑŸÑŸàÿ™ÿ≥ÿå ÿ£Ÿà ÿßŸÑÿ∫ÿßŸÜÿßÿ¥ÿå ÿ£Ÿà ÿ≠ÿ™Ÿâ ÿπÿ¨ŸäŸÜÿ© ŸÉŸàŸÉŸäÿ≤ ÿ£ÿÆÿ±Ÿâ!).",
            easterEggStep1: "ÿßÿµŸÜÿπ ÿπÿ¨ŸäŸÜÿ© 'ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ŸàÿßŸÑÿ∑ÿ±Ÿäÿ©' ÿ≠ÿ≥ÿ® ÿßŸÑŸàÿµŸÅÿ©. <span class='critical'>ÿ®ÿ±ŸëÿØŸáÿß ÿ¨ŸäÿØŸãÿß (2-3 ÿ≥ÿßÿπÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ).</span>",
            easterEggStep2: "ÿ¨ŸáŸëÿ≤ ÿßŸÑÿ≠ÿ¥Ÿàÿ©: ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ (ÿ≠ŸàÿßŸÑŸä 1-1.5 ŸÖŸÑÿπŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ©) ŸÖŸÜ ÿßŸÑŸÜŸàÿ™ŸäŸÑÿßÿå ÿ≤ÿ®ÿØÿ© ÿßŸÑŸÑŸàÿ™ÿ≥ÿå ÿßŸÑÿ∫ÿßŸÜÿßÿ¥ ÿßŸÑŸÖÿ™ŸÖÿßÿ≥ŸÉÿå ÿ£Ÿà ÿßŸÑÿ¨ÿ®ŸÜ ÿßŸÑŸÉÿ±ŸäŸÖŸä ÿπŸÑŸâ Ÿàÿ±ŸÇ ÿ≤ÿ®ÿØÿ©. <span class='critical'>ÿ¨ŸÖŸëÿØŸáÿß ÿ™ŸÖÿßŸÖŸãÿß (ÿ≥ÿßÿπÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ).</span>",
            easterEggStep3: "ÿÆÿ∞ ŸÖÿ∫ÿ±ŸÅÿ© ŸÉÿ®Ÿäÿ±ÿ© ŸÖŸÜ ÿπÿ¨ŸäŸÜÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑŸÖÿ®ÿ±ÿØÿ© (ÿ±ÿ®ŸÖÿß 1.5 ÿ∂ÿπŸÅ ÿ≠ÿ¨ŸÖ 'ÿßŸÑÿ≥ŸÖŸäŸÉÿ©' ÿßŸÑÿπÿßÿØŸäÿ© - ÿ≠ŸàÿßŸÑŸä 120-140 ÿ¨ŸÖ). ÿßÿ®ÿ≥ÿ∑Ÿáÿß ŸÅŸä ÿ±ÿßÿ≠ÿ© ŸäÿØŸÉ.",
            easterEggStep4: "ÿ∂ÿπ <span class='highlight'>ŸÉÿ±ÿ© ÿßŸÑÿ≠ÿ¥Ÿàÿ© ÿßŸÑŸÖÿ¨ŸÖÿØÿ©</span> ŸÅŸä ÿßŸÑŸÖŸÜÿ™ÿµŸÅ.",
            easterEggStep5: "ŸÑŸÅ ÿπÿ¨ŸäŸÜÿ© ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ®ÿ≠ÿ∞ÿ± ÿ≠ŸàŸÑ ÿßŸÑÿ≠ÿ¥Ÿàÿ©ÿå Ÿàÿ£ÿ∫ŸÑŸÇŸáÿß ÿ™ŸÖÿßŸÖŸãÿß. ŸÉŸàŸëÿ±Ÿáÿß ÿ®ÿ±ŸÅŸÇ.",
            easterEggStep6: "<span class='critical'>ÿ®ÿ±ŸëÿØ ŸÉÿ±ÿßÿ™ ÿßŸÑÿπÿ¨ŸäŸÜ ÿßŸÑŸÖÿ≠ÿ¥Ÿàÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑŸÖÿØÿ© 30-60 ÿØŸÇŸäŸÇÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ.</span> Ÿáÿ∞ÿß ŸäŸÖŸÜÿπ ÿßŸÑÿ≠ÿ¥Ÿàÿ© ŸÖŸÜ ÿßŸÑÿßŸÜŸÅÿ¨ÿßÿ±.",
            easterEggStep7: "ÿßÿÆÿ®ÿ≤Ÿáÿß ÿπŸÑŸâ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿ£ŸÇŸÑ ŸÇŸÑŸäŸÑÿßŸã ŸÖŸÜ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≥ŸÖŸäŸÉÿ© ÿßŸÑÿπÿßÿØŸäÿ©ÿå ÿ±ÿ®ŸÖÿß <span class='highlight'>190¬∞ŸÖ (375¬∞ŸÅ)</span>ÿå ŸÑŸÖÿØÿ© ÿ£ÿ∑ŸàŸÑ ŸÇŸÑŸäŸÑÿßŸãÿå <span class='highlight'>15-18 ÿØŸÇŸäŸÇÿ©</span>. ÿ±ÿßŸÇÿ® ÿ™ŸÖÿßÿ≥ŸÉ ÿßŸÑÿ≠ŸàÿßŸÅ.",
            easterEggStep8: "<span class='critical'>ÿ®ÿ±ŸëÿØŸáÿß ÿ™ŸÖÿßŸÖŸãÿß</span> ÿπŸÑŸâ ÿµŸäŸÜŸäÿ© ÿßŸÑÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 15-20 ÿØŸÇŸäŸÇÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ŸÇÿ®ŸÑ ŸÜŸÇŸÑŸáÿß *ÿ®ÿ≠ÿ∞ÿ±*. ÿ™ŸÉŸàŸÜ Ÿáÿ¥ÿ© ŸàŸáŸä ÿ≥ÿßÿÆŸÜÿ©!",
            easterEggEnjoy: "ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÅÿßÿÆÿ±ÿ© ÿ®ÿ¨ŸÜŸàŸÜ! üòâ",
            stuffedCookieAltText: "ŸÉŸàŸÉŸäÿ≤ ŸÉÿ®Ÿäÿ±ÿ© Ÿàÿ≥ŸÖŸäŸÉÿ© ŸÖŸÇÿ∑Ÿàÿπÿ© ŸÖŸÜ ÿßŸÑŸÖŸÜÿ™ÿµŸÅ ÿ™ÿ∏Ÿáÿ± ÿ≠ÿ¥Ÿàÿ© ŸÜŸàÿ™ŸäŸÑÿß ŸÑÿ≤ÿ¨ÿ©.",

             // Science Notes (AR)
             scienceClassic: "ÿßŸÑÿ™Ÿàÿßÿ≤ŸÜ ÿ®ŸäŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ∑ÿ±Ÿäÿ© (ÿßŸÑŸÖÿÆŸÅŸàŸÇÿ© ŸÑŸÑŸáŸàÿßÿ°)ÿå ÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ÿå ŸàÿßŸÑÿØŸÇŸäŸÇ ŸäÿÆŸÑŸÇ ÿßŸÑŸÇŸàÿßŸÖ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸä. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ Ÿäÿ≥ŸÖÿ≠ ÿ®ÿ™ÿ±ÿ∑Ÿäÿ® ÿßŸÑÿØŸÇŸäŸÇ ŸÑŸÑŸÖÿ∂ÿ∫ ŸàŸäŸÖŸÜÿπ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ÿßŸÑŸÖŸÅÿ±ÿ∑.",
             scienceThick: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ∞ÿßÿ®ÿ© ÿ™ÿ∫ŸÑŸÅ ÿßŸÑÿØŸÇŸäŸÇ ÿ®ÿ¥ŸÉŸÑ ŸÖÿÆÿ™ŸÑŸÅÿå ŸÖŸÖÿß ŸäŸÇŸÑŸÑ ŸÖŸÜ ÿ™ÿ∑Ÿàÿ± ÿßŸÑÿ∫ŸÑŸàÿ™ŸäŸÜ. ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä Ÿäÿ∂ŸäŸÅ ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ© ŸàÿßŸÑÿ≠ŸÖŸàÿ∂ÿ© (Ÿäÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ÿµŸàÿØÿß ÿßŸÑÿÆÿ®ÿ≤ ŸÑŸÑÿ±ŸÅÿπ ÿØŸàŸÜ ÿßŸÜÿ™ÿ¥ÿßÿ± ŸÉÿ®Ÿäÿ±). ÿßŸÑŸÜÿ¥ÿß ŸäŸÖÿ™ÿµ ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ© ŸÑŸÑÿ∑ÿ±ÿßŸàÿ©. <span class='critical'>ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿ≠ŸäŸàŸä</span> ŸÑÿ™ÿ¨ŸÖŸäÿØ ÿßŸÑÿØŸáŸàŸÜÿå ŸàŸÖŸÜÿπ ÿßŸÑÿπÿ¨ŸäŸÜ ŸÖŸÜ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ÿ®ÿ≥ÿ±ÿπÿ© ŸÅŸä ÿßŸÑŸÅÿ±ŸÜ ÿßŸÑÿ≥ÿßÿÆŸÜÿå ŸÖŸÖÿß Ÿäÿ≥ŸÖÿ≠ ŸÑŸá ÿ®ÿßŸÑÿÆÿ®ÿ≤ ŸÑŸÑÿ£ÿπŸÑŸâ.",
             scienceThin: "ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ∞ÿßÿ®ÿ© Ÿàÿ∫ÿßŸÑÿ®Ÿãÿß ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂ Ÿäÿπÿ≤ÿ≤ÿßŸÜ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±. ŸÉŸÖŸäÿ© ÿ£ŸÇŸÑ ŸÖŸÜ ÿßŸÑÿØŸÇŸäŸÇ ÿ£Ÿà ŸÖŸàÿßÿØ ÿßŸÑÿ™ÿÆŸÖŸäÿ± ŸÖŸÇÿßÿ±ŸÜÿ© ÿ®ÿßŸÑÿØŸáŸàŸÜ/ÿßŸÑÿ≥ŸÉÿ± ÿ™ÿ¥ÿ¨ÿπ ÿπŸÑŸâ ŸÜÿ™Ÿäÿ¨ÿ© ÿ£ÿ±ŸÇ. ÿßŸÑÿÆÿ®ÿ≤ ÿπŸÑŸâ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ŸÖÿπÿ™ÿØŸÑÿ© Ÿäÿ™Ÿäÿ≠ ŸàŸÇÿ™Ÿãÿß ŸÑŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ŸÇÿ®ŸÑ ÿßŸÑÿ™ŸÖÿßÿ≥ŸÉ.",

            // Yields (AR)
             yieldClassic: "18-24 ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤",
             yieldThick: "10-12 ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤ ŸÉÿ®Ÿäÿ±ÿ©",
             yieldThin: "24-30 ŸÇÿ∑ÿπÿ© ŸÉŸàŸÉŸäÿ≤",
        }
    };

    const recipeData = {
        classic: {
            id: 'classic',
            nameKey: 'typeClassic',
            yieldKey: 'yieldClassic',
            heroImage: 'classic.webp', // Larger hero image if available, or reuse card image
            cardImage: 'classic.webp',
            isOmarFav: false,
            ingredients: [
                { nameKey: 'ingredientButter', emoji: 'üßà', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 226, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteRoomTemp' },
                { nameKey: 'ingredientSugarBrown', emoji: 'üü´', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 210, unitKey: 'unitGram', isScalable: true }, noteKey: 'notePacked' },
                { nameKey: 'ingredientSugarGran', emoji: 'üçö', imperial: { amount: '1/2', unitKey: 'unitCup' }, metric: { amount: 100, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientEgg', emoji: 'ü•ö', imperial: { amount: 2, unitKey: 'unitWhole' }, metric: { amount: 100, unitKey: 'unitGram', isScalable: false } }, // Scaling eggs is tricky
                { nameKey: 'ingredientVanilla', emoji: 'üç¶', imperial: { amount: '2', unitKey: 'unitTsp' }, metric: { amount: 10, unitKey: 'unitMl', isScalable: false } },
                { nameKey: 'ingredientFlourAP', emoji: 'üåæ', imperial: { amount: '2 3/4', unitKey: 'unitCup' }, metric: { amount: 345, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientMilkPowder', emoji: 'ü•õ', imperial: { amount: '2', unitKey: 'unitTbsp' }, metric: { amount: 15, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteToasted', optional: true },
                { nameKey: 'ingredientCornstarch', emoji: 'üåΩ', imperial: { amount: '1', unitKey: 'unitTsp' }, metric: { amount: 3, unitKey: 'unitGram', isScalable: true }, optional: true }, // Optional for extra softness
                { nameKey: 'ingredientBakingSoda', emoji: '‚ú®', imperial: { amount: '1', unitKey: 'unitTsp' }, metric: { amount: 5, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientSalt', emoji: 'üßÇ', imperial: { amount: '1', unitKey: 'unitTsp' }, metric: { amount: 6, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientChocolateChips', emoji: 'üç´', imperial: { amount: '2', unitKey: 'unitCup' }, metric: { amount: 340, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientNuts', emoji: 'ü•ú', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 110, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteOptional' },
                { nameKey: 'ingredientFlakySalt', emoji: 'üíé', imperial: { amount: '1', unitKey: 'unitPinch' }, metric: { amount: 1, unitKey: 'unitGram', isScalable: false }, noteKey: 'noteFinishing', optional: true }
            ],
            steps: [
                { stepKey: 'stepPrep' },
                { stepKey: 'stepCreamButterSugar' },
                { stepKey: 'stepAddEggsVanilla' },
                { stepKey: 'stepCombineDry' },
                { stepKey: 'stepAddDryToWet' },
                { stepKey: 'stepFoldInMixins' },
                { stepKey: 'stepChillClassic' },
                { stepKey: 'stepScoopClassic' },
                { stepKey: 'stepBakeClassic' },
                { stepKey: 'stepFinishSprinkle', optional: true },
                { stepKey: 'stepCoolClassic' },
            ],
            toastMilkPowder: true, // Indicates section should be shown
            toastNuts: true,
            scienceNoteKey: 'scienceClassic',
        },
        thick: {
            id: 'thick',
            nameKey: 'typeThick',
            yieldKey: 'yieldThick',
            heroImage: 'thick_and_gooey.webp',
            cardImage: 'thick_and_gooey.webp',
            isOmarFav: true,
            ingredients: [
                { nameKey: 'ingredientButter', emoji: 'üßà', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 226, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteMelted' }, // Melted!
                { nameKey: 'ingredientSugarBrown', emoji: 'üü´', imperial: { amount: '1 1/4', unitKey: 'unitCup' }, metric: { amount: 265, unitKey: 'unitGram', isScalable: true }, noteKey: 'notePacked' }, // More brown
                { nameKey: 'ingredientSugarGran', emoji: 'üçö', imperial: { amount: '1/2', unitKey: 'unitCup' }, metric: { amount: 100, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientEgg', emoji: 'ü•ö', imperial: { amount: 2, unitKey: 'unitWhole' }, metric: { amount: 100, unitKey: 'unitGram', isScalable: false } },
                { nameKey: 'ingredientEggYolk', emoji: 'üç≥', imperial: { amount: 1, unitKey: 'unitWhole' }, metric: { amount: 18, unitKey: 'unitGram', isScalable: false } }, // Extra yolk for richness
                { nameKey: 'ingredientVanilla', emoji: 'üç¶', imperial: { amount: '1', unitKey: 'unitTbsp' }, metric: { amount: 15, unitKey: 'unitMl', isScalable: false } }, // More vanilla
                { nameKey: 'ingredientFlourAP', emoji: 'üåæ', imperial: { amount: '3', unitKey: 'unitCup' }, metric: { amount: 380, unitKey: 'unitGram', isScalable: true } }, // Slightly more flour
                { nameKey: 'ingredientMilkPowder', emoji: 'ü•õ', imperial: { amount: '3', unitKey: 'unitTbsp' }, metric: { amount: 25, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteToasted', optional: true },
                { nameKey: 'ingredientCornstarch', emoji: 'üåΩ', imperial: { amount: '2', unitKey: 'unitTsp' }, metric: { amount: 6, unitKey: 'unitGram', isScalable: true } }, // Cornstarch helps softness
                { nameKey: 'ingredientBakingSoda', emoji: '‚ú®', imperial: { amount: '1', unitKey: 'unitTsp' }, metric: { amount: 5, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientSalt', emoji: 'üßÇ', imperial: { amount: '1 1/4', unitKey: 'unitTsp' }, metric: { amount: 7, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientChocolateChips', emoji: 'üç´', imperial: { amount: '2.5', unitKey: 'unitCup' }, metric: { amount: 425, unitKey: 'unitGram', isScalable: true } }, // More chocolate!
                 { nameKey: 'ingredientNuts', emoji: 'ü•ú', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 110, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteOptional' },
                { nameKey: 'ingredientFlakySalt', emoji: 'üíé', imperial: { amount: '1', unitKey: 'unitPinch' }, metric: { amount: 1, unitKey: 'unitGram', isScalable: false }, noteKey: 'noteFinishing', optional: true }
            ],
            steps: [
                { stepKey: 'stepPrepThick' }, // Note: No preheat yet
                { stepKey: 'stepCreamButterSugarThick' }, // Melted butter method
                { stepKey: 'stepAddEggsVanillaThick' }, // Includes yolk
                { stepKey: 'stepCombineDry' }, // Standard dry combo, includes cornstarch
                { stepKey: 'stepAddDryToWet' },
                { stepKey: 'stepFoldInMixins' },
                { stepKey: 'stepChillThick' }, // Critical chill step
                { stepKey: 'stepPreheatThick' }, // Preheat *after* chilling starts
                { stepKey: 'stepScoopThick' }, // Large scoops
                { stepKey: 'stepBakeThick' }, // Bake until just set
                { stepKey: 'stepFinishSprinkle', optional: true },
                { stepKey: 'stepCoolThick' }, // Longer cool on pan
            ],
            toastMilkPowder: true,
            toastNuts: true,
            scienceNoteKey: 'scienceThick',
        },
        thin: {
            id: 'thin',
            nameKey: 'typeThin',
            yieldKey: 'yieldThin',
            heroImage: 'thin-and-crispy.webp',
            cardImage: 'thin-and-crispy.webp',
            isOmarFav: false,
            ingredients: [
                { nameKey: 'ingredientButter', emoji: 'üßà', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 226, unitKey: 'unitGram', isScalable: true }, noteKey: 'noteMelted' }, // Melted
                { nameKey: 'ingredientSugarBrown', emoji: 'üü´', imperial: { amount: '1/2', unitKey: 'unitCup' }, metric: { amount: 105, unitKey: 'unitGram', isScalable: true }, noteKey: 'notePacked' },
                { nameKey: 'ingredientSugarGran', emoji: 'üçö', imperial: { amount: '1', unitKey: 'unitCup' }, metric: { amount: 200, unitKey: 'unitGram', isScalable: true } }, // More white sugar
                { nameKey: 'ingredientEgg', emoji: 'ü•ö', imperial: { amount: 1, unitKey: 'unitWhole' }, metric: { amount: 50, unitKey: 'unitGram', isScalable: false } }, // Often just one egg
                { nameKey: 'ingredientVanilla', emoji: 'üç¶', imperial: { amount: '1', unitKey: 'unitTsp' }, metric: { amount: 5, unitKey: 'unitMl', isScalable: false } },
                { nameKey: 'ingredientFlourAP', emoji: 'üåæ', imperial: { amount: '2', unitKey: 'unitCup' }, metric: { amount: 250, unitKey: 'unitGram', isScalable: true } }, // Less flour
                // No milk powder or cornstarch typically
                { nameKey: 'ingredientBakingSoda', emoji: '‚ú®', imperial: { amount: '1/2', unitKey: 'unitTsp' }, metric: { amount: 2.5, unitKey: 'unitGram', isScalable: true } }, // Maybe slightly less soda
                { nameKey: 'ingredientSalt', emoji: 'üßÇ', imperial: { amount: '1/2', unitKey: 'unitTsp' }, metric: { amount: 3, unitKey: 'unitGram', isScalable: true } },
                { nameKey: 'ingredientChocolateChips', emoji: 'üç´', imperial: { amount: '1.5', unitKey: 'unitCup' }, metric: { amount: 255, unitKey: 'unitGram', isScalable: true } }, // Less chocolate needed due to spread
                { nameKey: 'ingredientFlakySalt', emoji: 'üíé', imperial: { amount: '1', unitKey: 'unitPinch' }, metric: { amount: 1, unitKey: 'unitGram', isScalable: false }, noteKey: 'noteFinishing', optional: true }
            ],
            steps: [
                { stepKey: 'stepPrepThin' }, // Lower temp
                { stepKey: 'stepCreamButterSugarThin' }, // Melted butter
                { stepKey: 'stepAddEggsVanilla' }, // Usually just egg
                { stepKey: 'stepCombineDryThin' }, // Simpler dry mix
                { stepKey: 'stepAddDryToWet' },
                { stepKey: 'stepFoldInMixins' },
                { stepKey: 'stepChillThin' }, // Optional chill
                { stepKey: 'stepScoopThin' }, // Smaller, flatter scoops
                { stepKey: 'stepBakeThin' }, // Bake until crisp
                { stepKey: 'stepFinishSprinkle', optional: true },
                { stepKey: 'stepCoolThin' }, // Quick cool on pan
            ],
            toastMilkPowder: false, // Not typical for thin/crispy
            toastNuts: false, // Less common, can add if desired
            scienceNoteKey: 'scienceThin',
        }
    };

    const keyDifferencesData = {
        classic: [
            { emoji: 'üòã', titleKey: 'diffTextureTitle', descKey: 'diffTextureClassic' },
            { emoji: 'üìè', titleKey: 'diffSpreadTitle', descKey: 'diffSpreadClassic' },
            { emoji: 'üßà', titleKey: 'diffButterTitle', descKey: 'diffButterClassic' },
            { emoji: 'üç¨', titleKey: 'diffSugarTitle', descKey: 'diffSugarClassic' },
            { emoji: '‚ùÑÔ∏è', titleKey: 'diffChillTitle', descKey: 'diffChillClassic' },
            { emoji: 'üëÖ', titleKey: 'diffFlavorTitle', descKey: 'diffFlavorClassic' },
        ],
        thick: [
            { emoji: 'üòã', titleKey: 'diffTextureTitle', descKey: 'diffTextureThick' },
            { emoji: 'üß±', titleKey: 'diffSpreadTitle', descKey: 'diffSpreadThick' },
            { emoji: 'üßà', titleKey: 'diffButterTitle', descKey: 'diffButterThick' },
            { emoji: 'üç¨', titleKey: 'diffSugarTitle', descKey: 'diffSugarThick' },
            { emoji: 'ü•∂', titleKey: 'diffChillTitle', descKey: 'diffChillThick' }, // Changed emoji
            { emoji: 'üëÖ', titleKey: 'diffFlavorTitle', descKey: 'diffFlavorThick' },
        ],
        thin: [
            { emoji: 'üòã', titleKey: 'diffTextureTitle', descKey: 'diffTextureThin' },
            { emoji: 'üßá', titleKey: 'diffSpreadTitle', descKey: 'diffSpreadThin' }, // Changed emoji
            { emoji: 'üßà', titleKey: 'diffButterTitle', descKey: 'diffButterThin' },
            { emoji: 'üç¨', titleKey: 'diffSugarTitle', descKey: 'diffSugarThin' },
            { emoji: '‚è≥', titleKey: 'diffChillTitle', descKey: 'diffChillThin' }, // Changed emoji
            { emoji: 'üëÖ', titleKey: 'diffFlavorTitle', descKey: 'diffFlavorThin' },
        ]
    };

    const tipsData = [
        { emoji: 'ü•Ñ', tipKey: 'tipMeasureFlour' },
        { emoji: 'üå°Ô∏è', tipKey: 'tipRoomTemp' },
        { emoji: 'üö´', tipKey: 'tipDontOvermix' },
        { emoji: 'ü•∂', tipKey: 'tipChillDough' },
        { emoji: 'ü§î', tipKey: 'tipUnderbakeSlightly' },
        { emoji: 'üìú', tipKey: 'tipParchmentPaper' },
        { emoji: '‚ô®Ô∏è', tipKey: 'tipCoolingRack' },
        { emoji: '‚≠ê', tipKey: 'tipChocolateQuality' },
        { emoji: 'ü•õ', tipKey: 'tipToastedMilkPowder' },
        { emoji: 'üíé', tipKey: 'tipFlakySalt' },
        { emoji: 'üî•', tipKey: 'tipOvenTemp' },
        { emoji: 'üç™', tipKey: 'tipUniformScoops' },
    ];

    const easterEggData = {
        titleKey: 'easterEggTitle',
        introKey: 'easterEggIntro',
        coreConceptKey: 'easterEggCoreConcept',
        coreDescKey: 'easterEggCoreDesc',
        imageSrc: 'stuffed_cookie_internal.jpg', // Make sure you have this image!
        imageAltKey: 'stuffedCookieAltText',
        steps: [ // Use keys from langData for steps
            'easterEggStep1', 'easterEggStep2', 'easterEggStep3',
            'easterEggStep4', 'easterEggStep5', 'easterEggStep6',
            'easterEggStep7', 'easterEggStep8'
        ],
        enjoyKey: 'easterEggEnjoy'
    };

    // --- STATE VARIABLES ---
    let currentLang = 'en';
    let currentCookieType = null; // 'classic', 'thick', 'thin'
    let currentUnits = 'imperial'; // 'imperial', 'metric', 'cups', 'grams'
    let currentScaleFactor = 1;
    const baseButterAmount = 226; // Grams, matches default input value

    // --- DOM ELEMENT REFERENCES ---
    const body = document.body;
    const langButtons = document.querySelectorAll('.lang-btn');
    const cookieCards = document.querySelectorAll('.cookie-card');
    const heroImage = document.getElementById('hero-cookie-image');
    const heroText = document.querySelector('.hero-text'); // For potential style changes
    const heroSection = document.querySelector('.hero-section');
    const dynamicContentWrapper = document.querySelector('.dynamic-content-wrapper');
    const contentPlaceholder = document.querySelector('.content-placeholder');
    const keyDifferencesSection = document.getElementById('key-differences');
    const keyDiffPointsContainer = keyDifferencesSection.querySelector('.diff-points');
    const keyDiffTitle = keyDifferencesSection.querySelector('h3');
    const keyDiffDynamicNameSpan = keyDiffTitle.querySelector('.dynamic-cookie-name');
    const recipeScalerSection = document.getElementById('recipe-scaler');
    const butterInput = document.getElementById('butter-amount-input');
    const updateScaleBtn = document.getElementById('update-scale-btn');
    const recipeDetailsSection = document.getElementById('recipe-details');
    const tipsListContainer = document.getElementById('tips-list');
    const yieldInfoP = document.querySelector('.yield-info');
    const unitTogglesTemplate = document.getElementById('unit-toggles-template');
    const omarsFavBadges = document.querySelectorAll('.omars-fav-badge');
    const easterEggSection = document.getElementById('easter-egg-container');

    // --- FUNCTIONS ---

    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }


    // Function to update text content based on language
    function updateTextContent(lang = currentLang) {
        console.log(`Updating text content for language: ${lang}`);
        const elements = document.querySelectorAll('[data-lang-key]');
        const data = langData[lang];
        if (!data) {
            console.error(`Language data for "${lang}" not found.`);
            return;
        }

        // Update page title
        const pageTitleKey = 'pageTitle';
        if (data[pageTitleKey]) {
            document.title = data[pageTitleKey];
        }

        elements.forEach(el => {
            const key = el.dataset.langKey;
            let text = data[key];

            if (text !== undefined && text !== null) {
                // Handle specific cases like titles needing dynamic names
                if (el.id === 'main-title-h1' || key === 'finalTag' || key.startsWith('diff') || key.startsWith('tip') || key.startsWith('easterEgg') || key === 'scalerNote') {
                     // Allow HTML in these specific keys
                    el.innerHTML = text;
                } else if (el.tagName === 'INPUT' && el.type === 'number') {
                     // Update placeholder or value if needed (e.g., for labels) - Not currently used but good practice
                     // el.placeholder = text;
                } else if (el.tagName === 'INPUT' || el.tagName === 'BUTTON') {
                     el.textContent = text; // Use textContent for buttons/inputs to avoid HTML injection
                 } else if (el.classList.contains('dynamic-cookie-name')) {
                     // This span is handled separately when content loads
                     return;
                } else if (key === 'keyDifferencesTitleBase') {
                    // Set the base text, leave the span alone
                    const baseTextNode = el.childNodes[0]; // Assuming text is the first node
                    if (baseTextNode && baseTextNode.nodeType === Node.TEXT_NODE) {
                        baseTextNode.nodeValue = text + ' '; // Add space before span
                    } else {
                        // Fallback if structure changes
                        el.textContent = text + ' ';
                        el.appendChild(keyDiffDynamicNameSpan); // Re-append span if textContent wiped it
                    }
                 } else if (el === yieldInfoP && currentCookieType) {
                    // Handle yield text separately in updateYieldInfo
                     return;
                } else {
                    // Default: use textContent for safety
                    el.textContent = text;
                }
            } else {
                 // Keep placeholder text if key not found in target lang (or log warning)
                 // console.warn(`Lang key "${key}" not found for lang "${lang}" on element:`, el);
            }
        });

        // Update body direction and lang attribute
        document.documentElement.lang = lang;
        body.dir = lang === 'ar' ? 'rtl' : 'ltr';

        // Refresh dynamic content if a cookie is selected
        if (currentCookieType) {
            populateKeyDifferences(currentCookieType, lang);
            // Debounce recipe regeneration to avoid excessive calls during rapid language switching
            debouncedGenerateRecipe(currentCookieType, lang, currentUnits, currentScaleFactor);
            // regenerateRecipeHTML(currentCookieType, lang, currentUnits, currentScaleFactor);
        }
        populateTips(lang);
        updateYieldInfo(); // Update yield based on new lang and possibly new cookie
        updateUnitToggleVisibility(lang); // Show/hide correct unit toggles
        console.log(`Text updated for ${lang}, dir set to ${body.dir}`);
    }

    // Show/Hide correct unit toggle based on language
    function updateUnitToggleVisibility(lang) {
        const clonedToggleContainer = recipeDetailsSection.querySelector('.recipe-unit-toggle');
        if (!clonedToggleContainer) return; // Not cloned yet

        const enToggle = clonedToggleContainer.querySelector('.unit-selector[data-lang="en"]');
        const arToggle = clonedToggleContainer.querySelector('.unit-selector[data-lang="ar"]');

        if (enToggle && arToggle) {
            enToggle.style.display = lang === 'en' ? 'inline-block' : 'none';
            arToggle.style.display = lang === 'ar' ? 'inline-block' : 'none';
            // Set initial active state based on currentUnits
            updateActiveUnitButtonStates(clonedToggleContainer);
        }
    }


    // Function to handle language button clicks
    function handleLanguageChange(event) {
        const newLang = event.target.dataset.lang;
        if (newLang && newLang !== currentLang) {
            console.log(`Language change requested: ${newLang}`);
            currentLang = newLang;
            // Update button active states
            langButtons.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.lang === newLang);
            });
            // Update all text
            updateTextContent(newLang);
            // If Easter Egg is visible, refresh its content
             if (easterEggSection.classList.contains('visible')) {
                 populateEasterEgg(currentLang);
             }
        }
    }

    // Function to show/hide dynamic content sections
    function showContentSection(sectionElement) {
        if (!sectionElement) return;
        // Ensure it's not already visible to prevent transition flicker
        if (!sectionElement.classList.contains('visible')) {
             sectionElement.classList.remove('visually-hidden');
             // Use requestAnimationFrame to ensure the 'visually-hidden' removal is processed before adding 'visible'
             requestAnimationFrame(() => {
                 sectionElement.classList.add('visible');
                 // console.log("Showing section:", sectionElement.id);
             });
        }
         sectionElement.classList.remove('visually-hidden'); // Ensure hidden class is removed even if already visible
         sectionElement.classList.add('visible');
    }

    function hideContentSection(sectionElement) {
        if (!sectionElement) return;
         // Check if it's currently visible before trying to hide
         if (sectionElement.classList.contains('visible')) {
             sectionElement.classList.remove('visible');
             // Add visually-hidden *after* the transition ends (or slightly before)
             // The CSS transition handles the visual fade-out.
             // Using a timeout to ensure transition completes before display:none / visibility:hidden applies
             const transitionDuration = parseFloat(getComputedStyle(sectionElement).transitionDuration) * 1000;
             setTimeout(() => {
                // Only add visually-hidden if it's STILL not visible (user might have re-clicked quickly)
                 if (!sectionElement.classList.contains('visible')) {
                    sectionElement.classList.add('visually-hidden');
                    // console.log("Hiding section:", sectionElement.id);
                 }
             }, transitionDuration - 50); // Slightly less than duration
         } else {
             // If not visible, ensure visually-hidden is applied immediately
             sectionElement.classList.add('visually-hidden');
         }
    }


    // Function to display the correct sections based on cookie type
    function displayContentSections(cookieType) {
        console.log(`Displaying content for type: ${cookieType}`);
        if (!cookieType) {
             // Hide all specific sections, show placeholder
             hideContentSection(keyDifferencesSection);
             hideContentSection(recipeScalerSection);
             hideContentSection(recipeDetailsSection);
             hideContentSection(easterEggSection);
             showContentSection(contentPlaceholder);
             return;
         }

        // Hide placeholder first
        hideContentSection(contentPlaceholder);
        hideContentSection(easterEggSection); // Hide easter egg unless specifically triggered

        // Populate and show relevant sections
        populateKeyDifferences(cookieType, currentLang);
        showContentSection(keyDifferencesSection);

        // Decide which units to show initially based on lang
        currentUnits = (currentLang === 'ar') ? 'grams' : 'imperial'; // Default Arabic to metric, English to imperial
        butterInput.value = baseButterAmount; // Reset scaler input
        currentScaleFactor = 1; // Reset scale factor
        showContentSection(recipeScalerSection);

        // Generate and show recipe
        debouncedGenerateRecipe(cookieType, currentLang, currentUnits, currentScaleFactor);
        // regenerateRecipeHTML(cookieType, currentLang, currentUnits, currentScaleFactor); // Direct call without debounce
        showContentSection(recipeDetailsSection);
    }


    // Function to update the Hero section
    function updateHero(cookieType) {
        const data = recipeData[cookieType];
        if (data && data.heroImage) {
            heroImage.src = data.heroImage;
            heroImage.alt = getText('type' + cookieType.charAt(0).toUpperCase() + cookieType.slice(1)); // e.g., typeClassic
            heroImage.classList.add('selected-type-image'); // Dim the image slightly
             heroSection.style.backgroundColor = 'transparent'; // Remove fallback color if image loads
        } else {
            // Revert to default comparison image if no specific one
            heroImage.src = '3-cookie-types.jpg';
            heroImage.alt = 'Comparison of three cookie types';
            heroImage.classList.remove('selected-type-image');
             heroSection.style.backgroundColor = ''; // Restore fallback bg
        }
        // Update hero text (optional, could rely on general text update)
        // const titleKey = data ? data.nameKey : 'mainTitle';
        // const subtitleKey = 'heroSubtitle'; // Keep subtitle generic or add specific ones?
        // document.getElementById('main-title-h1').innerHTML = getText(titleKey);
        // document.querySelector('.hero-subtitle').textContent = getText(subtitleKey);
        // Call general update instead to handle language correctly
        updateTextContent();
    }

    // Function to show/hide Omar's Fav badge
    function updateFavBadgeVisibility(selectedType) {
        omarsFavBadges.forEach(badge => {
            const card = badge.closest('.cookie-card');
            const cardType = card ? card.dataset.type : null;
            const shouldBeVisible = cardType === selectedType && recipeData[selectedType]?.isOmarFav;

            if (shouldBeVisible) {
                 badge.classList.remove('visually-hidden');
                 // Trigger animation by adding visible class after a tiny delay
                 requestAnimationFrame(() => {
                    badge.classList.add('visible');
                 });
            } else {
                 badge.classList.remove('visible');
                 // Use timeout matching transition to add visually-hidden after fade out
                  const transitionDuration = parseFloat(getComputedStyle(badge).transitionDuration) * 1000 || 300;
                 setTimeout(() => {
                     if (!badge.classList.contains('visible')) { // Check again in case state changed rapidly
                         badge.classList.add('visually-hidden');
                     }
                 }, transitionDuration);
            }
        });
    }


    // Function to populate Key Differences section
    function populateKeyDifferences(cookieType, lang) {
        const diffs = keyDifferencesData[cookieType];
        const langStrings = langData[lang];
        if (!diffs || !langStrings) return;

        keyDiffPointsContainer.innerHTML = ''; // Clear previous points

        // Update title
        const cookieName = langStrings[recipeData[cookieType].nameKey] || cookieType;
        keyDiffDynamicNameSpan.textContent = ` ${langStrings.keyDifferencesTitleFor || 'for'} ${cookieName}`;
        // Ensure base title text is updated if lang changed
        const baseTitleKey = keyDiffTitle.dataset.langKey;
        const baseTextNode = keyDiffTitle.childNodes[0];
        if(baseTextNode && baseTextNode.nodeType === Node.TEXT_NODE) {
            baseTextNode.nodeValue = langStrings[baseTitleKey] + ' ';
        }


        diffs.forEach(diff => {
            const title = langStrings[diff.titleKey] || diff.titleKey;
            const desc = langStrings[diff.descKey] || diff.descKey;

            const pointDiv = document.createElement('div');
            pointDiv.className = 'diff-point';
            pointDiv.innerHTML = `
                <h4><span class="emoji">${diff.emoji || 'üîπ'}</span> ${title}</h4>
                <p>${desc}</p>
            `;
            keyDiffPointsContainer.appendChild(pointDiv);
        });
    }

     // Helper to get text safely
    function getText(key, lang = currentLang, fallback = '') {
        return langData[lang]?.[key] ?? fallback;
    }

     // Helper to format ingredient amounts (basic example)
    function formatAmount(amount) {
        if (typeof amount === 'number') {
            // Basic rounding for metric scaled values
            if (amount < 1) return amount.toFixed(2);
            if (amount < 10) return amount.toFixed(1);
            return Math.round(amount);
        }
         // Handle fractions like "1/2", "2 3/4" - keep as string for now
         return amount;
    }

    // Function to generate Recipe HTML
    function regenerateRecipeHTML(cookieType, lang, units, scale = 1) {
        console.log(`Generating recipe for: ${cookieType}, Lang: ${lang}, Units: ${units}, Scale: ${scale}`);
        const recipe = recipeData[cookieType];
        const langStrings = langData[lang];
        if (!recipe || !langStrings) {
            recipeDetailsSection.innerHTML = `<p>${getText('placeholderSelect', lang)}</p>`; // Fallback
            return;
        }

        let html = '';

        // 1. Add Recipe Title
        const recipeTitle = `${getText('recipeTitlePrefix', lang)} ${getText(recipe.nameKey, lang)}`;
        html += `<div class="recipe-content-area"><h3>${recipeTitle}</h3>`;

        // 2. Add Cloned Unit Toggles (if not already present)
         if (!recipeDetailsSection.querySelector('.recipe-unit-toggle')) {
             const toggleClone = unitTogglesTemplate.cloneNode(true);
             toggleClone.removeAttribute('id'); // Remove ID from clone
             toggleClone.style.display = 'block'; // Make it visible
             toggleClone.classList.add('recipe-unit-toggle'); // Add class for styling
             recipeDetailsSection.innerHTML = ''; // Clear section before adding
             recipeDetailsSection.appendChild(toggleClone); // Add toggles first

            // Add event listeners to the *cloned* buttons
            const clonedUnitButtons = toggleClone.querySelectorAll('.unit-btn');
            clonedUnitButtons.forEach(btn => {
                 btn.addEventListener('click', handleUnitChange);
             });
         }
         // Update visibility and active states after potential re-render
         updateUnitToggleVisibility(lang);


        // 3. Ingredients List
        html += `<h4 class="list-header" data-lang-key="ingredientsTitle">${getText('ingredientsTitle', lang)}</h4>`;
        html += '<ul class="ingredient-list">';

        recipe.ingredients.forEach(ing => {
            let displayAmount, displayUnitKey;
            let amountValue; // Store numeric amount for scaling

            // Determine which unit system to display
            if (units === 'metric' || units === 'grams') {
                displayAmount = ing.metric.amount;
                displayUnitKey = ing.metric.unitKey;
                amountValue = ing.metric.amount;
                // Apply scaling ONLY to metric amounts marked as scalable
                if (ing.metric.isScalable && scale !== 1 && typeof amountValue === 'number') {
                     displayAmount = amountValue * scale;
                     // console.log(`Scaling ${ing.nameKey}: ${amountValue} * ${scale} = ${displayAmount}`);
                } else if (scale !== 1 && typeof amountValue === 'number' && !ing.metric.isScalable) {
                    // console.log(`Skipping scale for ${ing.nameKey} (not scalable or not number)`);
                }
            } else { // Default to imperial ('imperial' or 'cups')
                displayAmount = ing.imperial.amount;
                displayUnitKey = ing.imperial.unitKey;
                amountValue = null; // Imperial not scaled numerically here
            }

            const formattedAmount = formatAmount(displayAmount);
            const unitText = getText(displayUnitKey, lang);
            const ingredientName = getText(ing.nameKey, lang);
            const noteText = ing.noteKey ? `(${getText(ing.noteKey, lang)})` : '';
            const optionalText = ing.optional ? ` <em class="note">(${getText('noteOptional', lang)})</em>` : '';

             let noteSpan = '';
             if (ing.noteKey) {
                 const noteKeyText = getText(ing.noteKey, lang);
                 if (noteKeyText) {
                    noteSpan = `<span class="note">${noteKeyText}</span>`;
                 }
             }

            html += `<li data-emoji="${ing.emoji || 'üç™'}">
                        <div>
                            <strong>${formattedAmount} ${unitText}</strong> ${ingredientName} ${optionalText}
                             ${noteSpan}
                         </div>
                     </li>`;
        });
        html += '</ul>';

         // 4. Optional Toasting Instructions
         if (recipe.toastMilkPowder) {
             html += `
                 <div class="how-to-toast">
                     <h4 data-lang-key="howToToastMilkPowderTitle">${getText('howToToastMilkPowderTitle', lang)}</h4>
                     <p data-lang-key="howToToastMilkPowderDesc">${getText('howToToastMilkPowderDesc', lang)}</p>
                 </div>`;
         }
         if (recipe.toastNuts) {
             html += `
                 <div class="how-to-toast">
                     <h4 data-lang-key="toastNutsTitle">${getText('toastNutsTitle', lang)}</h4>
                     <p data-lang-key="toastNutsDesc">${getText('toastNutsDesc', lang)}</p>
                 </div>`;
         }


        // 5. Steps List
        html += `<h4 class="list-header" data-lang-key="stepsTitle">${getText('stepsTitle', lang)}</h4>`;
        html += '<ol class="steps-list">';
        recipe.steps.forEach(step => {
             // Skip optional steps if the corresponding ingredient is marked optional and wasn't included (future enhancement)
             // For now, just check if the step itself is marked optional in the step definition (like finishSprinkle)
             if (step.optional && !recipe.ingredients.find(ing => ing.nameKey === 'ingredientFlakySalt' && !ing.optional)) {
                  // Basic check for flaky salt, improve if more optional steps exist
                  // console.log(`Skipping optional step: ${step.stepKey}`);
                 // return; // Skip this step if it's optional (and condition met)
             }

            const stepText = getText(step.stepKey, lang);
             const noteText = step.noteKey ? `<span class="note">${getText(step.noteKey, lang)}</span>` : '';

            html += `<li><div>${stepText}${noteText}</div></li>`;
        });
        html += '</ol>';

        // 6. Optional Science Note
        if (recipe.scienceNoteKey) {
            html += `
                <div class="science-note">
                     <h4 data-lang-key="scienceNoteTitle">${getText('scienceNoteTitle', lang)}</h4>
                     <p>${getText(recipe.scienceNoteKey, lang)}</p>
                </div>`;
        }


        html += '</div>'; // Close recipe-content-area

        // Inject HTML into the details section
        // Find the content area *within* the details section to preserve toggles
         const contentArea = recipeDetailsSection.querySelector('.recipe-content-area');
         if (contentArea) {
             contentArea.innerHTML = html;
         } else {
             // If content area doesn't exist yet (first render), append the whole block
             // This assumes the unit toggles were added *before* this function if needed
              const existingToggles = recipeDetailsSection.querySelector('.recipe-unit-toggle');
              recipeDetailsSection.innerHTML = ''; // Clear everything
              if(existingToggles) recipeDetailsSection.appendChild(existingToggles); // Put toggles back
              recipeDetailsSection.innerHTML += html; // Add the new content
         }


        // Add theme class for styling
        recipeDetailsSection.classList.remove('classic-theme', 'thick-theme', 'thin-theme');
        recipeDetailsSection.classList.add(`${cookieType}-theme`);

        // Update yield info
        updateYieldInfo(recipe.yieldKey);
        updateUnitToggleVisibility(lang); // Re-check visibility after render
    }

    // Debounced version of recipe generation
     const debouncedGenerateRecipe = debounce(regenerateRecipeHTML, 150);

    // Function to handle Unit button clicks (within recipe details)
    function handleUnitChange(event) {
        const newUnit = event.target.dataset.unitType;
        if (newUnit && newUnit !== currentUnits) {
            console.log(`Unit change requested: ${newUnit}`);
            currentUnits = newUnit;
            // Update active button states within the *cloned* container
            const toggleContainer = event.target.closest('.recipe-unit-toggle');
            updateActiveUnitButtonStates(toggleContainer);

            // Regenerate recipe content with new units
            regenerateRecipeHTML(currentCookieType, currentLang, currentUnits, currentScaleFactor);
        }
    }

     // Function to update active state of unit buttons
    function updateActiveUnitButtonStates(container) {
        if (!container) return;
        const unitButtons = container.querySelectorAll('.unit-btn');
        unitButtons.forEach(btn => {
             const isActive = btn.dataset.unitType === currentUnits ||
                              (currentUnits === 'imperial' && btn.dataset.unitType === 'imperial') ||
                              (currentUnits === 'metric' && btn.dataset.unitType === 'metric') ||
                              (currentUnits === 'cups' && btn.dataset.unitType === 'cups') ||
                              (currentUnits === 'grams' && btn.dataset.unitType === 'grams');
             btn.classList.toggle('active', isActive);
        });
    }


    // Function to handle Recipe Scaling
    function handleRecipeScale() {
        const newButterAmount = parseFloat(butterInput.value);
        if (!isNaN(newButterAmount) && newButterAmount > 0 && currentCookieType) {
             // Calculate scale factor relative to the *base* recipe's butter
             const baseRecipeButter = recipeData[currentCookieType]?.ingredients.find(ing => ing.nameKey === 'ingredientButter')?.metric.amount || baseButterAmount;
             currentScaleFactor = newButterAmount / baseRecipeButter;
             console.log(`Scaling requested: Butter=${newButterAmount}g, Base=${baseRecipeButter}g, Factor=${currentScaleFactor.toFixed(2)}`);

            // Force units to metric if scaling is applied, as imperial isn't scaled
             if(currentLang === 'ar') {
                currentUnits = 'grams';
             } else {
                 currentUnits = 'metric';
             }

            // Regenerate recipe with new scale factor
            regenerateRecipeHTML(currentCookieType, currentLang, currentUnits, currentScaleFactor);
        } else {
            console.warn("Invalid butter amount for scaling or no cookie type selected.");
            // Optionally reset scale if input is invalid?
            // currentScaleFactor = 1;
            // regenerateRecipeHTML(currentCookieType, currentLang, currentUnits, currentScaleFactor);
        }
    }

    // Function to populate Tips section
    function populateTips(lang) {
        const langStrings = langData[lang];
        if (!tipsData || !langStrings) return;

        tipsListContainer.innerHTML = ''; // Clear previous tips
        tipsData.forEach(tip => {
            const tipText = langStrings[tip.tipKey] || tip.tipKey;
            const li = document.createElement('li');
             li.dataset.emoji = tip.emoji || 'üí°';
            // Use innerHTML because tip text might contain HTML (like .highlight)
            li.innerHTML = `<div>${tipText}</div>`; // Wrap text in a div for consistent flex alignment
            tipsListContainer.appendChild(li);
        });
    }

    // Function to update Yield Info text
    function updateYieldInfo(yieldKey = null) {
        const langStrings = langData[currentLang];
        if (!langStrings) return;

        let text = '';
         // If a specific yieldKey is provided (from recipe gen), use it
         if (yieldKey && langStrings[yieldKey]) {
             const approx = langStrings.yieldInfoApprox || 'approx.';
             text = `${langStrings.yieldInfoBase || 'Yield:'} ${approx} ${langStrings[yieldKey]}`;
         }
         // If no specific key, but a cookie is selected, find its key
         else if (currentCookieType && recipeData[currentCookieType]?.yieldKey) {
             const currentYieldKey = recipeData[currentCookieType].yieldKey;
             const approx = langStrings.yieldInfoApprox || 'approx.';
             text = `${langStrings.yieldInfoBase || 'Yield:'} ${approx} ${langStrings[currentYieldKey]}`;
         }
         // Otherwise, show a default message or hide it
         else {
             // text = langStrings.yieldInfoBase || 'Yield: Select a cookie';
             text = ''; // Hide if no cookie selected
         }

        yieldInfoP.textContent = text;
    }

     // Function to handle Cookie Card clicks
    function handleCookieCardClick(event) {
        const card = event.currentTarget; // Use currentTarget to ensure it's the div
        const type = card.dataset.type;

        if (!type) return;

        // Easter Egg Trigger: Click Thick card again if already active
         if (type === 'thick' && card.classList.contains('active')) {
             console.log("Easter Egg triggered!");
             populateEasterEgg(currentLang);
             hideContentSection(keyDifferencesSection);
             hideContentSection(recipeScalerSection);
             hideContentSection(recipeDetailsSection);
             showContentSection(easterEggSection);
             // Keep card active, but maybe scroll to easter egg?
             easterEggSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
             return; // Stop normal processing
         }


        // Remove active state from all cards
        cookieCards.forEach(c => c.classList.remove('active'));
        // Add active state to the clicked card
        card.classList.add('active');
         // Update aria-pressed
         cookieCards.forEach(c => c.setAttribute('aria-pressed', 'false'));
         card.setAttribute('aria-pressed', 'true');

        // Update state
        currentCookieType = type;

        // Update UI
        updateHero(type);
        displayContentSections(type); // This will call recipe generation
        updateFavBadgeVisibility(type);
         // Scroll to the dynamic content area smoothly
         dynamicContentWrapper.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

     // Function to populate Easter Egg
     function populateEasterEgg(lang) {
         const data = easterEggData;
         const langStrings = langData[lang];
         if (!data || !langStrings) return;

         easterEggSection.innerHTML = ''; // Clear previous

         let listItems = '';
         data.steps.forEach(stepKey => {
             listItems += `<li>${getText(stepKey, lang)}</li>`;
         });

         const html = `
             <h3 data-lang-key="${data.titleKey}">${getText(data.titleKey, lang)}</h3>
             <div class="easter-egg-content">
                 <p data-lang-key="${data.introKey}">${getText(data.introKey, lang)}</p>
                 <img id="stuffed-cookie-image" src="${data.imageSrc}" alt="${getText(data.imageAltKey, lang)}">
                 <strong data-lang-key="${data.coreConceptKey}">${getText(data.coreConceptKey, lang)}</strong>
                 <p data-lang-key="${data.coreDescKey}">${getText(data.coreDescKey, lang)}</p>
                 <ul>${listItems}</ul>
                 <p><strong>${getText(data.enjoyKey, lang)}</strong></p>
             </div>
         `;
         easterEggSection.innerHTML = html;
     }


    // --- INITIALIZATION ---

    console.log("Initializing script...");

    // 1. Set initial language based on browser or default to 'en'
    // const browserLang = navigator.language.split('-')[0];
    // currentLang = langData[browserLang] ? browserLang : 'en';
    // For simplicity, default to English
    currentLang = 'en';
    langButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.lang === currentLang);
    });

    // 2. Initial Text Update
    updateTextContent(currentLang); // Populate initial text
    populateTips(currentLang); // Populate tips section
    updateYieldInfo(); // Set initial yield text (likely empty)

    // 3. Add Event Listeners
    langButtons.forEach(button => {
        button.addEventListener('click', handleLanguageChange);
    });

    cookieCards.forEach(card => {
        card.addEventListener('click', handleCookieCardClick);
         // Add keyboard accessibility (Enter/Space)
         card.addEventListener('keydown', (event) => {
             if (event.key === 'Enter' || event.key === ' ') {
                 event.preventDefault(); // Prevent spacebar scrolling
                 handleCookieCardClick(event);
             }
         });
    });

    updateScaleBtn.addEventListener('click', handleRecipeScale);
     // Optional: Scale when Enter key is pressed in the input field
     butterInput.addEventListener('keydown', (event) => {
         if (event.key === 'Enter') {
             event.preventDefault();
             handleRecipeScale();
         }
     });


    // 4. Initial Content Display (Show Placeholder)
    displayContentSections(null); // Show placeholder initially
    updateFavBadgeVisibility(null); // Ensure all badges are hidden

    // 5. Make body visible after setup
    body.classList.add('loaded');
    console.log("Initialization complete. Body class 'loaded' added.");

}); // End DOMContentLoaded
